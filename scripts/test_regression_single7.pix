# Heat Shimmer - Air Distortion Effects
# Simulates heat distortion and thermal shimmer effects

clear()

# Configuration
v_canvas_width = 64
v_canvas_height = 64
v_num_heat_sources = 4       # Number of heat generating points
v_shimmer_intensity = 3      # Strength of distortion effect
v_thermal_rise_speed = 0.8   # Speed of rising thermal currents
v_heat_dissipation = 0.97    # How fast heat dissipates

# Heat source arrays
create_array(v_heat_x, v_num_heat_sources, numeric)
create_array(v_heat_y, v_num_heat_sources, numeric)
create_array(v_heat_strength, v_num_heat_sources, numeric)
create_array(v_heat_radius, v_num_heat_sources, numeric)
create_array(v_heat_type, v_num_heat_sources, numeric)

# Background scene arrays (objects that will be distorted)
v_num_bg_objects = 12
create_array(v_bg_x, v_num_bg_objects, numeric)
create_array(v_bg_y, v_num_bg_objects, numeric)
create_array(v_bg_color, v_num_bg_objects, numeric)
create_array(v_bg_size, v_num_bg_objects, numeric)
create_array(v_bg_type, v_num_bg_objects, numeric)

# Thermal current arrays (rising heat visualization)
v_num_thermals = 20
create_array(v_thermal_x, v_num_thermals, numeric)
create_array(v_thermal_y, v_num_thermals, numeric)
create_array(v_thermal_strength, v_num_thermals, numeric)
create_array(v_thermal_age, v_num_thermals, numeric)
create_array(v_thermal_source, v_num_thermals, numeric)
v_thermal_index = 0

# Heat map arrays for distortion calculation
create_array(v_heat_map, v_canvas_width * v_canvas_height, numeric)
create_array(v_distortion_x, v_canvas_width * v_canvas_height, numeric)
create_array(v_distortion_y, v_canvas_width * v_canvas_height, numeric)

# Wave parameters for shimmer animation
v_wave_time = 0
v_wave_frequency = 0.3
v_wave_amplitude = 2

# Initialize heat sources
def init_heat_sources {
    print(f"Creating {v_num_heat_sources} heat sources...")
    
    for v_i in (0, v_num_heat_sources - 1, 1)
        # Heat sources primarily at bottom (ground level)
        v_heat_x[v_i] = random(10, 54, 1)
        v_heat_y[v_i] = random(45, 60, 1)  # Bottom area of screen
        
        # Heat strength and size
        v_heat_strength[v_i] = random(5, 12, 1)
        v_heat_radius[v_i] = random(8, 15, 1)
        
        # Heat type (0=steady, 1=pulsing, 2=flickering)
        v_heat_type[v_i] = random(0, 2, 0)
        
        print(f"Heat source {v_i}: pos=({v_heat_x[v_i]}, {v_heat_y[v_i]}), strength={v_heat_strength[v_i]}, type={v_heat_type[v_i]}")
    endfor v_i
}

# Initialize background scene objects
def init_background_scene {
    print("Creating background scene objects...")
    
    for v_i in (0, v_num_bg_objects - 1, 1)
        # Random positions across scene
        v_bg_x[v_i] = random(5, 59, 1)
        v_bg_y[v_i] = random(5, 55, 1)
        
        # Various colors for visual interest
        v_color_choice = random(0, 6, 0)
        if v_color_choice == 0 then
            v_bg_color[v_i] = 65    # Green
        elseif v_color_choice == 1 then
            v_bg_color[v_i] = 5     # Blue
        elseif v_color_choice == 2 then
            v_bg_color[v_i] = 35    # Yellow
        elseif v_color_choice == 3 then
            v_bg_color[v_i] = 75    # Cyan
        elseif v_color_choice == 4 then
            v_bg_color[v_i] = 85    # Purple
        elseif v_color_choice == 5 then
            v_bg_color[v_i] = 95    # White
        else
            v_bg_color[v_i] = 25    # Orange
        endif
        
        # Size and type
        v_bg_size[v_i] = random(2, 5, 0)
        v_bg_type[v_i] = random(0, 2, 0)  # 0=circle, 1=square, 2=line
    endfor v_i
}

# Initialize thermal currents
def init_thermals {
    for v_i in (0, v_num_thermals - 1, 1)
        v_thermal_x[v_i] = 0
        v_thermal_y[v_i] = 0
        v_thermal_strength[v_i] = 0
        v_thermal_age[v_i] = 0
        v_thermal_source[v_i] = -1
    endfor v_i
}

# Update heat sources (pulsing, flickering effects)
def update_heat_sources {
    for v_i in (0, v_num_heat_sources - 1, 1)
        if v_heat_type[v_i] == 1 then
            # Pulsing heat source
            v_pulse = sin(v_wave_time * 2 + v_i) * 0.3 + 1.0
            v_heat_strength[v_i] = v_heat_strength[v_i] * v_pulse
        elseif v_heat_type[v_i] == 2 then
            # Flickering heat source
            if random(0, 100, 0) < 10 then
                v_heat_strength[v_i] = v_heat_strength[v_i] * random(0.7, 1.3, 1)
            endif
        endif
        
        # Keep heat strength in reasonable bounds
        if v_heat_strength[v_i] < 3 then
            v_heat_strength[v_i] = 3
        endif
        if v_heat_strength[v_i] > 15 then
            v_heat_strength[v_i] = 15
        endif
    endfor v_i
}

# Generate thermal currents from heat sources
def generate_thermal_currents {
    # Create new thermal currents periodically
    if v_frame % 8 == 0 then
        for v_src in (0, v_num_heat_sources - 1, 1)
            if random(0, 100, 0) < 30 then  # 30% chance per heat source
                # Find available thermal slot
                for v_t in (0, v_num_thermals - 1, 1)
                    if v_thermal_age[v_t] <= 0 then
                        # Create new thermal current
                        v_thermal_x[v_t] = v_heat_x[v_src] + random(-3, 3, 1)
                        v_thermal_y[v_t] = v_heat_y[v_src]
                        v_thermal_strength[v_t] = v_heat_strength[v_src] * random(0.8, 1.2, 1)
                        v_thermal_age[v_t] = random(30, 60, 0)
                        v_thermal_source[v_t] = v_src
                        break
                    endif
                endfor v_t
            endif
        endfor v_src
    endif
}

# Update thermal current movement
def update_thermal_currents {
    for v_t in (0, v_num_thermals - 1, 1)
        if v_thermal_age[v_t] > 0 then
            # Move thermal upward (heat rises)
            v_thermal_y[v_t] = v_thermal_y[v_t] - v_thermal_rise_speed
            
            # Add some horizontal drift for realism
            v_drift = sin(v_wave_time + v_t * 0.5) * 0.3
            v_thermal_x[v_t] = v_thermal_x[v_t] + v_drift
            
            # Weaken thermal as it rises
            v_thermal_strength[v_t] = v_thermal_strength[v_t] * v_heat_dissipation
            
            # Age the thermal
            v_thermal_age[v_t] = v_thermal_age[v_t] - 1
            
            # Remove thermal if it goes off screen or becomes too weak
            if v_thermal_y[v_t] < 0 or v_thermal_strength[v_t] < 0.5 then
                v_thermal_age[v_t] = 0
            endif
        endif
    endfor v_t
}

# Calculate heat map and distortion effects
def calculate_heat_distortion {
    # Clear heat map
    for v_i in (0, v_canvas_width * v_canvas_height - 1, 1)
        v_heat_map[v_i] = 0
        v_distortion_x[v_i] = 0
        v_distortion_y[v_i] = 0
    endfor v_i
    
    # Add heat from thermal currents
    for v_t in (0, v_num_thermals - 1, 1)
        if v_thermal_age[v_t] > 0 then
            # Calculate heat influence area
            v_influence_radius = 6
            
            for v_dx in (-v_influence_radius, v_influence_radius, 1)
                for v_dy in (-v_influence_radius, v_influence_radius, 1)
                    v_px = round(v_thermal_x[v_t]) + v_dx
                    v_py = round(v_thermal_y[v_t]) + v_dy
                    
                    if v_px >= 0 and v_px < v_canvas_width and v_py >= 0 and v_py < v_canvas_height then
                        v_distance = sqrt(v_dx * v_dx + v_dy * v_dy)
                        
                        if v_distance <= v_influence_radius then
                            v_heat_index = v_py * v_canvas_width + v_px
                            v_heat_falloff = (v_influence_radius - v_distance) / v_influence_radius
                            v_heat_contribution = v_thermal_strength[v_t] * v_heat_falloff
                            
                            v_heat_map[v_heat_index] = v_heat_map[v_heat_index] + v_heat_contribution
                        endif
                    endif
                endfor v_dy
            endfor v_dx
        endif
    endfor v_t
    
    # Calculate distortion based on heat map
    for v_y in (0, v_canvas_height - 1, 1)
        for v_x in (0, v_canvas_width - 1, 1)
            v_heat_index = v_y * v_canvas_width + v_x
            
            if v_heat_map[v_heat_index] > 0.5 then
                # Create wavy distortion based on heat intensity
                v_heat_intensity = v_heat_map[v_heat_index]
                
                # Wave-based distortion for shimmer effect
                v_wave_offset_x = sin(v_wave_time * v_wave_frequency + v_x * 0.2) * v_wave_amplitude * v_heat_intensity * 0.1
                v_wave_offset_y = sin(v_wave_time * v_wave_frequency + v_y * 0.15 + 1.5) * v_wave_amplitude * v_heat_intensity * 0.1
                
                # Vertical emphasis (heat rises)
                v_vertical_emphasis = sin(v_wave_time * v_wave_frequency * 1.5 + v_x * 0.3) * v_shimmer_intensity * v_heat_intensity * 0.2
                
                v_distortion_x[v_heat_index] = v_wave_offset_x
                v_distortion_y[v_heat_index] = v_wave_offset_y + v_vertical_emphasis
            endif
        endfor v_x
    endfor v_y
}

# Get canvas index from coordinates
def get_canvas_index {
    # Uses global v_px, v_py, returns v_canvas_idx
    if v_px >= 0 and v_px < v_canvas_width and v_py >= 0 and v_py < v_canvas_height then
        v_canvas_idx = v_py * v_canvas_width + v_px
    else
        v_canvas_idx = -1
    endif
}

# Draw background scene with heat distortion
def draw_distorted_background {
    for v_i in (0, v_num_bg_objects - 1, 1)
        # Calculate distortion at object position
        v_px = round(v_bg_x[v_i])
        v_py = round(v_bg_y[v_i])
        call get_canvas_index
        
        v_distorted_x = v_bg_x[v_i]
        v_distorted_y = v_bg_y[v_i]
        
        if v_canvas_idx >= 0 then
            # Apply heat distortion
            v_distorted_x = v_bg_x[v_i] + v_distortion_x[v_canvas_idx]
            v_distorted_y = v_bg_y[v_i] + v_distortion_y[v_canvas_idx]
        endif
        
        # Draw object at distorted position
        if v_bg_type[v_i] == 0 then
            # Circle
            draw_circle(round(v_distorted_x), round(v_distorted_y), v_bg_size[v_i], v_bg_color[v_i], 80, true)
        elseif v_bg_type[v_i] == 1 then
            # Square
            v_half_size = v_bg_size[v_i]
            draw_rectangle(round(v_distorted_x - v_half_size), round(v_distorted_y - v_half_size), v_bg_size[v_i] * 2, v_bg_size[v_i] * 2, v_bg_color[v_i], 80, true)
        else
            # Line
            v_end_x = round(v_distorted_x + v_bg_size[v_i])
            v_end_y = round(v_distorted_y)
            draw_line(round(v_distorted_x), round(v_distorted_y), v_end_x, v_end_y, v_bg_color[v_i], 80)
        endif
    endfor v_i
}

# Draw heat sources
def draw_heat_sources {
    for v_i in (0, v_num_heat_sources - 1, 1)
        # Heat source glow
        v_heat_intensity = min(100, round(v_heat_strength[v_i] * 8))
        draw_circle(round(v_heat_x[v_i]), round(v_heat_y[v_i]), round(v_heat_radius[v_i] / 2), 25, v_heat_intensity, true)  # Orange glow
        draw_circle(round(v_heat_x[v_i]), round(v_heat_y[v_i]), round(v_heat_radius[v_i]), 15, round(v_heat_intensity / 2), false)  # Red outer glow
    endfor v_i
}

# Draw thermal currents (optional visualization)
def draw_thermal_currents {
    for v_t in (0, v_num_thermals - 1, 1)
        if v_thermal_age[v_t] > 0 then
            v_thermal_alpha = round(v_thermal_strength[v_t] * 6)
            v_thermal_alpha = min(60, max(10, v_thermal_alpha))
            
            # Draw thermal as small rising particles
            plot(round(v_thermal_x[v_t]), round(v_thermal_y[v_t]), 35, v_thermal_alpha)  # Yellow-ish
            
            # Add some shimmer effect around thermal
            if v_thermal_strength[v_t] > 2 then
                v_shimmer_offset = sin(v_wave_time * 3 + v_t) * 2
                plot(round(v_thermal_x[v_t] + v_shimmer_offset), round(v_thermal_y[v_t]), 25, round(v_thermal_alpha / 2))
            endif
        endif
    endfor v_t
}

# Draw heat intensity visualization
def draw_heat_info {
    # Simple heat indicator
    draw_rectangle(2, 2, 15, 6, black, 60, true)
    
    # Average heat level
    v_total_heat = 0
    for v_i in (0, v_num_heat_sources - 1, 1)
        v_total_heat = v_total_heat + v_heat_strength[v_i]
    endfor v_i
    v_avg_heat = v_total_heat / v_num_heat_sources
    
    # Heat bar
    v_heat_bar_length = round(v_avg_heat)
    for v_i in (0, v_heat_bar_length, 1)
        plot(3 + v_i, 4, 15, 80)  # Red heat indicator
    endfor v_i
}

# Initialize the heat shimmer simulation
call init_heat_sources
call init_background_scene
call init_thermals

print("Starting Heat Shimmer simulation...")
print("Watch background objects distort through rising heat currents")
print("Heat sources at bottom create thermal currents that rise and create shimmer")
print("Objects appear to waver and dance through the heat distortion")

# Main simulation loop
v_frame = 0
while v_frame >= 0 then
    # Update wave time for animation
    v_wave_time = v_wave_time + 0.2
    
    call update_heat_sources
    call generate_thermal_currents
    call update_thermal_currents
    call calculate_heat_distortion
    
    # Debug info
    if v_frame % 200 == 0 then
        v_active_thermals = 0
        for v_t in (0, v_num_thermals - 1, 1)
            if v_thermal_age[v_t] > 0 then
                v_active_thermals = v_active_thermals + 1
            endif
        endfor v_t
        print(f"Frame {v_frame}: {v_active_thermals} active thermal currents")
    endif
    
    begin_frame
        call draw_heat_sources          # Heat sources at bottom
        call draw_distorted_background  # Background objects with distortion
        call draw_thermal_currents      # Rising heat visualization
        call draw_heat_info            # Heat intensity indicator
    end_frame
    
    v_frame = v_frame + 1
    
    # Reset frame counter
    if v_frame > 1000000 then
        v_frame = 0
    endif
endwhile