# Global configurations up top since they'll be used by all algorithms
v_intensity = 75
v_base_color = "white"
v_compare_color = "blue"
v_swap_color = "red"
v_sorted_color = "green"
v_minimum_color = "cyan"    # Color to show current minimum value being tracked
v_insert_color = "yellow"    # Color for element being inserted
v_pivot_color = "yellow"    # Color for quicksort pivot element

v_animation_speed = 0.009
v_swap_pause = 0.04
v_pause_between_sorts = 3.0
v_clear_pause = 1.0
v_repeat_delay = 5.0
v_start_paused = true

v_show_metrics = true

# Create our arrays globally since they'll be used across procedures
create_array(v_heights, 64)
create_array(v_temp, 64)
create_array(v_stack_start, 64)  # Stack for partition start points - used by quicksort
create_array(v_stack_end, 64)    # Stack for partition end points - used by quicksort


# Initialize and shuffle procedure
def initialize_array {
    # Fill array sequentially first (1-63)
    for v_i in (0, 63, 1) then
        v_heights[v_i] = v_i + 0
    endfor v_i

    # Shuffle using Fisher-Yates
    for v_i in (63, 1, -1) then
        v_rand_index = random(0, v_i, 0)
        
        v_temp[0] = v_heights[v_i]
        v_heights[v_i] = v_heights[v_rand_index]
        v_heights[v_rand_index] = v_temp[0]
    endfor v_i
    clear()
    # Draw initial state if start_paused is true
    if v_start_paused then
#        begin_frame
        for v_i in (0, 63, 1) then
            draw_line(v_i, 63, v_i, 63 - v_heights[v_i], {v_base_color}:{v_intensity})
            #rest(1)
        endfor v_i
#        end_frame
        rest(1)
    endif
}

def bubble_sort {
    v_comparisons = 0
    v_swaps = 0
    
    # Draw initial state
    begin_frame
    for v_i in (0, 63, 1) then
        draw_line(v_i, 0, v_i, 63, black)
        draw_line(v_i, 63, v_i, 63 - v_heights[v_i], {v_base_color}:{v_intensity})
    endfor v_i
    end_frame
    
    # Outer loop: Number of passes needed
    for v_last in (63, 1, -1) then
        v_made_swap = 0
        
        # Inner loop: Compare adjacent elements
        for v_i in (0, v_last - 1, 1) then
            v_comparisons = v_comparisons + 1
            
            # Color the two elements being compared
            #begin_frame
            #draw_line(v_i, 0, v_i, 63, black)
            #draw_line(v_i + 1, 0, v_i + 1, 63, black)
            #draw_line(v_i, 63, v_i, 63 - v_heights[v_i], {v_compare_color}:{v_intensity})
            #draw_line(v_i + 1, 63, v_i + 1, 63 - v_heights[v_i + 1], {v_compare_color}:{v_intensity})
            #end_frame
            
            if v_heights[v_i] > v_heights[v_i + 1] then
                v_swaps = v_swaps + 1
                v_made_swap = 1
                
                # Show swap in red
                #begin_frame
                #draw_line(v_i, 0, v_i, 63, black)
                #draw_line(v_i + 1, 0, v_i + 1, 63, black)
                #draw_line(v_i, 63, v_i, 63 - v_heights[v_i], {v_swap_color}:{v_intensity})
                #draw_line(v_i + 1, 63, v_i + 1, 63 - v_heights[v_i + 1], {v_swap_color}:{v_intensity})
                #end_frame
                #rest(v_swap_pause)
                
                # Perform swap
                v_temp[0] = v_heights[v_i]
                v_heights[v_i] = v_heights[v_i + 1]
                v_heights[v_i + 1] = v_temp[0]
            endif
            
            # Return compared elements to base color
            begin_frame
            draw_line(v_i, 0, v_i, 63, black)
            draw_line(v_i + 1, 0, v_i + 1, 63, black)
            draw_line(v_i, 63, v_i, 63 - v_heights[v_i], {v_base_color}:{v_intensity})
            draw_line(v_i + 1, 63, v_i + 1, 63 - v_heights[v_i + 1], {v_base_color}:{v_intensity})
            end_frame
        endfor v_i
        
        # Mark the last position as sorted
        begin_frame
        draw_line(v_last, 0, v_last, 63, black)
        draw_line(v_last, 63, v_last, 63 - v_heights[v_last], {v_sorted_color}:{v_intensity})
        end_frame
        
        if v_made_swap == 0 then
            # Color remaining elements green since they're sorted
            begin_frame
            for v_i in (0, v_last - 1, 1) then
                draw_line(v_i, 0, v_i, 63, black)
                draw_line(v_i, 63, v_i, 63 - v_heights[v_i], {v_sorted_color}:{v_intensity})
            endfor v_i
            end_frame
            break
        endif
    endfor v_last
    
    if v_show_metrics then
        print(f"Bubble Sort complete:")
        print(f"Comparisons: {v_comparisons}")
        print(f"Swaps: {v_swaps}")
    endif
    
    rest(v_pause_between_sorts)
    clear()
    rest(v_clear_pause)
}


def selection_sort {
    v_comparisons = 0
    v_swaps = 0
    
    # Draw initial state
    begin_frame
    for v_k in (0, 63, 1) then
        draw_line(v_k, 0, v_k, 63, black)
        draw_line(v_k, 63, v_k, 63 - v_heights[v_k], {v_base_color}:{v_intensity})
    endfor v_k
    end_frame
    
    # Main loop
    for v_i in (0, 63, 1) then
        v_min_idx = v_i
        v_last_j = v_i  # Keep track of last position we looked at
        
        # Search for minimum element
        for v_j in (v_i + 1, 63, 1) then
            v_comparisons = v_comparisons + 1
            
            begin_frame
            # Clear and recolor previous position back to base (unless it's our current min)
            if v_last_j != v_min_idx then
                draw_line(v_last_j, 0, v_last_j, 63, black)
                draw_line(v_last_j, 63, v_last_j, 63 - v_heights[v_last_j], {v_base_color}:{v_intensity})
            endif
            
            # Draw new position in blue
            draw_line(v_j, 0, v_j, 63, black)
            draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_compare_color}:{v_intensity})
            
            # Keep minimum in cyan
            draw_line(v_min_idx, 0, v_min_idx, 63, black)
            draw_line(v_min_idx, 63, v_min_idx, 63 - v_heights[v_min_idx], {v_minimum_color}:{v_intensity})
            end_frame
            
            if v_heights[v_j] < v_heights[v_min_idx] then
                v_old_min = v_min_idx
                v_min_idx = v_j
                
                # Update old minimum back to base color
                begin_frame
                draw_line(v_old_min, 0, v_old_min, 63, black)
                draw_line(v_old_min, 63, v_old_min, 63 - v_heights[v_old_min], {v_base_color}:{v_intensity})
                end_frame
            endif
            
            v_last_j = v_j
        endfor v_j
        
        # Reset the last examined position back to base color if it's not the minimum
        if v_last_j != v_min_idx then
            begin_frame
            draw_line(v_last_j, 0, v_last_j, 63, black)
            draw_line(v_last_j, 63, v_last_j, 63 - v_heights[v_last_j], {v_base_color}:{v_intensity})
            end_frame
        endif

        # If minimum isn't already at correct position, swap it
        if v_min_idx != v_i then
            v_swaps = v_swaps + 1
            
            # Show swap in red
            begin_frame
            draw_line(v_i, 0, v_i, 63, black)
            draw_line(v_min_idx, 0, v_min_idx, 63, black)
            draw_line(v_i, 63, v_i, 63 - v_heights[v_i], {v_swap_color}:{v_intensity})
            draw_line(v_min_idx, 63, v_min_idx, 63 - v_heights[v_min_idx], {v_swap_color}:{v_intensity})
            end_frame
            rest(v_swap_pause)
            
            # Perform swap
            v_temp[0] = v_heights[v_i]
            v_heights[v_i] = v_heights[v_min_idx]
            v_heights[v_min_idx] = v_temp[0]
        endif
        
        # Mark current position as sorted
        begin_frame
        draw_line(v_i, 0, v_i, 63, black)
        draw_line(v_i, 63, v_i, 63 - v_heights[v_i], {v_sorted_color}:{v_intensity})
        end_frame
    endfor v_i
    
    # Mark final element as sorted
    begin_frame
    draw_line(62, 0, 62, 63, black)
    draw_line(62, 63, 62, 63 - v_heights[62], {v_sorted_color}:{v_intensity})
    end_frame
    
    if v_show_metrics then
        print(f"Selection Sort complete:")
        print(f"Comparisons: {v_comparisons}")
        print(f"Swaps: {v_swaps}")
    endif
    
    rest(v_pause_between_sorts)
    clear()
    rest(v_clear_pause)
}

def insertion_sort {
    v_comparisons = 0
    v_swaps = 0
    
    # Draw initial state
    begin_frame
    for v_i in (0, 63, 1) then
        draw_line(v_i, 0, v_i, 63, black)
        draw_line(v_i, 63, v_i, 63 - v_heights[v_i], {v_base_color}:{v_intensity})
    endfor v_i
    end_frame
    
    # First element is already sorted
    begin_frame
    draw_line(0, 0, 0, 63, black)
    draw_line(0, 63, 0, 63 - v_heights[0], {v_sorted_color}:{v_intensity})
    end_frame
    
    # Start from second element
    for v_i in (1, 63, 1) then
        v_key = v_heights[v_i]
        
        # Mark element to be inserted in purple
        begin_frame
        draw_line(v_i, 0, v_i, 63, black)
        draw_line(v_i, 63, v_i, 63 - v_key, {v_insert_color}:{v_intensity})
        end_frame
        
        # First scan to find insertion point
        v_j = v_i - 1
        v_insertion_point = 0
        
        while v_j >= 0 then
            v_comparisons = v_comparisons + 1
            
            # Show element being compared in blue
            begin_frame
            draw_line(v_j, 0, v_j, 63, black)
            draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_compare_color}:{v_intensity})
            end_frame
            
            if v_heights[v_j] <= v_key then
                v_insertion_point = v_j + 1
                v_j = -1
            else
                v_j = v_j - 1
                if v_j < 0 then
                    v_insertion_point = 0
                endif
            endif
        endwhile
        
        # Now shift everything right from insertion point to i-1
        if v_insertion_point < v_i then
            v_j = v_i
            while v_j > v_insertion_point then
                v_swaps = v_swaps + 1
                
                # Show the shift in red
                begin_frame
                draw_line(v_j - 1, 0, v_j - 1, 63, black)
                draw_line(v_j, 0, v_j, 63, black)
                draw_line(v_j - 1, 63, v_j - 1, 63 - v_heights[v_j - 1], {v_swap_color}:{v_intensity})
                draw_line(v_j, 63, v_j, 63 - v_heights[v_j - 1], {v_swap_color}:{v_intensity})
                end_frame
                rest(v_swap_pause)
                
                v_heights[v_j] = v_heights[v_j - 1]
                v_j = v_j - 1
            endwhile
            
            # Insert key at found position
            v_heights[v_insertion_point] = v_key
        endif
        
        # Show insertion in red
        begin_frame
        draw_line(v_insertion_point, 0, v_insertion_point, 63, black)
        draw_line(v_insertion_point, 63, v_insertion_point, 63 - v_key, {v_swap_color}:{v_intensity})
        end_frame
        rest(v_swap_pause)
        
        # Color sorted portion green
        begin_frame
        for v_k in (0, v_i, 1) then
            draw_line(v_k, 0, v_k, 63, black)
            draw_line(v_k, 63, v_k, 63 - v_heights[v_k], {v_sorted_color}:{v_intensity})
        endfor v_k
        end_frame
    endfor v_i
    
    if v_show_metrics then
        print(f"Insertion Sort complete:")
        print(f"Comparisons: {v_comparisons}")
        print(f"Swaps: {v_swaps}")
    endif
    
    rest(v_pause_between_sorts)
    clear()
    rest(v_clear_pause)
}

# Global variable to communicate partition point
v_partition_result = 0

def partition_section {
    v_local_partition = v_start
    
    print(f"Starting partition of section {v_start} to {v_end}")
    print(f"Initial partition index: {v_local_partition}")
    
    # Choose rightmost element in THIS SECTION as pivot
    v_pivot_pos = v_end
    v_pivot_value = v_heights[v_pivot_pos]
    print(f"Chose pivot at position {v_pivot_pos} with value {v_pivot_value}")
    
    # Show pivot in yellow
    begin_frame
    draw_line(v_pivot_pos, 0, v_pivot_pos, 63, black)
    draw_line(v_pivot_pos, 63, v_pivot_pos, 63 - v_heights[v_pivot_pos], {v_pivot_color}:{v_intensity})
    end_frame
    
    # Partition elements
    for v_j in (v_start, v_end - 1, 1) then
        v_curr_value = v_heights[v_j]
        print(f"  Comparing position {v_j} value {v_curr_value} with pivot {v_pivot_value}")
        
        begin_frame
        draw_line(v_j, 0, v_j, 63, black)
        draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_compare_color}:{v_intensity})
        end_frame
        
        if v_heights[v_j] < v_pivot_value then
            print(f"    Found value less than pivot, swapping {v_j} with {v_local_partition}")
            
            # Show swap in red
            begin_frame
            draw_line(v_local_partition, 0, v_local_partition, 63, black)
            draw_line(v_j, 0, v_j, 63, black)
            draw_line(v_local_partition, 63, v_local_partition, 63 - v_heights[v_local_partition], {v_swap_color}:{v_intensity})
            draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_swap_color}:{v_intensity})
            end_frame
            
            # Perform swap
            v_temp[0] = v_heights[v_local_partition]
            v_heights[v_local_partition] = v_heights[v_j]
            v_heights[v_j] = v_temp[0]
            
            # Return swapped elements to white
            begin_frame
            draw_line(v_local_partition, 0, v_local_partition, 63, black)
            draw_line(v_j, 0, v_j, 63, black)
            draw_line(v_local_partition, 63, v_local_partition, 63 - v_heights[v_local_partition], {v_base_color}:{v_intensity})
            draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_base_color}:{v_intensity})
            end_frame
            
            v_local_partition = v_local_partition + 1
            print(f"    Partition index now: {v_local_partition}")
        endif
        
        # Return compared element to white if not swapped
        begin_frame
        draw_line(v_j, 0, v_j, 63, black)
        draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_base_color}:{v_intensity})
        end_frame
    endfor v_j
    
    # Move pivot to its final position
    begin_frame
    draw_line(v_local_partition, 0, v_local_partition, 63, black)
    draw_line(v_pivot_pos, 0, v_pivot_pos, 63, black)
    draw_line(v_local_partition, 63, v_local_partition, 63 - v_heights[v_local_partition], {v_swap_color}:{v_intensity})
    draw_line(v_pivot_pos, 63, v_pivot_pos, 63 - v_heights[v_pivot_pos], {v_swap_color}:{v_intensity})
    end_frame
    
    # Swap pivot to final position
    v_temp[0] = v_heights[v_local_partition]
    v_heights[v_local_partition] = v_heights[v_pivot_pos]
    v_heights[v_pivot_pos] = v_temp[0]
    
    # Mark pivot position as sorted
    begin_frame
    draw_line(v_local_partition, 0, v_local_partition, 63, black)
    draw_line(v_local_partition, 63, v_local_partition, 63 - v_heights[v_local_partition], {v_sorted_color}:{v_intensity})
    end_frame
    
    v_partition_result = v_local_partition
    print(f"Partition complete at {v_local_partition}")
}

def quick_sort {
   v_comparisons = 0
   v_swaps = 0
   
   # Create stack arrays for sections
   create_array(v_stack_start, 64)
   create_array(v_stack_end, 64)
   v_stack_pos = 0
   
   # Push initial section
   v_stack_start[v_stack_pos] = 0
   v_stack_end[v_stack_pos] = 63
   v_stack_pos = v_stack_pos + 1
   
   # Process sections
   while v_stack_pos > 0 then
       # Get next section
       v_stack_pos = v_stack_pos - 1
       v_start = v_stack_start[v_stack_pos]
       v_end = v_stack_end[v_stack_pos]
       
       if v_start < v_end then
           
           # Choose rightmost element as pivot
           v_pivot_pos = int(v_end)
           v_pivot_value = v_heights[v_pivot_pos]

           # Show pivot in yellow
           begin_frame
           draw_line(v_pivot_pos, 0, v_pivot_pos, 63, black)
           draw_line(v_pivot_pos, 63, v_pivot_pos, 63 - v_heights[v_pivot_pos], {v_pivot_color}:{v_intensity})
           end_frame
           
           # Initialize partition index
           v_local_partition = v_start

            # Partition elements
            for v_j in (v_start, v_end - 1, 1) then
                v_curr_value = v_heights[v_j]
                
                begin_frame
                draw_line(v_j, 0, v_j, 63, black)
                draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_compare_color}:{v_intensity})
                end_frame
                
                if v_heights[v_j] < v_pivot_value then

                    # Show swap in red
                    begin_frame
                    draw_line(v_local_partition, 0, v_local_partition, 63, black)
                    draw_line(v_j, 0, v_j, 63, black)
                    draw_line(v_local_partition, 63, v_local_partition, 63 - v_heights[v_local_partition], {v_swap_color}:{v_intensity})
                    draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_swap_color}:{v_intensity})
                    end_frame
                    
                    # Perform swap
                    v_temp[0] = v_heights[v_local_partition]
                    v_heights[v_local_partition] = v_heights[v_j]
                    v_heights[v_j] = v_temp[0]
                    # Return swapped elements to white
                    begin_frame
                    draw_line(v_local_partition, 0, v_local_partition, 63, black)
                    draw_line(v_j, 0, v_j, 63, black)
                    draw_line(v_local_partition, 63, v_local_partition, 63 - v_heights[v_local_partition], {v_base_color}:{v_intensity})
                    draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_base_color}:{v_intensity})
                    end_frame
                    v_local_partition = v_local_partition + 1
                endif
                
                # Return compared element to white if not swapped
                begin_frame
                draw_line(v_j, 0, v_j, 63, black)
                draw_line(v_j, 63, v_j, 63 - v_heights[v_j], {v_base_color}:{v_intensity})
                end_frame
            endfor v_j

            # Move pivot to its final position

            begin_frame
            draw_line(v_local_partition, 0, v_local_partition, 63, black)
            draw_line(v_pivot_pos, 0, v_pivot_pos, 63, black)
            draw_line(v_local_partition, 63, v_local_partition, 63 - v_heights[v_local_partition], {v_swap_color}:{v_intensity})
            draw_line(v_pivot_pos, 63, v_pivot_pos, 63 - v_heights[v_pivot_pos], {v_swap_color}:{v_intensity})
            end_frame

            # Swap pivot to final position
            v_temp[0] = v_heights[v_local_partition]
            v_heights[v_local_partition] = v_heights[v_pivot_pos]
            v_heights[v_pivot_pos] = v_temp[0]

            # Mark pivot position as sorted

            # Explicitly color right section sorted (from pivot to end)
            begin_frame
            for v_k in (v_pivot_pos, v_end, 1) then
                draw_line(v_k, 0, v_k, 63, black)
                draw_line(v_k, 63, v_k, 63 - v_heights[v_k], {v_sorted_color}:{v_intensity})
            endfor v_k
            end_frame
            if v_local_partition == 63 then
                begin_frame
                draw_line(v_local_partition, 0, v_local_partition, 63, black)
                draw_line(v_local_partition, 63, v_local_partition, 63 - v_heights[v_local_partition], {v_sorted_color}:{v_intensity})
                end_frame
            else
                begin_frame
                for v_k in (v_local_partition, v_local_partition + 1, 1) then
                    draw_line(v_k, 0, v_k, 63, black)
                    draw_line(v_k, 63, v_k, 63 - v_heights[v_k], {v_sorted_color}:{v_intensity})
                endfor v_k
                end_frame
            endif

            v_partition_result = v_local_partition
            
            # Push sub-sections if they exist
            if v_local_partition - 1 > v_start then
                v_stack_start[v_stack_pos] = v_start
                v_stack_end[v_stack_pos] = v_local_partition - 1
                v_stack_pos = v_stack_pos + 1
            endif
            
            if v_end > v_local_partition + 1 then
                v_stack_start[v_stack_pos] = v_local_partition + 1
                v_stack_end[v_stack_pos] = v_end
                v_stack_pos = v_stack_pos + 1
            endif
        endif
    endwhile
    
    rest(v_pause_between_sorts)
    clear()
    rest(v_clear_pause)
    sync_queue
}


# Main loop that keeps cycling through sorting algorithms
while true then
    # Bubble sort with fresh array
    #call initialize_array
    #call bubble_sort
    
    # Selection sort with fresh array
    #call initialize_array
    #call selection_sort
    
    # Insertion sort with fresh array
    #call initialize_array
    #call insertion_sort

    # Insertion sort with fresh array
    call initialize_array
    call quick_sort

    rest(v_repeat_delay)
endwhile
