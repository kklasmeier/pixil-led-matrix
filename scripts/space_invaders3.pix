# Space Invaders Clone
clear()

# Define player ship sprite
define_sprite(player, 8, 4)
    draw_line(3, 0, 3, 2, green, 100)
    draw_line(4, 0, 4, 2, green, 100)
    draw_rectangle(0, 3, 8, 1, green, 100, true)
    draw_rectangle(1, 2, 6, 1, green, 100, true)
endsprite

# Define invader type 1 sprite
define_sprite(invader1, 8, 6)
    draw_rectangle(2, 0, 4, 1, red, 100, true)
    draw_rectangle(1, 1, 6, 1, red, 100, true)
    draw_rectangle(0, 2, 8, 1, red, 100, true)
    draw_rectangle(0, 3, 2, 1, red, 100, true)
    draw_rectangle(3, 3, 2, 1, red, 100, true)
    draw_rectangle(6, 3, 2, 1, red, 100, true)
    draw_rectangle(1, 4, 1, 1, red, 100, true)
    draw_rectangle(6, 4, 1, 1, red, 100, true)
endsprite

# Define invader type 1 alternate sprite (for animation)
define_sprite(invader1_alt, 8, 6)
    draw_rectangle(2, 0, 4, 1, red, 100, true)
    draw_rectangle(1, 1, 6, 1, red, 100, true)
    draw_rectangle(0, 2, 8, 1, red, 100, true)
    draw_rectangle(0, 3, 2, 1, red, 100, true)
    draw_rectangle(3, 3, 2, 1, red, 100, true)
    draw_rectangle(6, 3, 2, 1, red, 100, true)
    draw_rectangle(0, 4, 1, 1, red, 100, true)
    draw_rectangle(7, 4, 1, 1, red, 100, true)
endsprite

# Define invader type 2 sprite
define_sprite(invader2, 8, 6)
    draw_rectangle(3, 0, 2, 1, magenta, 100, true)
    draw_rectangle(2, 1, 4, 1, magenta, 100, true)
    draw_rectangle(1, 2, 6, 1, magenta, 100, true)
    draw_rectangle(0, 3, 8, 1, magenta, 100, true)
    draw_rectangle(2, 4, 1, 1, magenta, 100, true)
    draw_rectangle(5, 4, 1, 1, magenta, 100, true)
    draw_rectangle(1, 5, 1, 1, magenta, 100, true)
    draw_rectangle(6, 5, 1, 1, magenta, 100, true)
endsprite

# Define invader type 2 alternate sprite (for animation)
define_sprite(invader2_alt, 8, 6)
    draw_rectangle(3, 0, 2, 1, magenta, 100, true)
    draw_rectangle(2, 1, 4, 1, magenta, 100, true)
    draw_rectangle(1, 2, 6, 1, magenta, 100, true)
    draw_rectangle(0, 3, 8, 1, magenta, 100, true)
    draw_rectangle(1, 4, 1, 1, magenta, 100, true)
    draw_rectangle(6, 4, 1, 1, magenta, 100, true)
    draw_rectangle(2, 5, 1, 1, magenta, 100, true)
    draw_rectangle(5, 5, 1, 1, magenta, 100, true)
endsprite

# Define invader type 3 sprite
define_sprite(invader3, 8, 5)
    draw_rectangle(3, 0, 2, 1, cyan, 100, true)
    draw_rectangle(2, 1, 4, 1, cyan, 100, true)
    draw_rectangle(1, 2, 6, 1, cyan, 100, true)
    draw_rectangle(0, 3, 2, 1, cyan, 100, true)
    draw_rectangle(3, 3, 2, 1, cyan, 100, true)
    draw_rectangle(6, 3, 2, 1, cyan, 100, true)
    draw_rectangle(1, 4, 2, 1, cyan, 100, true)
    draw_rectangle(5, 4, 2, 1, cyan, 100, true)
endsprite

# Define invader type 3 alternate sprite (for animation)
define_sprite(invader3_alt, 8, 5)
    draw_rectangle(3, 0, 2, 1, cyan, 100, true)
    draw_rectangle(2, 1, 4, 1, cyan, 100, true)
    draw_rectangle(1, 2, 6, 1, cyan, 100, true)
    draw_rectangle(1, 3, 2, 1, cyan, 100, true)
    draw_rectangle(3, 3, 2, 1, cyan, 100, true)
    draw_rectangle(5, 3, 2, 1, cyan, 100, true)
    draw_rectangle(0, 4, 2, 1, cyan, 100, true)
    draw_rectangle(6, 4, 2, 1, cyan, 100, true)
endsprite

# Define player bullet sprite
define_sprite(player_bullet, 1, 4)
    plot(0, 0, yellow, 100)
    plot(0, 1, yellow, 100)
    plot(0, 2, yellow, 100)
    plot(0, 3, yellow, 100)
endsprite

# Define invader bullet sprite
define_sprite(invader_bullet, 3, 4)
    plot(1, 0, red, 100)
    draw_line(0, 1, 2, 1, red, 100)
    plot(1, 2, red, 100)
    draw_line(0, 3, 2, 3, red, 100)
endsprite

# Define explosion sprite
define_sprite(explosion, 8, 8)
    plot(3, 0, yellow, 100)
    plot(4, 0, yellow, 100)
    plot(2, 1, yellow, 100)
    plot(5, 1, yellow, 100)
    plot(0, 2, yellow, 100)
    plot(3, 2, yellow, 100)
    plot(4, 2, yellow, 100)
    plot(7, 2, yellow, 100)
    plot(1, 3, yellow, 100)
    plot(2, 3, yellow, 100)
    plot(5, 3, yellow, 100)
    plot(6, 3, yellow, 100)
    plot(1, 4, yellow, 100)
    plot(2, 4, yellow, 100)
    plot(5, 4, yellow, 100)
    plot(6, 4, yellow, 100)
    plot(0, 5, yellow, 100)
    plot(3, 5, yellow, 100)
    plot(4, 5, yellow, 100)
    plot(7, 5, yellow, 100)
    plot(2, 6, yellow, 100)
    plot(5, 6, yellow, 100)
    plot(3, 7, yellow, 100)
    plot(4, 7, yellow, 100)
endsprite

# Define shield sprite
define_sprite(shield, 10, 8)
    draw_rectangle(0, 3, 10, 5, green, 70, true)
    draw_rectangle(0, 0, 10, 3, green, 70, true)
    # Create notch in shield
    draw_rectangle(3, 0, 4, 2, black, 100, true)
endsprite

# Define mystery ship sprite
define_sprite(mystery, 10, 4)
    draw_rectangle(2, 0, 6, 1, purple, 100, true)
    draw_rectangle(1, 1, 8, 1, purple, 100, true)
    draw_rectangle(0, 2, 10, 1, purple, 100, true)
    plot(1, 3, purple, 100)
    plot(3, 3, purple, 100)
    plot(5, 3, purple, 100)
    plot(7, 3, purple, 100)
    plot(9, 3, purple, 100)
endsprite

# Game initialization
# Screen dimensions
v_screen_width = 64
v_screen_height = 64
v_border = 1

# Player settings
v_player_x = 32
v_player_y = 58
v_player_speed = 1
v_player_lives = 3
v_player_hit = 0
v_player_hit_timer = 0

# Game state
v_score = 0
v_level = 1
v_paused = 0
v_game_over = 0

# Invader settings
v_rows = 5
v_cols = 8
v_invader_spacing_x = 10
v_invader_spacing_y = 8
v_move_timer = 0
v_move_delay = 30  # Time between moves
v_move_direction = 1  # 1=right, -1=left
v_drop_amount = 2  # How much to drop when hitting edge
v_anim_toggle = 0  # For animation toggling
v_anim_timer = 0
v_anim_delay = 15
v_invaders_remaining = v_rows * v_cols

# Create invader position arrays
create_array(v_invader_x, v_rows * v_cols)
create_array(v_invader_y, v_rows * v_cols)
create_array(v_invader_type, v_rows * v_cols) 
create_array(v_invader_alive, v_rows * v_cols)

# Player bullet
v_player_bullet_active = 0
v_player_bullet_x = 0
v_player_bullet_y = 0
v_player_bullet_id = 100
v_fire_delay_timer = 0
v_fire_delay = 10

# Invader bullets
v_max_invader_bullets = 3
create_array(v_invader_bullet_active, v_max_invader_bullets)
create_array(v_invader_bullet_x, v_max_invader_bullets)
create_array(v_invader_bullet_y, v_max_invader_bullets)
create_array(v_invader_bullet_id, v_max_invader_bullets)

# Initialize invader bullets
for v_i in (0, v_max_invader_bullets - 1, 1) then
    v_invader_bullet_active[v_i] = 0
    v_invader_bullet_id[v_i] = 200 + v_i
endfor v_i

# Shields
v_num_shields = 4
create_array(v_shield_x, v_num_shields)
create_array(v_shield_y, v_num_shields)
create_array(v_shield_health, v_num_shields)
create_array(v_shield_id, v_num_shields)

# Mystery ship
v_mystery_active = 0
v_mystery_x = -15
v_mystery_y = 5
v_mystery_direction = 1
v_mystery_timer = 0
v_mystery_spawn_timer = 0
v_mystery_spawn_delay = 500
v_mystery_id = 500

# Initialize invaders
for v_row in (0, v_rows - 1, 1) then
    for v_col in (0, v_cols - 1, 1) then
        v_index = v_row * v_cols + v_col
        v_invader_x[v_index] = 4 + v_col * v_invader_spacing_x
        v_invader_y[v_index] = 10 + v_row * v_invader_spacing_y
        v_invader_alive[v_index] = 1
        
        # Assign different types to different rows
        if v_row == 0 then
            v_invader_type[v_index] = 1  # Top row is type 1
        elseif v_row == 1 or v_row == 2 then
            v_invader_type[v_index] = 2  # Middle rows are type 2
        else
            v_invader_type[v_index] = 3  # Bottom rows are type 3
        endif
    endfor v_col
endfor v_row

# Initialize shields
for v_i in (0, v_num_shields - 1, 1) then
    v_shield_x[v_i] = 8 + v_i * 15
    v_shield_y[v_i] = 50
    v_shield_health[v_i] = 100
    v_shield_id[v_i] = 300 + v_i
    show_sprite(shield, v_shield_x[v_i], v_shield_y[v_i], v_shield_id[v_i])
endfor v_i

# Show player
show_sprite(player, v_player_x, v_player_y, 0)

# Show score
draw_text(1, 1, "SCORE:", piboto-regular, 4, white, 100)
draw_text(30, 1, f"{v_score}", piboto-regular, 4, white, 100)
draw_text(50, 1, f"LVL:{v_level}", piboto-regular, 4, white, 100)

# Show lives
for v_i in (0, v_player_lives - 1, 1) then
    show_sprite(player, 1 + v_i * 10, v_screen_height - 5, 400 + v_i)
endfor v_i

# Function to update invaders
def update_invaders {
    v_move_timer = v_move_timer + 1
    
    # Move invaders at regular intervals
    if v_move_timer >= v_move_delay then
        v_move_timer = 0
        
        # Animate invaders
        v_anim_toggle = 1 - v_anim_toggle  # Toggle between 0 and 1
        
        # Check if any invader hits the edge
        v_hit_edge = 0
        v_leftmost = 100
        v_rightmost = 0
        
        for v_i in (0, v_rows * v_cols - 1, 1) then
            if v_invader_alive[v_i] == 1 then
                if v_invader_x[v_i] < v_leftmost then
                    v_leftmost = v_invader_x[v_i]
                endif
                if v_invader_x[v_i] > v_rightmost then
                    v_rightmost = v_invader_x[v_i]
                endif
            endif
        endfor v_i
        
        # Check if hitting edges
        if v_leftmost <= v_border and v_move_direction < 0 then
            v_hit_edge = 1
        endif        
        if v_rightmost >= v_screen_width - 10 and v_move_direction > 0 then
            v_hit_edge = 1
        endif
        
        # Move all invaders
        for v_i in (0, v_rows * v_cols - 1, 1) then
            if v_invader_alive[v_i] == 1 then
                # Hide current sprite
                v_sprite_id = v_i + 1
                
                # First hide current sprite
                if v_invader_type[v_i] == 1 then
                    if v_anim_toggle == 0 then
                        hide_sprite(invader1, v_sprite_id)
                    else
                        hide_sprite(invader1_alt, v_sprite_id)
                    endif
                elseif v_invader_type[v_i] == 2 then
                    if v_anim_toggle == 0 then
                        hide_sprite(invader2, v_sprite_id)
                    else
                        hide_sprite(invader2_alt, v_sprite_id)
                    endif
                else
                    if v_anim_toggle == 0 then
                        hide_sprite(invader3, v_sprite_id)
                    else
                        hide_sprite(invader3_alt, v_sprite_id)
                    endif
                endif
                
                # Update position
                if v_hit_edge == 1 then
                    v_invader_y[v_i] = v_invader_y[v_i] + v_drop_amount
                else
                    v_invader_x[v_i] = v_invader_x[v_i] + v_move_direction
                endif
                
                # Show new sprite
                if v_invader_type[v_i] == 1 then
                    if v_anim_toggle == 0 then
                        show_sprite(invader1, v_invader_x[v_i], v_invader_y[v_i], v_sprite_id)
                    else
                        show_sprite(invader1_alt, v_invader_x[v_i], v_invader_y[v_i], v_sprite_id)
                    endif
                elseif v_invader_type[v_i] == 2 then
                    if v_anim_toggle == 0 then
                        show_sprite(invader2, v_invader_x[v_i], v_invader_y[v_i], v_sprite_id)
                    else
                        show_sprite(invader2_alt, v_invader_x[v_i], v_invader_y[v_i], v_sprite_id)
                    endif
                else
                    if v_anim_toggle == 0 then
                        show_sprite(invader3, v_invader_x[v_i], v_invader_y[v_i], v_sprite_id)
                    else
                        show_sprite(invader3_alt, v_invader_x[v_i], v_invader_y[v_i], v_sprite_id)
                    endif
                endif
                
                # Check if invaders reach bottom
                if v_invader_y[v_i] >= v_player_y - 8 then
                    v_game_over = 1
                endif
            endif
        endfor v_i
        
        # Change direction if hit edge
        if v_hit_edge == 1 then
            v_move_direction = v_move_direction * -1
            
            # Increase speed as invaders get lower
            if v_move_delay > 5 then
                v_move_delay = v_move_delay - 1
            endif
        endif
    endif
}

# Function to fire player bullet
def fire_player_bullet {
    if v_player_bullet_active == 0 and v_fire_delay_timer == 0 then
        v_player_bullet_active = 1
        v_player_bullet_x = v_player_x + 4  # Center of player
        v_player_bullet_y = v_player_y - 4  # Just above player
        show_sprite(player_bullet, v_player_bullet_x, v_player_bullet_y, v_player_bullet_id)
        v_fire_delay_timer = v_fire_delay
    endif
}

# Function to update player bullet
def update_player_bullet {
    if v_player_bullet_active == 1 then
        # Move bullet up
        hide_sprite(player_bullet, v_player_bullet_id)
        v_player_bullet_y = v_player_bullet_y - 2
        
        # Check if bullet hits top of screen
        if v_player_bullet_y < 0 then
            v_player_bullet_active = 0
        else
            # Check collision with invaders
            for v_i in (0, v_rows * v_cols - 1, 1) then
                if v_invader_alive[v_i] == 1 then
                    # Simple box collision
                    if v_player_bullet_x >= v_invader_x[v_i] and v_player_bullet_x <= v_invader_x[v_i] + 8 and
                       v_player_bullet_y >= v_invader_y[v_i] and v_player_bullet_y <= v_invader_y[v_i] + 6 then
                        # Hit invader
                        v_player_bullet_active = 0
                        v_invader_alive[v_i] = 0
                        v_invaders_remaining = v_invaders_remaining - 1
                        
                        # Hide hit invader
                        v_sprite_id = v_i + 1
                        if v_invader_type[v_i] == 1 then
                            if v_anim_toggle == 0 then
                                hide_sprite(invader1, v_sprite_id)
                            else
                                hide_sprite(invader1_alt, v_sprite_id)
                            endif
                            # More points for top row
                            v_score = v_score + 30
                        elseif v_invader_type[v_i] == 2 then
                            if v_anim_toggle == 0 then
                                hide_sprite(invader2, v_sprite_id)
                            else
                                hide_sprite(invader2_alt, v_sprite_id)
                            endif
                            v_score = v_score + 20
                        else
                            if v_anim_toggle == 0 then
                                hide_sprite(invader3, v_sprite_id)
                            else
                                hide_sprite(invader3_alt, v_sprite_id)
                            endif
                            v_score = v_score + 10
                        endif
                        
                        # Show explosion
                        show_sprite(explosion, v_invader_x[v_i], v_invader_y[v_i], 600 + v_i)
                        
                        # Update score display
                        draw_rectangle(30, 1, 15, 5, black, 100, true)
                        draw_text(30, 1, f"{v_score}", piboto-regular, 4, white, 100)
                        
                        # Check if all invaders defeated
                        if v_invaders_remaining <= 0 then
                            # Level up
                            v_level = v_level + 1
                            
                            # Reset invaders with increased difficulty
                            for v_row in (0, v_rows - 1, 1) then
                                for v_col in (0, v_cols - 1, 1) then
                                    v_index = v_row * v_cols + v_col
                                    v_invader_x[v_index] = 4 + v_col * v_invader_spacing_x
                                    v_invader_y[v_index] = 10 + v_row * v_invader_spacing_y
                                    v_invader_alive[v_index] = 1
                                    
                                    # Assign different types to different rows
                                    if v_row == 0 then
                                        v_invader_type[v_index] = 1  # Top row is type 1
                                    elseif v_row == 1 or v_row == 2 then
                                        v_invader_type[v_index] = 2  # Middle rows are type 2
                                    else
                                        v_invader_type[v_index] = 3  # Bottom rows are type 3
                                    endif
                                endfor v_col
                            endfor v_row
                            
                            v_invaders_remaining = v_rows * v_cols
                            v_move_delay = max(5, 30 - v_level * 2) # Speed increases with level
                            
                            # Update level display
                            draw_rectangle(50, 1, 15, 5, black, 100, true)
                            draw_text(50, 1, f"LVL:{v_level}", piboto-regular, 4, white, 100)
                        endif
                        
                        # Hide explosion after a brief delay
                        rest(0.1)
                        hide_sprite(explosion, 600 + v_i)
                    endif
                endif
            endfor v_i
            
            # Check collision with mystery ship
            if v_mystery_active == 1 then
                if v_player_bullet_x >= v_mystery_x and v_player_bullet_x <= v_mystery_x + 10 and
                   v_player_bullet_y >= v_mystery_y and v_player_bullet_y <= v_mystery_y + 4 then
                    # Hit mystery ship
                    v_player_bullet_active = 0
                    v_mystery_active = 0
                    hide_sprite(mystery, v_mystery_id)
                    
                    # Points for mystery ship: 100-300 random
                    v_mystery_points = random(1, 3, 0) * 100
                    v_score = v_score + v_mystery_points
                    
                    # Update score display
                    draw_rectangle(30, 1, 15, 5, black, 100, true)
                    draw_text(30, 1, f"{v_score}", piboto-regular, 4, white, 100)
                    
                    # Show points briefly where mystery ship was hit
                    draw_text(v_mystery_x, v_mystery_y, f"{v_mystery_points}", piboto-regular, 4, purple, 100, 5000)
                    
                    # Show explosion
                    show_sprite(explosion, v_mystery_x, v_mystery_y, 601)
                    rest(0.1)
                    hide_sprite(explosion, 601)
                endif
            endif
            
            # Check collision with shields
            for v_i in (0, v_num_shields - 1, 1) then
                if v_shield_health[v_i] > 0 then
                    if v_player_bullet_x >= v_shield_x[v_i] and v_player_bullet_x <= v_shield_x[v_i] + 10 and
                       v_player_bullet_y >= v_shield_y[v_i] and v_player_bullet_y <= v_shield_y[v_i] + 8 then
                        # Hit shield
                        v_player_bullet_active = 0
                        v_shield_health[v_i] = v_shield_health[v_i] - 25
                        
                        # Shield disappears if health depleted
                        if v_shield_health[v_i] <= 0 then
                            hide_sprite(shield, v_shield_id[v_i])
                        endif
                    endif
                endif
            endfor v_i
            
            # If bullet still active, show it
            if v_player_bullet_active == 1 then
                show_sprite(player_bullet, v_player_bullet_x, v_player_bullet_y, v_player_bullet_id)
            endif
        endif
    endif
    
    # Decrease fire delay timer if active
    if v_fire_delay_timer > 0 then
        v_fire_delay_timer = v_fire_delay_timer - 1
    endif
}

# Function to update invader bullets
def update_invader_bullets {
    # Try to spawn new invader bullets
    for v_i in (0, v_max_invader_bullets - 1, 1) then
        if v_invader_bullet_active[v_i] == 0 and random(0, 50, 0) < 1 and v_invaders_remaining > 0 then
            # Find a random active invader to fire from
            v_shooter_found = 0
            v_try_count = 0
            
            while v_shooter_found == 0 and v_try_count < 10 then
                v_random_invader = random(0, v_rows * v_cols - 1, 0)
                if v_invader_alive[v_random_invader] == 1 then
                    v_shooter_found = 1
                    
                    # Activate bullet
                    v_invader_bullet_active[v_i] = 1
                    v_invader_bullet_x[v_i] = v_invader_x[v_random_invader] + 4  # Center of invader
                    v_invader_bullet_y[v_i] = v_invader_y[v_random_invader] + 6  # Below invader
                    show_sprite(invader_bullet, v_invader_bullet_x[v_i], v_invader_bullet_y[v_i], v_invader_bullet_id[v_i])
                endif
                v_try_count = v_try_count + 1
            endwhile
        endif
    endfor v_i
    
    # Update active invader bullets
    for v_i in (0, v_max_invader_bullets - 1, 1) then
        if v_invader_bullet_active[v_i] == 1 then
            # Move bullet down
            hide_sprite(invader_bullet, v_invader_bullet_id[v_i])
            v_invader_bullet_y[v_i] = v_invader_bullet_y[v_i] + 1
            
            # Check if bullet hits bottom of screen
            if v_invader_bullet_y[v_i] > v_screen_height then
                v_invader_bullet_active[v_i] = 0
            else
                # Check collision with player
                if v_player_hit == 0 and
                   v_invader_bullet_x[v_i] >= v_player_x and v_invader_bullet_x[v_i] <= v_player_x + 8 and
                   v_invader_bullet_y[v_i] >= v_player_y and v_invader_bullet_y[v_i] <= v_player_y + 4 then
                    # Hit player
                    v_invader_bullet_active[v_i] = 0
                    v_player_hit = 1
                    v_player_hit_timer = 20
                    v_player_lives = v_player_lives - 1
                    
                    # Show explosion
                    hide_sprite(player, 0)
                    show_sprite(explosion, v_player_x, v_player_y, 999)
                    
                    # Update lives display
                    hide_sprite(player, 400 + v_player_lives)
                    
                    # Check game over
                    if v_player_lives <= 0 then
                        v_game_over = 1
                    endif
                endif
                
                # Check collision with shields
                for v_j in (0, v_num_shields - 1, 1) then
                    if v_shield_health[v_j] > 0 then
                        if v_invader_bullet_x[v_i] >= v_shield_x[v_j] and v_invader_bullet_x[v_i] <= v_shield_x[v_j] + 10 and
                           v_invader_bullet_y[v_i] >= v_shield_y[v_j] and v_invader_bullet_y[v_i] <= v_shield_y[v_j] + 8 then
                            # Hit shield
                            v_invader_bullet_active[v_i] = 0
                            v_shield_health[v_j] = v_shield_health[v_j] - 15
                            
                            # Shield disappears if health depleted
                            if v_shield_health[v_j] <= 0 then
                                hide_sprite(shield, v_shield_id[v_j])
                            endif
                        endif
                    endif
                endfor v_j
                
                # Check collision with player bullet (bullets cancel each other)
                if v_player_bullet_active == 1 then
                    if abs(v_invader_bullet_x[v_i] - v_player_bullet_x) < 3 and
                       abs(v_invader_bullet_y[v_i] - v_player_bullet_y) < 4 then
                        # Bullets collide and cancel out
                        v_invader_bullet_active[v_i] = 0
                        v_player_bullet_active = 0
                        hide_sprite(player_bullet, v_player_bullet_id)
                    endif
                endif
                
                # If bullet still active, show it
                if v_invader_bullet_active[v_i] == 1 then
                    show_sprite(invader_bullet, v_invader_bullet_x[v_i], v_invader_bullet_y[v_i], v_invader_bullet_id[v_i])
                endif
            endif
        endif
    endfor v_i
}

# Function to update mystery ship
def update_mystery_ship {
    # Spawn mystery ship occasionally
    if v_mystery_active == 0 then
        v_mystery_spawn_timer = v_mystery_spawn_timer + 1
        
        if v_mystery_spawn_timer >= v_mystery_spawn_delay then
            v_mystery_spawn_timer = 0
            v_mystery_active = 0
            
            # Determine direction, alternate between left and right
            v_mystery_direction = v_mystery_direction * -1
            
            if v_mystery_direction > 0 then
                v_mystery_x = -15  # Start left of screen
            else
                v_mystery_x = v_screen_width + 5  # Start right of screen
            endif
            
            show_sprite(mystery, v_mystery_x, v_mystery_y, v_mystery_id)
        endif
    else
        # Move mystery ship
        hide_sprite(mystery, v_mystery_id)
        v_mystery_x = v_mystery_x + v_mystery_direction
        
        # Check if ship exits screen
        if v_mystery_direction > 0 and v_mystery_x > v_screen_width + 5 then
            v_mystery_active = 0
        elseif v_mystery_direction < 0 and v_mystery_x < -15 then
            v_mystery_active = 0
        else
            show_sprite(mystery, v_mystery_x, v_mystery_y, v_mystery_id)
        endif
    endif
}

# Function to update player
def update_player {
    # Handle player hit animation
    if v_player_hit == 1 then
        v_player_hit_timer = v_player_hit_timer - 1
        
        if v_player_hit_timer <= 0 then
            v_player_hit = 0
            hide_sprite(explosion, 999)
            
            # Only show player if not game over
            if v_game_over == 0 then
                show_sprite(player, v_player_x, v_player_y, 0)
            endif
        endif
    else
        # Move player (alternating between left and right for demo)
        v_move_dir = random(0, 2, 0) - 1  # -1, 0, or 1
        
        if v_move_dir != 0 then
            v_player_x = v_player_x + v_move_dir * v_player_speed
            
            # Keep player within bounds
            if v_player_x < 1 then
                v_player_x = 1
            elseif v_player_x > v_screen_width - 9 then
                v_player_x = v_screen_width - 9
            endif
            
            move_sprite(player, v_player_x, v_player_y, 0)
        endif
        
        # Random firing
        if random(0, 15, 0) < 1 then
            call fire_player_bullet
        endif
    endif
}

# Draw bottom line boundary
draw_line(0, v_screen_height - 1, v_screen_width, v_screen_height - 1, green, 100)

# Main game loop
v_time = 0
while v_game_over == 0 and v_time < 5000 then
    v_time = v_time + 1
    
    # Update invaders
    call update_invaders
    
    # Update player
    call update_player
    
    # Update player bullet
    call update_player_bullet
    
    # Update invader bullets
    call update_invader_bullets
    
    # Update mystery ship
    call update_mystery_ship
    
    # Level increase logic when all invaders gone
    if v_invaders_remaining <= 0 then
        # Reset for next level
        v_level = v_level + 1
        
        # Update level display
        draw_rectangle(50, 1, 15, 5, black, 100, true)
        draw_text(50, 1, f"LVL:{v_level}", piboto-regular, 4, white, 100)
        
        # Make invaders faster with each level
        v_move_delay = max(5, v_move_delay - 2)
        
        # Reset invaders
        for v_row in (0, v_rows - 1, 1) then
            for v_col in (0, v_cols - 1, 1) then
                v_index = v_row * v_cols + v_col
                v_invader_x[v_index] = 4 + v_col * v_invader_spacing_x
                v_invader_y[v_index] = 10 + v_row * v_invader_spacing_y
                v_invader_alive[v_index] = 1
                
                # Show invaders
                v_sprite_id = v_index + 1
                if v_invader_type[v_index] == 1 then
                    show_sprite(invader1, v_invader_x[v_index], v_invader_y[v_index], v_sprite_id)
                elseif v_invader_type[v_index] == 2 then
                    show_sprite(invader2, v_invader_x[v_index], v_invader_y[v_index], v_sprite_id)
                else
                    show_sprite(invader3, v_invader_x[v_index], v_invader_y[v_index], v_sprite_id)
                endif
            endfor v_col
        endfor v_row
        
        v_invaders_remaining = v_rows * v_cols
        
        # Reset shields
        for v_i in (0, v_num_shields - 1, 1) then
            v_shield_health[v_i] = 100
            show_sprite(shield, v_shield_x[v_i], v_shield_y[v_i], v_shield_id[v_i])
        endfor v_i
    endif
    sync_queue
    rest(0.05)
endwhile

# Game over display
if v_game_over == 1 then
    # Clear all sprite instances
    for v_i in (0, v_rows * v_cols - 1, 1) then
        v_sprite_id = v_i + 1
        if v_invader_type[v_i] == 1 then
            hide_sprite(invader1, v_sprite_id)
            hide_sprite(invader1_alt, v_sprite_id)
        elseif v_invader_type[v_i] == 2 then
            hide_sprite(invader2, v_sprite_id)
            hide_sprite(invader2_alt, v_sprite_id)
        else
            hide_sprite(invader3, v_sprite_id)
            hide_sprite(invader3_alt, v_sprite_id)
        endif
    endfor v_i
    
    # Hide other sprites
    for v_i in (0, v_max_invader_bullets - 1, 1) then
        hide_sprite(invader_bullet, v_invader_bullet_id[v_i])
    endfor v_i
    
    hide_sprite(player_bullet, v_player_bullet_id)
    hide_sprite(mystery, v_mystery_id)
    
    # Show game over message
    draw_rectangle(10, 25, 44, 15, black, 80, true)
    draw_text(15, 30, "GAME OVER", piboto-regular, 5, red, 100)
    draw_text(20, 38, f"SCORE: {v_score}", piboto-regular, 4, white, 100)
endif

# Clean up
dispose_all_sprites()