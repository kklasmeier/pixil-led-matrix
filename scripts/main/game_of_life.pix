# Conway's Game of Life - Optimized Version

# Grid size (smaller for better performance)
v_size = 32  # Reduced for better performance
v_cell_size = 2  # Each cell will be 2x2 pixels

# Create arrays
create_array(v_grid, v_size * v_size)
create_array(v_next_grid, v_size * v_size)

# Set maximum speed
throttle(0)

# Initialize random cells with low density
for v_i in (0, v_size * v_size - 1, 1)
    v_rand = random(0, 10, 0)
    if v_rand < 2 then  # 20% chance of living cell
        v_grid[v_i] = 1
    else
        v_grid[v_i] = 0
    endif
endfor v_i

# Variables for generation tracking
v_generation = 0

# Main simulation loop
while true then
    # Draw current grid - use frame buffer for efficiency
    # Draw generation count
    
    begin_frame
    
    # Draw grid
    for v_y in (0, v_size - 1, 1)
        for v_x in (0, v_size - 1, 1)
            v_idx = v_y * v_size + v_x
            if v_grid[v_idx] == 1 then
                draw_rectangle(v_x * v_cell_size, v_y * v_cell_size, v_cell_size, v_cell_size, cyan, 90, true)
            endif
        endfor v_x
    endfor v_y
    draw_rectangle(0, 0, 10, 7, black, 100, true)
    draw_text(1, 1, v_generation, tiny64_font, 5, white, 100)
    end_frame


    
    # Calculate next generation
    for v_y in (0, v_size - 1, 1)
        for v_x in (0, v_size - 1, 1)
            # Count neighbors with simplified approach
            v_count = 0
            v_curr_idx = v_y * v_size + v_x
            
            # Top-left
            if v_y > 0 and v_x > 0 then
                if v_grid[(v_y - 1) * v_size + (v_x - 1)] == 1 then
                    v_count = v_count + 1
                endif
            endif
            
            # Top
            if v_y > 0 then
                if v_grid[(v_y - 1) * v_size + v_x] == 1 then
                    v_count = v_count + 1
                endif
            endif
            
            # Top-right
            if v_y > 0 and v_x < v_size - 1 then
                if v_grid[(v_y - 1) * v_size + (v_x + 1)] == 1 then
                    v_count = v_count + 1
                endif
            endif
            
            # Left
            if v_x > 0 then
                if v_grid[v_y * v_size + (v_x - 1)] == 1 then
                    v_count = v_count + 1
                endif
            endif
            
            # Right
            if v_x < v_size - 1 then
                if v_grid[v_y * v_size + (v_x + 1)] == 1 then
                    v_count = v_count + 1
                endif
            endif
            
            # Bottom-left
            if v_y < v_size - 1 and v_x > 0 then
                if v_grid[(v_y + 1) * v_size + (v_x - 1)] == 1 then
                    v_count = v_count + 1
                endif
            endif
            
            # Bottom
            if v_y < v_size - 1 then
                if v_grid[(v_y + 1) * v_size + v_x] == 1 then
                    v_count = v_count + 1
                endif
            endif
            
            # Bottom-right
            if v_y < v_size - 1 and v_x < v_size - 1 then
                if v_grid[(v_y + 1) * v_size + (v_x + 1)] == 1 then
                    v_count = v_count + 1
                endif
            endif
            
            # Apply rules
            if v_grid[v_curr_idx] == 1 then
                # Living cell
                if v_count < 2 or v_count > 3 then
                    v_next_grid[v_curr_idx] = 0  # Dies
                else
                    v_next_grid[v_curr_idx] = 1  # Survives
                endif
            else
                # Dead cell
                if v_count == 3 then
                    v_next_grid[v_curr_idx] = 1  # Born
                else
                    v_next_grid[v_curr_idx] = 0  # Stays dead
                endif
            endif
        endfor v_x
    endfor v_y
    
    # Swap grids by copying next to current
    for v_i in (0, v_size * v_size - 1, 1)
        v_grid[v_i] = v_next_grid[v_i]
    endfor v_i
    
    # Increment generation counter
    v_generation = v_generation + 1
    
    # Periodically add a glider pattern to keep things interesting
    if v_generation % 100 == 0 then
        # Calculate random position for glider
        v_gx = random(2, v_size - 5, 0)
        v_gy = random(2, v_size - 5, 0)
        
        # Place glider pattern (manually place each cell)
        v_grid[v_gy * v_size + (v_gx + 1)] = 1
        v_grid[(v_gy + 1) * v_size + (v_gx + 2)] = 1
        v_grid[(v_gy + 2) * v_size + v_gx] = 1
        v_grid[(v_gy + 2) * v_size + (v_gx + 1)] = 1
        v_grid[(v_gy + 2) * v_size + (v_gx + 2)] = 1
    endif
endwhile