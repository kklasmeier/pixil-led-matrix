# Initialize variables
create_array(v_x_origins, 6)
create_array(v_y_origins, 6)
create_array(v_radii, 6)
create_array(v_colors, 6)
create_array(v_phases, 6)
v_count = 0
v_time = 0
v_last_mode = -1

while true then
    begin_frame(true)
    
    # Phase cycling: Switch every 500 frames
    v_phase = int(v_time / 500)
    v_mode = v_phase % 6

    # Print mode name when it changes
    if v_mode != v_last_mode then
        sync_queue
        if v_mode == 0 then
            print("Mode: Original")
        elseif v_mode == 1 then
            print("Mode: Colorful Ripple Symphony")
        elseif v_mode == 2 then
            print("Mode: Ripple Pulse Wave")
        elseif v_mode == 3 then
            print("Mode: Gravitational Ripple Dance")
        elseif v_mode == 4 then
            print("Mode: Ripple Echo Storm")
        else
            print("Mode: Echoes in the Void")
        endif
        v_last_mode = v_mode
    endif
    
    # Mode 5: Centered void (using black string)
    if v_mode == 5 then
        v_void_size = 5 + sin(v_time * 0.05) * 3
        draw_circle(32, 32, v_void_size, black, 100, true)  # Black as string
        #print(f"Void drawn: size {v_void_size}, color black")
        #sync_queue
    endif
    
    # Spawn logic
    if v_mode == 0 then
        v_spawn_chance = 8
    elseif v_mode == 1 then
        v_spawn_chance = 8
    elseif v_mode == 2 then
        v_spawn_chance = 8
    elseif v_mode == 3 then
        v_spawn_chance = 8
    elseif v_mode == 4 then
        if v_time / 200 % 2 == 0 then
            v_spawn_chance = 8
        else
            v_spawn_chance = 5
        endif
    else
        v_spawn_chance = 8
    endif
    
    if random(0, 10, 0) > v_spawn_chance then
        if v_mode == 5 and random(0, 10, 0) > 2 then
            v_x_origins[v_count] = 32
            v_y_origins[v_count] = 32
        else
            v_x_origins[v_count] = random(0, 63, 0)
            v_y_origins[v_count] = random(0, 63, 0)
        endif
        v_radii[v_count] = 1
        if v_mode == 1 then
            v_colors[v_count] = random(0, 99, 0)
        else
            v_colors[v_count] = 60
        endif
        v_phases[v_count] = 0
        v_count = (v_count + 1) % 6
    endif
    
    # Update and draw ripples
    for v_i in (0, 5, 1)
        if v_radii[v_i] > 0 then
            if v_mode == 3 then
                for v_j in (0, 5, 1)
                    if v_j != v_i and v_radii[v_j] > 0 then
                        v_dx = v_x_origins[v_j] - v_x_origins[v_i]
                        v_dy = v_y_origins[v_j] - v_y_origins[v_i]
                        v_dist = sqrt(v_dx * v_dx + v_dy * v_dy)
                        v_dist = max(v_dist, 0.1)
                        if v_dist < 20 then
                            v_x_origins[v_i] = v_x_origins[v_i] + v_dx / v_dist
                            v_y_origins[v_i] = v_y_origins[v_i] + v_dy / v_dist
                        endif
                    endif
                endfor v_j
            endif
            
            if v_mode == 2 then
                v_size = v_radii[v_i] * abs(sin(v_phases[v_i]))
            else
                v_size = v_radii[v_i]
            endif
            
            draw_circle(v_x_origins[v_i], v_y_origins[v_i], v_size, v_colors[v_i], 100 - v_radii[v_i] * 5, false, 100)
            
            v_radii[v_i] = v_radii[v_i] + 1
            if v_mode == 2 then
                v_phases[v_i] = v_phases[v_i] + 0.2
            endif
            if v_radii[v_i] > 20 then
                v_radii[v_i] = 0
            endif
        endif
    endfor v_i
    
    end_frame
    v_time = v_time + 1
endwhile