# Dancing Squares Pattern Lightshow
v_centerX = 32
v_centerY = 32
v_angle = 0
v_color_base = 45
v_fade_start = 99

# Animation control variables
v_frame_mode = 1
v_speed = 5
v_rest_time = 0.05
v_effect_duration = 0
v_effect_max_time = 2
v_burnout_enabled = 0
v_burnout_min = 100
v_burnout_max = 500

# Square pattern variables
v_min_size = 5
v_max_size = 30
v_size_step = 5
v_wave_amp = 10
v_rotation = 0
v_fill_mode = 0

# Speed control variables
v_speed_phase = 0      # Controls speed cycling
v_base_speed = 5       # Base animation speed

while 1 then
    if v_effect_duration > v_effect_max_time then
        v_effect_duration = 0
        
        if random(0, 100, 0) > 50 then
            v_frame_mode = 1
        else
            v_frame_mode = 0
        endif
        
        # Set new base animation speed
        v_base_speed = random(3, 7, 0)
        v_wave_amp = random(5, 15, 0)
        v_size_step = random(3, 8, 0)
        
        if random(0, 100, 0) > 50 then
            v_fill_mode = 1
        else
            v_fill_mode = 0
        endif
        
        if random(0, 100, 0) > 70 then
            v_burnout_enabled = 1
            v_rest_time = 0.01
        else
            v_burnout_enabled = 0
            v_rest_time = 0.03
        endif
    endif

    # Calculate current speed using smooth sine wave variation
    v_speed = v_base_speed + 2 * sin(v_speed_phase)
    v_speed_phase = v_speed_phase + 2

    #if v_frame_mode == 1 then
    #    begin_frame
    #endif
    
    clear

    v_rest = random(.005, .04, 3)
    for v_size in (v_min_size, v_max_size, v_size_step) then
        v_offset = v_wave_amp * sin(v_angle + v_size)
        v_x1 = v_centerX - v_size + v_offset
        v_y1 = v_centerY - v_size
        v_intensity = v_fade_start * (1 - v_size / v_max_size)
        
        if v_burnout_enabled == 1 then
            draw_rectangle(v_x1, v_y1, v_size * 2, v_size * 2, v_color_base, v_intensity, v_fill_mode, random(v_burnout_min, v_burnout_max, 0))
        else
            draw_rectangle(v_x1, v_y1, v_size * 2, v_size * 2, v_color_base, v_intensity, v_fill_mode)
        endif
        
        v_rot_x = v_centerX - v_size + v_offset * cos(v_rotation)
        v_rot_y = v_centerY - v_size + v_offset * sin(v_rotation)
        
        if v_burnout_enabled == 1 then
            draw_rectangle(v_rot_x, v_rot_y, v_size * 2, v_size * 2, v_color_base, v_intensity, v_fill_mode, random(v_burnout_min, v_burnout_max, 0))
        else
            draw_rectangle(v_rot_x, v_rot_y, v_size * 2, v_size * 2, v_color_base, v_intensity, v_fill_mode)
        endif
        rest(v_rest)
    endfor v_size

    #if v_frame_mode == 1 then
    #    end_frame
    #endif

    v_angle = v_angle + v_speed
    v_rotation = v_rotation + v_speed / 2
    v_color_base = v_color_base + 1
    if v_color_base > 99 then
        v_color_base = 1
    endif

    v_effect_duration = v_effect_duration + 1
    rest(v_rest_time)
endwhile