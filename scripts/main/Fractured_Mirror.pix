# Grid setup (8x8 tiles, each 8x8 pixels)
create_array(v_offsets_x, 64)  # X offset for each tile
create_array(v_offsets_y, 64)  # Y offset for each tile

# Initialize offsets to 0
for v_i in (0, 63, 1) then
    v_offsets_x[v_i] = 0
    v_offsets_y[v_i] = 0
endfor v_i

# Animation control
v_time = 0
v_shatter_phase = 0  # 0 = stable, 1 = shattering, 2 = reforming
v_phase_timer = 0
v_phase_duration = 4.0  # Seconds per phase

# Main animation loop
while true then
    begin_frame
 
    
    # Update phase timer and switch phases
    v_phase_timer = v_phase_timer + 0.025
    if v_phase_timer >= v_phase_duration then
        v_shatter_phase = (v_shatter_phase + 1) % 3  # Cycle 0, 1, 2
        v_phase_timer = 0
    endif
    
    # Update offsets based on phase
    for v_i in (0, 63, 1) then
        v_x = (v_i % 8) * 8  # Base x position (0, 8, 16, ..., 56)
        v_y = (v_i / 8) * 8  # Base y position (0, 8, 16, ..., 56)
        
        if v_shatter_phase == 1 then
            # Shattering: Move tiles outward
            v_offsets_x[v_i] = sin(v_time + v_i * 0.2) * 6
            v_offsets_y[v_i] = cos(v_time + v_i * 0.2) * 6
        elseif v_shatter_phase == 2 then
            # Reforming: Ease back to 0
            v_offsets_x[v_i] = v_offsets_x[v_i] * 0.9
            v_offsets_y[v_i] = v_offsets_y[v_i] * 0.9
        else
            # Stable: Hold position (offsets stay near 0)
            v_offsets_x[v_i] = 0
            v_offsets_y[v_i] = 0
        endif
        
        # Draw original tile
        v_tile_x = v_x + v_offsets_x[v_i]
        v_tile_y = v_y + v_offsets_y[v_i]
        draw_rectangle(v_tile_x, v_tile_y, 6, 6, green, 75, true)
        
        # Draw mirrored tile (reflect across center at 32, 32)
        v_mirror_x = 64 - v_tile_x - 6  # Reflect x
        v_mirror_y = 64 - v_tile_y - 6  # Reflect y
        draw_rectangle(v_mirror_x, v_mirror_y, 6, 6, red, 75, true)
    endfor v_i
    
    end_frame
    v_time = v_time + 0.1
    rest(0.025)  # ~40 FPS
endwhile