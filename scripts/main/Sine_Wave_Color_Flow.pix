# Sine Wave Color Flow Animation
# Creates flowing waves of color that move across the display

# Wave parameters
v_num_waves = 2
v_wave_height = 40
v_wave_speed = 0.1
v_color_speed = 0.05
v_burnout = 300
v_refresh_count = 0   # Counter for refreshes
v_color_cycle = 0     # Track which color pair we're using

# Create arrays for wave properties
create_array(v_phase, v_num_waves)      # Phase offset for each wave
create_array(v_amplitude, v_num_waves)   # Amplitude for each wave
create_array(v_frequency, v_num_waves)   # Frequency for each wave
create_array(v_wave_color, v_num_waves)  # Store current colors for waves

# Initialize variables
v_i = 0
v_x = 0
v_y = 0
v_t = 0           # Time variable for animation
v_color_t = 0     # Time variable for color cycling
v_bright = 0
v_trail_bright = 0
v_wave_y = 0

# Initialize waves with different properties
v_i = 0
while v_i < v_num_waves then
    v_phase[v_i] = random(0, 628, 2) / 100  # Random phase (0 to 2Ï€)
    v_amplitude[v_i] = random(5, 15, 1)     # Random amplitude
    v_frequency[v_i] = random(1, 4, 2) / 10  # Random frequency
    v_wave_color[v_i] = 0  # Start with first color pair
    v_i = v_i + 1
endwhile

# Main animation loop
while true then
    
    # Check if we need to refresh wave properties
    v_refresh_count = v_refresh_count + 1
    if v_refresh_count >= 10 then
        v_refresh_count = 0
        # Cycle to next color pair
        v_color_cycle = v_color_cycle + 1
        if v_color_cycle > 4 then
            v_color_cycle = 0
        endif
        
        # Reinitialize wave properties
        v_i = 0
        while v_i < v_num_waves then
            v_phase[v_i] = random(0, 628, 2) / 100
            v_amplitude[v_i] = random(5, 15, 1)
            v_frequency[v_i] = random(1, 4, 2) / 10
            v_i = v_i + 1
        endwhile
    endif
    
    # For each column
    v_x = 0
    while v_x < 64 then
        # Calculate wave height for this column
        v_i = 0
        while v_i < v_num_waves then
            # Calculate base wave position
            v_wave_y = v_amplitude[v_i] * sin((v_x * v_frequency[v_i]) + v_phase[v_i] + v_t)
            
            # Draw vertical line at wave position
            v_y = 32 + v_wave_y  # Center wave vertically
            
            # Calculate brightness based on position and time
            v_bright = 50 + (sin(v_t + v_x * 0.1) * 49)
            v_trail_bright = v_bright - 10
            if v_trail_bright < 1 then
                v_trail_bright = 1
            endif

            # Draw wave point with appropriate color based on color cycle
            if v_color_cycle == 0 then
                # Cyan and Magenta
                if v_i == 0 then
                    mplot(v_x, v_y, cyan, v_bright, v_burnout)
                    if v_y > 0 then
                        if v_y < 63 then
                            mplot(v_x, v_y - 1, cyan, v_trail_bright, v_burnout)
                            mplot(v_x, v_y + 1, cyan, v_trail_bright, v_burnout)
                        endif
                    endif
                else
                    mplot(v_x, v_y, magenta, v_bright, v_burnout)
                    if v_y > 0 and v_y < 63 then
                        mplot(v_x, v_y - 1, magenta, v_trail_bright, v_burnout)
                        mplot(v_x, v_y + 1, magenta, v_trail_bright, v_burnout)
                    endif
                endif
            elseif v_color_cycle == 1 then
                # Yellow and Blue
                if v_i == 0 then
                    mplot(v_x, v_y, yellow, v_bright, v_burnout)
                    if v_y > 0 and v_y < 63 then
                        mplot(v_x, v_y - 1, yellow, v_trail_bright, v_burnout)
                        mplot(v_x, v_y + 1, yellow, v_trail_bright, v_burnout)
                    endif
                else
                    mplot(v_x, v_y, blue, v_bright, v_burnout)
                    if v_y > 0 and v_y < 63 then
                        mplot(v_x, v_y - 1, blue, v_trail_bright, v_burnout)
                        mplot(v_x, v_y + 1, blue, v_trail_bright, v_burnout)
                    endif
                endif
            elseif v_color_cycle == 2 then
                # Green and Red
                if v_i == 0 then
                    mplot(v_x, v_y, green, v_bright, v_burnout)
                    if v_y > 0 and v_y < 63 then
                        mplot(v_x, v_y - 1, green, v_trail_bright, v_burnout)
                        mplot(v_x, v_y + 1, green, v_trail_bright, v_burnout)
                    endif
                else
                    mplot(v_x, v_y, red, v_bright, v_burnout)
                    if v_y > 0 and v_y < 63 then
                        mplot(v_x, v_y - 1, red, v_trail_bright, v_burnout)
                        mplot(v_x, v_y + 1, red, v_trail_bright, v_burnout)
                    endif
                endif
            elseif v_color_cycle == 3 then
                # Purple and Orange
                if v_i == 0 then
                    mplot(v_x, v_y, violet, v_bright, v_burnout)
                    if v_y > 0 and v_y < 63 then
                        mplot(v_x, v_y - 1, violet, v_trail_bright, v_burnout)
                        mplot(v_x, v_y + 1, violet, v_trail_bright, v_burnout)
                    endif
                else
                    mplot(v_x, v_y, orange, v_bright, v_burnout)
                    if v_y > 0 and v_y < 63 then
                        mplot(v_x, v_y - 1, orange, v_trail_bright, v_burnout)
                        mplot(v_x, v_y + 1, orange, v_trail_bright, v_burnout)
                    endif
                endif
            else
                # Blue and Yellow
                if v_i == 0 then
                    mplot(v_x, v_y, blue, v_bright, v_burnout)
                    if v_y > 0 and v_y < 63 then
                        mplot(v_x, v_y - 1, blue, v_trail_bright, v_burnout)
                        mplot(v_x, v_y + 1, blue, v_trail_bright, v_burnout)
                    endif
                else
                    mplot(v_x, v_y, yellow, v_bright, v_burnout)
                    if v_y > 0 and v_y < 63 then
                        mplot(v_x, v_y - 1, yellow, v_trail_bright, v_burnout)
                        mplot(v_x, v_y + 1, yellow, v_trail_bright, v_burnout)
                    endif
                endif
            endif
            mflush()
            v_i = v_i + 1
        endwhile
        v_x = v_x + 1
    endwhile
    
    # Update time variables for animation
    v_t = v_t + v_wave_speed
    v_color_t = v_color_t + v_color_speed

endwhile