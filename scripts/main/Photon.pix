# Configuration
v_num_photons = 4           # Single photon
v_base_speed = 2           # Base speed for photons
v_speed_variance = 1.5     # How much speed can vary
v_trail_length = 20        # Length of trail in segments

# Helper value to avoid division by zero
v_min_length = 0.0001      # Small non-zero value

# Create arrays for photon properties
create_array(v_photon_x, v_num_photons)
create_array(v_photon_y, v_num_photons)
create_array(v_photon_dx, v_num_photons)
create_array(v_photon_dy, v_num_photons)
create_array(v_photon_speed, v_num_photons)
create_array(v_photon_active, v_num_photons)
create_array(v_photon_color, v_num_photons)
create_array(v_collision_x, v_num_photons)
create_array(v_collision_y, v_num_photons)
create_array(v_trail_timer, v_num_photons)

# Initialize photons
for v_i in (0, v_num_photons - 1, 1) then
    # Random corner selection (0-3)
    v_corner = random(0, 3, 0)
    # Random target (0: opposite side, 1: bottom/top)
    v_target = random(0, 1, 0)
    # Random position on target wall (1-62 to avoid corners)
    v_target_pos = random(1, 62, 0)
    
    if v_corner == 0 then
        v_photon_x[v_i] = 0          # Upper left
        v_photon_y[v_i] = 0
        if v_target == 0 then        # Go to right side
            v_photon_dx[v_i] = 63    # Target x is right wall
            v_photon_dy[v_i] = v_target_pos  # Random y on right wall
        else                         # Go to bottom
            v_photon_dx[v_i] = v_target_pos  # Random x on bottom wall
            v_photon_dy[v_i] = 63    # Target y is bottom wall
        endif
        # Calculate direction vector
        v_dx = v_photon_dx[v_i]
        v_dy = v_photon_dy[v_i]
        # Normalize the vector with safety check
        v_length = sqrt(v_dx * v_dx + v_dy * v_dy)
        if v_length < v_min_length then
            v_length = v_min_length
        endif
        v_photon_dx[v_i] = v_dx / v_length
        v_photon_dy[v_i] = v_dy / v_length
    endif
    if v_corner == 1 then
        v_photon_x[v_i] = 63         # Upper right
        v_photon_y[v_i] = 0
        if v_target == 0 then        # Go to left side
            v_photon_dx[v_i] = 0     # Target x is left wall
            v_photon_dy[v_i] = v_target_pos  # Random y on left wall
        else                         # Go to bottom
            v_photon_dx[v_i] = v_target_pos  # Random x on bottom wall
            v_photon_dy[v_i] = 63    # Target y is bottom wall
        endif
        # Calculate direction vector
        v_dx = v_photon_dx[v_i] - 63  # Relative to start position
        v_dy = v_photon_dy[v_i]
        # Normalize the vector with safety check
        v_length = sqrt(v_dx * v_dx + v_dy * v_dy)
        if v_length < v_min_length then
            v_length = v_min_length
        endif
        v_photon_dx[v_i] = v_dx / v_length
        v_photon_dy[v_i] = v_dy / v_length
    endif
    if v_corner == 2 then
        v_photon_x[v_i] = 0          # Lower left
        v_photon_y[v_i] = 63
        if v_target == 0 then        # Go to right side
            v_photon_dx[v_i] = 63    # Target x is right wall
            v_photon_dy[v_i] = v_target_pos  # Random y on right wall
        else                         # Go to top
            v_photon_dx[v_i] = v_target_pos  # Random x on top wall
            v_photon_dy[v_i] = 0     # Target y is top wall
        endif
        # Calculate direction vector
        v_dx = v_photon_dx[v_i]
        v_dy = v_photon_dy[v_i] - 63  # Relative to start position
        # Normalize the vector with safety check
        v_length = sqrt(v_dx * v_dx + v_dy * v_dy)
        if v_length < v_min_length then
            v_length = v_min_length
        endif
        v_photon_dx[v_i] = v_dx / v_length
        v_photon_dy[v_i] = v_dy / v_length
    endif
    if v_corner == 3 then
        v_photon_x[v_i] = 63         # Lower right
        v_photon_y[v_i] = 63
        if v_target == 0 then        # Go to left side
            v_photon_dx[v_i] = 0     # Target x is left wall
            v_photon_dy[v_i] = v_target_pos  # Random y on left wall
        else                         # Go to top
            v_photon_dx[v_i] = v_target_pos  # Random x on top wall
            v_photon_dy[v_i] = 0     # Target y is top wall
        endif
        # Calculate direction vector
        v_dx = v_photon_dx[v_i] - 63  # Relative to start position
        v_dy = v_photon_dy[v_i] - 63  # Relative to start position
        # Normalize the vector with safety check
        v_length = sqrt(v_dx * v_dx + v_dy * v_dy)
        if v_length < v_min_length then
            v_length = v_min_length
        endif
        v_photon_dx[v_i] = v_dx / v_length
        v_photon_dy[v_i] = v_dy / v_length
    endif
    
    v_photon_speed[v_i] = v_base_speed + random(0, v_speed_variance * 10, 0) / 10
    v_photon_active[v_i] = 1
    v_photon_color[v_i] = random(1, 99, 0)
    v_trail_timer[v_i] = v_trail_length
endfor v_i

while true then
    begin_frame
    
    # Update and draw each photon
    for v_i in (0, v_num_photons - 1, 1) then
        if v_photon_active[v_i] == 1 then
            # Store current position for trail
            v_last_x = v_photon_x[v_i]
            v_last_y = v_photon_y[v_i]
            
            # Update position
            v_new_x = v_photon_x[v_i] + v_photon_dx[v_i] * v_photon_speed[v_i]
            v_new_y = v_photon_y[v_i] + v_photon_dy[v_i] * v_photon_speed[v_i]
            
            # Check for collision with edges and clamp position to walls
            if v_new_x < 0 then
                v_photon_x[v_i] = 0
                v_photon_y[v_i] = v_new_y
                v_photon_active[v_i] = 2
                v_collision_x[v_i] = 0
                v_collision_y[v_i] = v_new_y
            endif
            if v_new_x > 63 then
                v_photon_x[v_i] = 63
                v_photon_y[v_i] = v_new_y
                v_photon_active[v_i] = 2
                v_collision_x[v_i] = 63
                v_collision_y[v_i] = v_new_y
            endif
            if v_new_y < 0 then
                v_photon_x[v_i] = v_new_x
                v_photon_y[v_i] = 0
                v_photon_active[v_i] = 2
                v_collision_x[v_i] = v_new_x
                v_collision_y[v_i] = 0
            endif
            if v_new_y > 63 then
                v_photon_x[v_i] = v_new_x
                v_photon_y[v_i] = 63
                v_photon_active[v_i] = 2
                v_collision_x[v_i] = v_new_x
                v_collision_y[v_i] = 63
            endif
            
            # If no collision, update position
            if v_photon_active[v_i] == 1 then
                v_photon_x[v_i] = v_new_x
                v_photon_y[v_i] = v_new_y
            endif
            
            # Draw trail and photon with plot
            mplot(v_photon_x[v_i], v_photon_y[v_i], v_photon_color[v_i], 99, 100)
        endif
        
        # Handle collision state using compound condition
        if v_photon_active[v_i] == 2 then
            # Flash white at collision
            mplot(v_collision_x[v_i], v_collision_y[v_i], 99, 99, 100)
            
            v_trail_timer[v_i] = v_trail_timer[v_i] - 1
            if v_trail_timer[v_i] <= 0 then
                # Reset with new random values
                v_corner = random(0, 3, 0)
                v_target = random(0, 1, 0)
                v_target_pos = random(1, 62, 0)
                
                if v_corner == 0 then
                    v_photon_x[v_i] = 0
                    v_photon_y[v_i] = 0
                    if v_target == 0 then
                        v_photon_dx[v_i] = 63
                        v_photon_dy[v_i] = v_target_pos
                    else
                        v_photon_dx[v_i] = v_target_pos
                        v_photon_dy[v_i] = 63
                    endif
                    v_dx = v_photon_dx[v_i]
                    v_dy = v_photon_dy[v_i]
                    v_length = sqrt(v_dx * v_dx + v_dy * v_dy)
                    if v_length < v_min_length then
                        v_length = v_min_length
                    endif
                    v_photon_dx[v_i] = v_dx / v_length
                    v_photon_dy[v_i] = v_dy / v_length
                endif
                if v_corner == 1 then
                    v_photon_x[v_i] = 63
                    v_photon_y[v_i] = 0
                    if v_target == 0 then
                        v_photon_dx[v_i] = 0
                        v_photon_dy[v_i] = v_target_pos
                    else
                        v_photon_dx[v_i] = v_target_pos
                        v_photon_dy[v_i] = 63
                    endif
                    v_dx = v_photon_dx[v_i] - 63
                    v_dy = v_photon_dy[v_i]
                    v_length = sqrt(v_dx * v_dx + v_dy * v_dy)
                    if v_length < v_min_length then
                        v_length = v_min_length
                    endif
                    v_photon_dx[v_i] = v_dx / v_length
                    v_photon_dy[v_i] = v_dy / v_length
                endif
                if v_corner == 2 then
                    v_photon_x[v_i] = 0
                    v_photon_y[v_i] = 63
                    if v_target == 0 then
                        v_photon_dx[v_i] = 63
                        v_photon_dy[v_i] = v_target_pos
                    else
                        v_photon_dx[v_i] = v_target_pos
                        v_photon_dy[v_i] = 0
                    endif
                    v_dx = v_photon_dx[v_i]
                    v_dy = v_photon_dy[v_i] - 63
                    v_length = sqrt(v_dx * v_dx + v_dy * v_dy)
                    if v_length < v_min_length then
                        v_length = v_min_length
                    endif
                    v_photon_dx[v_i] = v_dx / v_length
                    v_photon_dy[v_i] = v_dy / v_length
                endif
                if v_corner == 3 then
                    v_photon_x[v_i] = 63
                    v_photon_y[v_i] = 63
                    if v_target == 0 then
                        v_photon_dx[v_i] = 0
                        v_photon_dy[v_i] = v_target_pos
                    else
                        v_photon_dx[v_i] = v_target_pos
                        v_photon_dy[v_i] = 0
                    endif
                    v_dx = v_photon_dx[v_i] - 63
                    v_dy = v_photon_dy[v_i] - 63
                    v_length = sqrt(v_dx * v_dx + v_dy * v_dy)
                    if v_length < v_min_length then
                        v_length = v_min_length
                    endif
                    v_photon_dx[v_i] = v_dx / v_length
                    v_photon_dy[v_i] = v_dy / v_length
                endif
                
                v_photon_speed[v_i] = v_base_speed + random(0, v_speed_variance * 10, 0) / 10
                v_photon_active[v_i] = 1
                v_photon_color[v_i] = random(1, 99, 0)
                v_trail_timer[v_i] = v_trail_length
            endif
        endif
    endfor v_i
    mflush()
    end_frame
    v_rest = random(0.001, .020, 2)
    rest(v_rest)
endwhile