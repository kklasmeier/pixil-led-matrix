# Lightning Storm Effect
# Core variables for timing and randomization
v_time = 0
v_flash_active = 0
v_flash_intensity = 0
v_thunder_active = 0
v_thunder_time = 0

# Lightning bolt parameters
create_array(v_bolt_x, 20)  # Store x coordinates of lightning segments
create_array(v_bolt_y, 20)  # Store y coordinates of lightning segments
v_bolt_active = 0
v_bolt_segments = 0
v_bolt_duration = 0

# Background flicker variables
v_bg_intensity = 10
v_last_strike = 0

# Generate a new lightning bolt path
def generate_bolt {
    v_start_x = random(10, 54, 0)  # Random start point
    v_bolt_x[0] = v_start_x
    v_bolt_y[0] = 0
    
    # Generate lightning segments with random deviations
    v_bolt_segments = 8 + random(0, 7, 0)  # 8-15 segments
    v_current_x = v_start_x
    
    for v_i in (1, v_bolt_segments, 1) then
        # Calculate next segment point
        v_deviation = random(-8, 8, 0)
        v_current_x = v_current_x + v_deviation
        
        # Keep within screen bounds
        if v_current_x < 5 then
            v_current_x = 5
        endif
        if v_current_x > 59 then
            v_current_x = 59
        endif
        
        # Store point
        v_bolt_x[v_i] = v_current_x
        v_bolt_y[v_i] = (v_i * 64) / v_bolt_segments  # Evenly space vertically
    endfor v_i
}

# Main animation loop
while true then
    clear()
    begin_frame()
    v_time = v_time + 1
    
    # Random chance to trigger new lightning
    if v_bolt_active == 0 then
        if random(0, 100, 0) < 2 then  # 2% chance each frame
            call generate_bolt
            v_bolt_active = 1
            v_bolt_duration = 3 + random(0, 3, 0)  # Duration 3-6 frames
            v_flash_active = 1
            v_flash_intensity = 60 + random(0, 39, 0)  # Flash intensity 60-99
            v_thunder_active = 1
            v_thunder_time = 0
            v_last_strike = v_time
        endif
    endif
    
    # Draw active lightning bolt
    if v_bolt_active == 1 then
        # Draw main bolt
        for v_i in (0, v_bolt_segments - 1, 1) then
            v_x1 = v_bolt_x[v_i]
            v_y1 = v_bolt_y[v_i]
            v_x2 = v_bolt_x[v_i + 1]
            v_y2 = v_bolt_y[v_i + 1]
            
            # Draw multiple lines for thickness effect
            draw_line(v_x1, v_y1, v_x2, v_y2, white, 99)
            draw_line(v_x1 - 1, v_y1, v_x2 - 1, v_y2, white, 80)
            draw_line(v_x1 + 1, v_y1, v_x2 + 1, v_y2, white, 80)
            
            # Random branches (20% chance per segment)
            if random(0, 100, 0) < 20 then
                v_branch_x = v_x1 + random(-10, 10, 0)
                v_branch_y = v_y1 + random(5, 15, 0)
                draw_line(v_x1, v_y1, v_branch_x, v_branch_y, white, 70)
            endif
        endfor v_i
        
        v_bolt_duration = v_bolt_duration - 1
        if v_bolt_duration <= 0 then
            v_bolt_active = 0
        endif
    endif
   
    end_frame()
    rest(0.05)
endwhile