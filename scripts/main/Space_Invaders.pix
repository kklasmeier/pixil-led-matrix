# Define invader type 1 sprite
define_sprite(invader1, 8, 6)
    draw_rectangle(2, 0, 4, 1, red, 100, true)
    draw_rectangle(1, 1, 6, 1, red, 100, true)
    draw_rectangle(0, 2, 8, 1, red, 100, true)
    draw_rectangle(0, 3, 2, 1, red, 100, true)
    draw_rectangle(3, 3, 2, 1, red, 100, true)
    draw_rectangle(6, 3, 2, 1, red, 100, true)
    draw_rectangle(1, 4, 1, 1, red, 100, true)
    draw_rectangle(6, 4, 1, 1, red, 100, true)
endsprite

# Define invader type 1 alternate sprite (for animation)
define_sprite(invader1_alt, 8, 6)
    draw_rectangle(2, 0, 4, 1, red, 100, true)
    draw_rectangle(1, 1, 6, 1, red, 100, true)
    draw_rectangle(0, 2, 8, 1, red, 100, true)
    draw_rectangle(0, 3, 2, 1, red, 100, true)
    draw_rectangle(3, 3, 2, 1, red, 100, true)
    draw_rectangle(6, 3, 2, 1, red, 100, true)
    draw_rectangle(0, 4, 1, 1, red, 100, true)
    draw_rectangle(7, 4, 1, 1, red, 100, true)
endsprite

# Define invader type 2 sprite
define_sprite(invader2, 8, 6)
    draw_rectangle(3, 0, 2, 1, magenta, 100, true)
    draw_rectangle(2, 1, 4, 1, magenta, 100, true)
    draw_rectangle(1, 2, 6, 1, magenta, 100, true)
    draw_rectangle(0, 3, 8, 1, magenta, 100, true)
    draw_rectangle(2, 4, 1, 1, magenta, 100, true)
    draw_rectangle(5, 4, 1, 1, magenta, 100, true)
    draw_rectangle(1, 5, 1, 1, magenta, 100, true)
    draw_rectangle(6, 5, 1, 1, magenta, 100, true)
endsprite

# Define invader type 2 alternate sprite (for animation)
define_sprite(invader2_alt, 8, 6)
    draw_rectangle(3, 0, 2, 1, magenta, 100, true)
    draw_rectangle(2, 1, 4, 1, magenta, 100, true)
    draw_rectangle(1, 2, 6, 1, magenta, 100, true)
    draw_rectangle(0, 3, 8, 1, magenta, 100, true)
    draw_rectangle(1, 4, 1, 1, magenta, 100, true)
    draw_rectangle(6, 4, 1, 1, magenta, 100, true)
    draw_rectangle(2, 5, 1, 1, magenta, 100, true)
    draw_rectangle(5, 5, 1, 1, magenta, 100, true)
endsprite

# Define invader type 3 sprite
define_sprite(invader3, 8, 5)
    draw_rectangle(3, 0, 2, 1, cyan, 100, true)
    draw_rectangle(2, 1, 4, 1, cyan, 100, true)
    draw_rectangle(1, 2, 6, 1, cyan, 100, true)
    draw_rectangle(0, 3, 2, 1, cyan, 100, true)
    draw_rectangle(3, 3, 2, 1, cyan, 100, true)
    draw_rectangle(6, 3, 2, 1, cyan, 100, true)
    draw_rectangle(1, 4, 2, 1, cyan, 100, true)
    draw_rectangle(5, 4, 2, 1, cyan, 100, true)
endsprite

# Define invader type 3 alternate sprite (for animation)
define_sprite(invader3_alt, 8, 5)
    draw_rectangle(3, 0, 2, 1, cyan, 100, true)
    draw_rectangle(2, 1, 4, 1, cyan, 100, true)
    draw_rectangle(1, 2, 6, 1, cyan, 100, true)
    draw_rectangle(1, 3, 2, 1, cyan, 100, true)
    draw_rectangle(3, 3, 2, 1, cyan, 100, true)
    draw_rectangle(5, 3, 2, 1, cyan, 100, true)
    draw_rectangle(0, 4, 2, 1, cyan, 100, true)
    draw_rectangle(6, 4, 2, 1, cyan, 100, true)
endsprite

# Define player ship sprite
define_sprite(player, 8, 4)
    draw_line(3, 0, 3, 2, green, 100)
    draw_line(4, 0, 4, 2, green, 100)
    draw_rectangle(0, 3, 8, 1, green, 100, true)
    draw_rectangle(1, 2, 6, 1, green, 100, true)
endsprite

# Define bullet sprite
define_sprite(bullet, 1, 3)
    draw_rectangle(0, 0, 1, 3, white, 100, true)
endsprite

# Define invader bullet sprite
define_sprite(invader_bullet, 1, 3)
    draw_rectangle(0, 0, 1, 3, yellow, 100, true)
endsprite

# Arrays to track invaders
# We'll have 5 rows of 6 invaders (30 total)
create_array(v_invader_x, 30)          # X position of each invader
create_array(v_invader_y, 30)          # Y position of each invader
create_array(v_invader_type, 30)       # Type of each invader (1-3)
create_array(v_invader_alive, 30)      # Status of each invader (1=alive, 0=dead)
create_array(v_invader_frame, 30)      # Current animation frame (0 or 1)

# Game variables
v_invader_count = 30                   # Total invaders
v_invaders_alive = 30                  # Current alive invaders
v_invader_dir = 1                      # Movement direction (1=right, -1=left)
v_invader_speed = 0.5                  # Base movement speed
v_anim_toggle = 0                      # Global animation toggle

# Main game variables
v_game_running = 1                 # Game state flag
v_game_speed = 0.5                 # Base game speed
v_move_timer = 0                   # Timer for invader movement
v_move_delay = 1                  # Delay between invader movements (in frames)
v_anim_timer = 0                   # Timer for animation

# Player variables
v_player_x = 28               # Player ship X position (centered)
v_player_y = 56               # Player ship Y position (bottom of screen)
v_player_dir = 0              # Player direction (will be randomly set: -1=left, 1=right)
v_player_move_count = 0       # Counter for consistent movement
v_player_min_move = 1        # Minimum pixels to move in one direction

# Bullet variables
v_bullet_active = 0          # Flag for bullet status (0=inactive, 1=active)
v_bullet_x = 0               # Bullet X position
v_bullet_y = 0               # Bullet Y position
v_bullet_timer = 0           # Timer for bullet movement
v_bullet_speed = 0           # Speed factor for bullet movement
v_shoot_cooldown = 0         # Cooldown timer between shots
v_shoot_chance = 80           # % chance to shoot per update if cooldown is 0

# Invader bullet variables
v_max_invader_bullets = 3               # Maximum invader bullets at once
create_array(v_invader_bullet_active, v_max_invader_bullets)    # Status (0=inactive, 1=active)
create_array(v_invader_bullet_x, v_max_invader_bullets)         # X positions
create_array(v_invader_bullet_y, v_max_invader_bullets)         # Y positions
v_invader_shoot_timer = 0               # Timer for invader shooting
v_invader_shoot_delay = 60              # Delay between shooting attempts
v_invader_bullet_speed = 3              # Speed factor for invader bullets

# Procedure to initialize invader bullets
def init_invader_bullets {
    for v_i in (0, v_max_invader_bullets - 1, 1) then
        v_invader_bullet_active[v_i] = 0
    endfor v_i
    v_invader_shoot_timer = 0
}

# Procedure to draw base line (floor/ground)
def draw_base_line {
    draw_line(0, 62, 63, 62, green, 100)
}

# Procedure to initialize game
def init_game {
    # Clear the display
    clear()
    
    # Initialize invaders
    call init_invaders
    
    # Initialize player
    call init_player
    
    # Initialize bullets
    call init_invader_bullets
    
    # Draw the invaders initially
    call draw_invaders
    
    # Draw the base line
    call draw_base_line
    
    # Initialize game variables
    v_game_running = 1
    v_move_timer = 0
    v_anim_timer = 0
    v_player_timer = 0
    v_bullet_timer = 0
    
    # Set initial game speed
    #throttle(v_game_speed)
}

# Procedure to initialize the player
def init_player {
    # Position the player at the bottom center
    v_player_x = 28
    v_player_y = 57
    
    # Randomly set initial direction
    v_random = random(0, 1, 0)
    if v_random == 0 then
        v_player_dir = -1     # Start moving left
    else
        v_player_dir = 1      # Start moving right
    endif
    
    v_player_move_count = 0
    
    # Draw the player
    show_sprite(player, v_player_x, v_player_y, 99)  # Use ID 99 for player
}

# Procedure to move the player
def move_player {
    # Increment move counter
    sync_queue
    v_player_move_count = v_player_move_count + 1
    
    # Check if we need to possibly change direction
    if v_player_move_count >= v_player_min_move then
        # Random chance to change direction after minimum move distance
        v_change_dir = random(0, 3, 0)  # 25% chance to change direction
        
        if v_change_dir == 0 then
            v_player_dir = -v_player_dir  # Reverse direction
            v_player_move_count = 0       # Reset counter
        endif
    endif

    v_random = random(4, 10, 0)
    for v_xx in (1, v_random, 1) then
        # Update player bullet
        call update_bullet
        # Update invader bullets
        call update_invader_bullets
        # Check screen boundaries
        if v_player_x <= 0 then
            v_player_dir = 1                  # Hit left edge, move right
            v_player_move_count = 0
        elseif v_player_x >= 56 then
            v_player_dir = -1                 # Hit right edge, move left
            v_player_move_count = 0
        endif
        
        # Move the player
        v_player_x = v_player_x + v_player_dir
        
        # Update sprite position
        move_sprite(player, v_player_x, v_player_y, 99)

    endloop v_xx

}

# Procedure to initialize invaders
def init_invaders {
    v_row_spacing = 8                  # Vertical space between rows
    v_col_spacing = 10                 # Horizontal space between columns
    v_start_x = 2                      # Starting X position
    v_start_y = 2                     # Starting Y position
    v_idx = 0                          # Array index
    
    # Set up 5 rows of 6 invaders
    for v_row in (0, 4, 1) then
        v_y = v_start_y + v_row * v_row_spacing
        
        # Set invader type based on row (top rows get higher-point invaders)
        if v_row < 2 then
            v_type = 3                 # Top two rows: type 3 (cyan)
        elseif v_row < 4 then
            v_type = 2                 # Middle two rows: type 2 (magenta)
        else
            v_type = 1                 # Bottom row: type 1 (red)
        endif
        
        for v_col in (0, 5, 1) then
            v_x = v_start_x + v_col * v_col_spacing
            
            # Store invader data
            v_invader_x[v_idx] = v_x
            v_invader_y[v_idx] = v_y
            v_invader_type[v_idx] = v_type
            v_invader_alive[v_idx] = 1            # All invaders start alive
            v_invader_frame[v_idx] = 0            # Start with frame 0
            
            v_idx = v_idx + 1
        endfor v_col
    endfor v_row
}

# Procedure to draw all invaders
def draw_invaders {
    for v_i in (0, v_invader_count - 1, 1) then
        # Only draw if invader is alive
        if v_invader_alive[v_i] == 1 then
            v_type = v_invader_type[v_i]
            v_frame = v_invader_frame[v_i]
            v_x = v_invader_x[v_i]
            v_y = v_invader_y[v_i]
            
            # Draw the appropriate sprite based on type and current frame
            if v_type == 1 then
                if v_frame == 0 then
                    hide_sprite(invader1_alt, v_i)
                    show_sprite(invader1, v_x, v_y, v_i)
                else
                    hide_sprite(invader1, v_i)
                    show_sprite(invader1_alt, v_x, v_y, v_i)
                endif
            elseif v_type == 2 then
                if v_frame == 0 then
                    hide_sprite(invader2_alt, v_i)
                    show_sprite(invader2, v_x, v_y, v_i)
                else
                    hide_sprite(invader2, v_i)
                    show_sprite(invader2_alt, v_x, v_y, v_i)
                endif
            else
                if v_frame == 0 then
                    hide_sprite(invader3_alt, v_i)
                    show_sprite(invader3, v_x, v_y, v_i)
                else
                    hide_sprite(invader3, v_i)
                    show_sprite(invader3_alt, v_x, v_y, v_i)
                endif
            endif
        endif
    endfor v_i
}

# Procedure to hide all invaders
def hide_all_invaders {
    begin_frame(true)
    for v_i in (0, v_invader_count - 1, 1) then
        # Hide all possible sprite variations for this invader
        # Type 1 (red) invaders
        hide_sprite(invader1, v_i)
        hide_sprite(invader1_alt, v_i)
        
        # Type 2 (magenta) invaders
        hide_sprite(invader2, v_i)
        hide_sprite(invader2_alt, v_i)
        
        # Type 3 (cyan) invaders
        hide_sprite(invader3, v_i)
        hide_sprite(invader3_alt, v_i)
    endfor v_i
    end_frame
}

# Procedure to update invader animation frames
def animate_invaders {
    # Toggle global animation state (0/1)
    v_anim_toggle = 1 - v_anim_toggle
    
    for v_i in (0, v_invader_count - 1, 1) then
        if v_invader_alive[v_i] == 1 then
            # Update animation frame (alternate between 0 and 1)
            v_invader_frame[v_i] = v_anim_toggle
        endif
    endfor v_i
}

# Procedure to move invaders
def move_invaders {
    v_move_down = 0                    # Flag to move down
    v_leftmost = 64                    # Track leftmost invader
    v_rightmost = 0                    # Track rightmost invader
    
    # Find the boundaries of the invader formation
    for v_i in (0, v_invader_count - 1, 1) then
        if v_invader_alive[v_i] == 1 then
            if v_invader_x[v_i] < v_leftmost then
                v_leftmost = v_invader_x[v_i]
            endif
            
            if v_invader_x[v_i] > v_rightmost then
                v_rightmost = v_invader_x[v_i]
            endif
        endif
    endfor v_i
    
    # Check if we need to change direction and move down
    if v_invader_dir > 0 and v_rightmost >= 56 then
        v_invader_dir = -1             # Change to moving left
        v_move_down = 1                # Move down a row
    elseif v_invader_dir < 0 and v_leftmost <= 0 then
        v_invader_dir = 1              # Change to moving right
        v_move_down = 1                # Move down a row
    endif
    
    # Update all invader positions
    for v_i in (0, v_invader_count - 1, 1) then
        if v_invader_alive[v_i] == 1 then
            # Move horizontally based on direction
            v_invader_x[v_i] = v_invader_x[v_i] + v_invader_dir
            
            # Move down if needed
            if v_move_down == 1 then
                v_invader_y[v_i] = v_invader_y[v_i] + 2
            endif
            
            # Update sprite position
            v_idx = v_i                # Instance ID
            v_x = v_invader_x[v_i]
            v_y = v_invader_y[v_i]
            v_type = v_invader_type[v_i]
            v_frame = v_invader_frame[v_i]
            
            # Move the appropriate sprite
            if v_type == 1 then
                if v_frame == 0 then
                    move_sprite(invader1, v_x, v_y, v_idx)
                else
                    move_sprite(invader1_alt, v_x, v_y, v_idx)
                endif
            elseif v_type == 2 then
                if v_frame == 0 then
                    move_sprite(invader2, v_x, v_y, v_idx)
                else
                    move_sprite(invader2_alt, v_x, v_y, v_idx)
                endif
            else
                if v_frame == 0 then
                    move_sprite(invader3, v_x, v_y, v_idx)
                else
                    move_sprite(invader3_alt, v_x, v_y, v_idx)
                endif
            endif
        endif
    endfor v_i
    
    # Increase speed as invaders are destroyed
    v_speed_factor = 1 + (v_invader_count - v_invaders_alive) / 10
    #throttle(1 / v_speed_factor)       # Adjust game speed
}

# Procedure to fire a bullet
def fire_bullet {
    # Only fire if no bullet is active
    if v_bullet_active == 0 and v_shoot_cooldown <= 0 then
        # Fire from player position
        v_bullet_active = 1
        v_bullet_x = v_player_x + 4  # Center of player ship
        v_bullet_y = v_player_y - 3  # Just above player
        
        # Show bullet sprite
        show_sprite(bullet, v_bullet_x, v_bullet_y, 100)
        
        # Set cooldown for next shot
        v_shoot_cooldown = 20
    endif
}

# Procedure to update bullet position
def update_bullet {
    if v_bullet_active == 1 then
        # Move bullet upward
        v_bullet_y = v_bullet_y - 2

        # Update sprite position
        move_sprite(bullet, v_bullet_x, v_bullet_y, 100)
        
        # Check if bullet is off screen
        if v_bullet_y <= 0 then
            # Deactivate bullet
            v_bullet_active = 0
            hide_sprite(bullet, 100)
        else
            # Check for collision with invaders
            call check_bullet_collision
        endif
    endif
}

# Procedure to check for collision between bullet and invaders
def check_bullet_collision {
    for v_i in (0, v_invader_count - 1, 1) then
        if v_invader_alive[v_i] == 1 then
            # Simple collision detection (check if bullet is within invader bounds)
            # Using a smaller hit box for better gameplay feel
            if v_bullet_x >= v_invader_x[v_i] and v_bullet_x <= (v_invader_x[v_i] + 8) and v_bullet_y >= v_invader_y[v_i] and v_bullet_y <= (v_invader_y[v_i] + 6) then
                
                # Hit detected - remove invader
                v_invader_alive[v_i] = 0
                v_invaders_alive = v_invaders_alive - 1
                
                # Hide invader sprites based on type
                v_type = v_invader_type[v_i]
                if v_type == 1 then
                    hide_sprite(invader1, v_i)
                    hide_sprite(invader1_alt, v_i)
                elseif v_type == 2 then
                    hide_sprite(invader2, v_i)
                    hide_sprite(invader2_alt, v_i)
                else
                    hide_sprite(invader3, v_i)
                    hide_sprite(invader3_alt, v_i)
                endif
                
                # Remove bullet
                v_bullet_active = 0
                hide_sprite(bullet, 100)
                
                # Exit the loop once collision is detected
                v_i = v_invader_count  # Force exit from loop
            endif
        endif
    endfor v_i
}

# Procedure to check if an invader is hit
def check_invader_hit {
    # Parameters will be bullet x,y position
    # This is a placeholder for now - will implement when we add player bullets
}

# Check game over conditions
def check_game_over {
    # Check if any invaders have reached the bottom
    for v_i in (0, v_invader_count - 1, 1) then
        if v_invader_alive[v_i] == 1 then
            if v_invader_y[v_i] >= 55 then  # Close to base line
                v_game_running = 0
                call game_over
            endif
        endif
    endfor v_i
    
    # Check if all invaders are destroyed
    if v_invaders_alive <= 0 then
        v_game_running = 0
        call victory
    endif
}

# Game over procedure
def game_over {
    # Clear the display
    call reset_game
    call draw_base_line

    begin_frame
        # Display game over message
        draw_text(-2, 25, "GAME OVER", piboto-regular, 12, red, 100, TYPE, SLOW)
    end_frame
    
    # Wait for a moment
    rest(3)
}

# Victory procedure
def victory {
    # Clear the display
    call hide_all_invaders
    call reset_game

    begin_frame
        # Display victory message
        draw_text(15, 20, "EARTH", piboto-regular, 12, green, 100, TYPE, SLOW)
        draw_text(13, 30, "SAVED!", piboto-regular, 12, green, 100, TYPE, SLOW)
    end_frame
    
    # Wait for a moment
    rest(3)
}

# Procedure to reset the game
def reset_game {
    # Clear the display
    clear()
    
    # Hide all active sprites
    call hide_all_invaders
    hide_sprite(player, 99)
    hide_sprite(bullet, 100)
    
    # Hide all invader bullets
    for v_i in (0, v_max_invader_bullets - 1, 1) then
        hide_sprite(invader_bullet, 200 + v_i)
    endfor v_i
    
    # Reset player variables
    v_player_x = 28
    v_player_y = 56
    v_player_dir = 0
    v_player_move_count = 0
    v_bullet_active = 0
    
    # Reset invader variables
    v_invader_dir = 1
    v_invader_speed = 0.5
    v_anim_toggle = 0
    
    # Reset invader arrays (positions and states)
    for v_i in (0, v_invader_count - 1, 1) then
        v_invader_alive[v_i] = 0  # Mark all as inactive first
    endfor v_i
    
    # Reset all invader bullets
    for v_i in (0, v_max_invader_bullets - 1, 1) then
        v_invader_bullet_active[v_i] = 0
    endfor v_i
    
    # Reset game state variables
    v_invaders_alive = 30
    v_game_running = 0  # Will be set to 1 by init_game
    
    # Reset all timers
    v_move_timer = 0
    v_anim_timer = 0
    v_player_timer = 0
    v_bullet_timer = 0
    v_invader_shoot_timer = 0
    v_shoot_cooldown = 0
    
}

# Procedure to find a shooter from invaders
def find_invader_shooter {
    # Create temporary arrays to identify frontline invaders
    create_array(v_frontline, 6)         # Track frontline invader for each column
    create_array(v_frontline_idx, 6)     # Track index of frontline invader
    
    # Initialize frontline trackers
    for v_col in (0, 5, 1) then
        v_frontline[v_col] = -1          # No frontline invader found yet
        v_frontline_idx[v_col] = -1
    endfor v_col
    
    # Find frontline invaders (lowest in each column)
    for v_i in (0, v_invader_count - 1, 1) then
        if v_invader_alive[v_i] == 1 then
            # Determine which column this invader is in (approximate)
            v_col = (v_invader_x[v_i] - 8) / 10
            if v_col >= 0 and v_col < 6 then
                # Check if this invader is lower than current frontline
                if v_frontline[v_col] < v_invader_y[v_i] then
                    v_frontline[v_col] = v_invader_y[v_i]
                    v_frontline_idx[v_col] = v_i
                endif
            endif
        endif
    endfor v_i
    
    # Count eligible shooters
    v_eligible_count = 0
    for v_col in (0, 5, 1) then
        if v_frontline_idx[v_col] >= 0 then
            v_eligible_count = v_eligible_count + 1
        endif
    endfor v_col
    
    # If no eligible shooters, return -1
    if v_eligible_count == 0 then
        v_shooter_idx = -1
    else
        # Randomly select a column with a frontline invader
        v_found = 0
        while v_found == 0 then
            v_random_col = random(0, 5, 0)
            if v_frontline_idx[v_random_col] >= 0 then
                v_shooter_idx = v_frontline_idx[v_random_col]
                v_found = 1
            endif
        endwhile
    endif
}

# Procedure for invaders to fire bullets
def invader_fire {
    # Only try to fire if timer has elapsed
    if v_invader_shoot_timer <= 0 then
        v_invader_shoot_timer = v_invader_shoot_delay
        
        # Find an open bullet slot
        v_slot = -1
        for v_i in (0, v_max_invader_bullets - 1, 1) then
            if v_invader_bullet_active[v_i] == 0 then
                v_slot = v_i
                v_i = v_max_invader_bullets  # Exit loop
            endif
        endfor v_i
        
        # If we have an open slot, try to find a shooter
        if v_slot >= 0 then
            call find_invader_shooter
            
            # If a shooter was found, fire a bullet
            if v_shooter_idx >= 0 then
                v_invader_bullet_active[v_slot] = 1
                v_shooter_x = v_invader_x[v_shooter_idx]
                v_shooter_y = v_invader_y[v_shooter_idx]
                
                # Position bullet at bottom center of invader
                v_invader_bullet_x[v_slot] = v_shooter_x + 4
                v_invader_bullet_y[v_slot] = v_shooter_y + 6
                
                # Show bullet sprite
                show_sprite(invader_bullet, v_invader_bullet_x[v_slot], v_invader_bullet_y[v_slot], 200 + v_slot)
            endif
        endif
    endif
}

# Procedure to update invader bullets
def update_invader_bullets {
    for v_i in (0, v_max_invader_bullets - 1, 1) then
        if v_invader_bullet_active[v_i] == 1 then
            # Move bullet downward
            v_invader_bullet_y[v_i] = v_invader_bullet_y[v_i] + 1
            
            # Update sprite position
            move_sprite(invader_bullet, v_invader_bullet_x[v_i], v_invader_bullet_y[v_i], 200 + v_i)
            
            # Check if bullet is off screen (bottom)
            if v_invader_bullet_y[v_i] >= 64 then
                # Deactivate bullet
                v_invader_bullet_active[v_i] = 0
                hide_sprite(invader_bullet, 200 + v_i)
            else
                # Check for collision with player
                call check_player_hit
            endif
        endif
    endfor v_i
}

# Procedure to check if player is hit by invader bullet
def check_player_hit {
    # Check all active invader bullets
    for v_i in (0, v_max_invader_bullets - 1, 1) then
        if v_invader_bullet_active[v_i] == 1 then
            # Simple collision detection with player ship
            if v_invader_bullet_x[v_i] >= v_player_x and v_invader_bullet_x[v_i] <= v_player_x + 8 and v_invader_bullet_y[v_i] >= v_player_y and v_invader_bullet_y[v_i] <= v_player_y + 4 then    
                # Player hit! Deactivate bullet
                v_invader_bullet_active[v_i] = 0
                hide_sprite(invader_bullet, 200 + v_i)
                
                # Trigger player death
                call player_hit
                
                # Exit loop
                v_i = v_max_invader_bullets
            endif
        endif
    endfor v_i
}

# Player hit procedure (placeholder - will expand with lives system)
def player_hit {
    # Flash player or show explosion
    hide_sprite(player, 99)
    
    # Simple explosion animation
    draw_circle(v_player_x + 4, v_player_y + 2, 4, red, 100, true, 500)
    
    # Game over for now (will modify with lives system)
    v_game_running = 0
    rest(1)
    call game_over
}

# Main game loop
v_num = 0
def game_loop {
    # Continue running until game is over
    while v_game_running == 1 then
        # Increment timers
        v_move_timer = v_move_timer + 1
        v_anim_timer = v_anim_timer + 1
        v_player_timer = v_player_timer + 1
        v_bullet_timer = v_bullet_timer + 1

        # Handle player movement (faster than invaders)
        if v_player_timer >= 0 then
            v_player_timer = 0
            
            # Move player
            call move_player
            # Random chance to fire
            v_shoot_roll = random(1, 100, 0)
            if v_shoot_roll <= v_shoot_chance then
                call fire_bullet
            endif
        endif

        # Handle invader movement (slower than animation)
        if v_move_timer >= v_move_delay then
            v_move_timer = 0
            
            # Use frame buffering for smooth movement
            begin_frame(true)  # Preserve content (player ship)
                # Move invaders
                call move_invaders
            end_frame

            # Check if invaders should fire
            call invader_fire

        endif

        # Handle player movement (faster than invaders)
        if v_player_timer >= 0 then
            v_player_timer = 0
            
            # Move player
            call move_player
        endif

        # Handle bullet movement (fastest)
        if v_bullet_timer >= v_bullet_speed then
            v_bullet_timer = 0
            
            # Update bullet if active
            call update_bullet

            # Update invader bullets
            call update_invader_bullets
        endif

        # Handle invader animation (faster than movement)
        if v_anim_timer >= v_move_delay / 2 then
            v_anim_timer = 0
            
            # Update animation frames
            call animate_invaders
            
            # Redraw invaders with new animation frames
            begin_frame(true)  # Preserve existing content
                call draw_invaders
            end_frame
        endif

        # Update invader bullets
        call update_invader_bullets
        
        # Handle player movement (faster than invaders)
        if v_player_timer >= 0 then
            v_player_timer = 0
            
            # Move player
            call move_player
        endif

        # Decrement shoot cooldown if needed
        if v_shoot_cooldown > 0 then
            v_shoot_cooldown = v_shoot_cooldown - 11
        endif

        # Decrement invader shoot timer
        if v_invader_shoot_timer > 0 then
            v_invader_shoot_timer = v_invader_shoot_timer - 9
        endif        
        
        # Check for game over conditions
        call check_game_over
        
        # Small delay between frames
        rest(0.05)
    endwhile
}

# Main procedure - entry point
def main {
    while true then
        draw_text(6, 20, "S-P-A-C-E", piboto-regular, 12, white, 100, SLIDE, DOWN)
        draw_text(0,35, "I N V A D E R S", piboto-regular, 10, red, 100, SLIDE, RIGHT)
        show_sprite(invader1, 1, 1, 200)
        show_sprite(invader3, 55, 1, 201)
        show_sprite(invader2, -8, 27, 244)
        rest(3)
        sync_queue
        v_mode = 0
        for v_xx in (-8, 57, 1) then
            begin_frame(true)
            if v_mode == 0 then
                hide_sprite(invader2, 244)
                show_sprite(invader2_alt, 27, v_xx, 245)
                v_mode = 1
            else
                hide_sprite(invader2_alt, 245)
                show_sprite(invader2, 27, v_xx, 244)
                v_mode = 0
            endif
            end_frame
            rest(0.05)
        endfor v_xx
        rest(3)
        hide_sprite(invader1, 200)
        hide_sprite(invader3, 201)
        hide_sprite(invader2, 244)
        hide_sprite(invader2_alt, 245)
        clear()
        sync_queue
        # Initialize the game
        call init_game
        
        # Start the game loop
        call game_loop
        clear()
        call hide_all_invaders
    endwhile
    rest(2)
}

call main
sync_queue