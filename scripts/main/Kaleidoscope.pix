# Kaleidoscope Pattern Lightshow

throttle(2)

v_centerX = 32
v_centerY = 32
v_angle = 0
v_color_base = 45
v_fade_start = 99

# Animation control variables
v_frame_mode = 1
v_speed = 10
v_rest_time = 0.03
v_effect_duration = 0
v_effect_max_time = 6
v_burnout_enabled = 0
v_burnout_min = 100
v_burnout_max = 500

# Kaleidoscope specific variables
v_num_segments = 6      # Number of repeated segments
v_radius = 25          # Pattern radius
v_points_per_arm = 15  # Points in each arm
v_arm_curve = 0.5      # How much arms curve
v_pattern_type = 0     # Different pattern types

# Speed control
v_speed_phase = 0
v_base_speed = 5

while 1 then
    if v_effect_duration > v_effect_max_time then
        v_effect_duration = 0
        
        if random(0, 100, 0) > 50 then
            v_frame_mode = 1
        else
            v_frame_mode = 0
        endif
        
        v_base_speed = random(3, 7, 0)
        v_num_segments = random(8, 16, 0)
        v_pattern_type = random(0, 3, 0)
        v_arm_curve = random(0, 10, 0) / 10
        
        if random(0, 100, 0) > 70 then
            v_burnout_enabled = 1
            v_rest_time = 0.01
        else
            v_burnout_enabled = 0
            v_rest_time = 0.03
        endif
    endif

    v_speed = v_base_speed + 2 * sin(v_speed_phase)
    v_speed_phase = v_speed_phase + 2

    #if v_frame_mode == 1 then
    #    begin_frame
    #endif
    
    clear

    # Draw kaleidoscope segments
    for v_segment in (0, v_num_segments, 1) then
        v_segment_angle = v_segment * (360 / v_num_segments) + v_angle
        
        for v_point in (0, v_points_per_arm, 1) then
            # Calculate point position based on pattern type
            if v_pattern_type == 0 then
                # Spiral arms
                v_r = v_radius * (v_point / v_points_per_arm)
                v_a = v_segment_angle + v_arm_curve * v_point
            elseif v_pattern_type == 1 then
                # Wave arms
                v_r = v_radius * (v_point / v_points_per_arm)
                v_a = v_segment_angle + 20 * sin(v_point * 30 + v_angle)
            else
                # Pulsing arms
                v_r = v_radius * (v_point / v_points_per_arm) * (1 + 0.3 * sin(v_angle))
                v_a = v_segment_angle
            endif
            
            v_x = v_centerX + v_r * cos(v_a)
            v_y = v_centerY + v_r * sin(v_a)
            
            v_intensity = v_fade_start * (1 - v_point / v_points_per_arm)
            
            if v_burnout_enabled == 1 then
                plot(v_x, v_y, v_color_base, v_intensity, random(v_burnout_min, v_burnout_max, 0))
            else
                plot(v_x, v_y, v_color_base, v_intensity)
            endif
        endfor v_point
    endfor v_segment

    #if v_frame_mode == 1 then
    #    end_frame
    #endif

    v_angle = v_angle + v_speed
    v_color_base = v_color_base + 1
    if v_color_base > 99 then
        v_color_base = 1
    endif

    v_effect_duration = v_effect_duration + 1
    rest(v_rest_time)
endwhile