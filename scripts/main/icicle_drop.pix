throttle(2)
# Define sprites
define_sprite(ice_particle, 1, 1)
    plot(0, 0, white, 100)
endsprite

define_sprite(falling_icicle, 1, 7)
    plot(0, 0, gray, 100)
    plot(0, 1, gray, 100)
    plot(0, 2, silver, 100)
    plot(0, 3, azure, 100)
    plot(0, 4, light_gray, 100)
    plot(0, 5, gray, 100)
    plot(0, 6, gray, 100)
endsprite

# Create arrays to track icicle formation and ground collection
create_array(v_top_icicles, 64)
create_array(v_bottom_pile, 64)

# Physics constants
v_gravity = 9.8
v_dt = 0.016
v_damping = 0.99
v_move_delay = 0.005

# Initialize variables
v_particle_x = 0
v_particle_y = 0
v_velocity_y = 0
v_time = 0
v_is_icicle_falling = 0
v_falling_icicle_x = 0
v_max_icicle_height = 7
v_min_shatter_height = 2
v_max_shatter_height = 4

# Color variations for settled ice
create_array(v_ice_colors, 4, string)
create_array(v_ice_intensities, 4)  # New array for intensities
v_ice_colors[0] = "cyan"
v_ice_intensities[0] = 85
v_ice_colors[1] = "azure"
v_ice_intensities[1] = 80
v_ice_colors[2] = "royal_blue"
v_ice_intensities[2] = 75
v_ice_colors[3] = "white"
v_ice_intensities[3] = 90

# Show initial particle sprite
show_sprite(ice_particle, v_particle_x, v_particle_y)
show_sprite(falling_icicle, v_particle_x, v_particle_y)
hide_sprite(falling_icicle)

while 1 then
    if v_is_icicle_falling == 0 then
        # Show particle sprite, hide icicle sprite
        show_sprite(ice_particle, v_particle_x, v_particle_y)
        hide_sprite(falling_icicle)
        
        # Generate new particle at random position
        if v_particle_y == 0 then
            v_particle_x = random(0, 63, 0)
            v_particle_y = 0
            v_velocity_y = 0
        endif
        
        # Update particle physics
        v_velocity_y = (v_velocity_y + v_gravity * v_dt) * v_damping
        v_particle_y = v_particle_y + v_velocity_y
        
        move_sprite(ice_particle, v_particle_x, v_particle_y)
        
        # Check if particle hits growing icicle or bottom
        if v_particle_y >= (63 - v_bottom_pile[v_particle_x]) then
            # Add to bottom pile with texture
            v_color_index = random(0, 3, 0)
            v_current_height = v_bottom_pile[v_particle_x]
            v_settled_height = random(1, 3, 0)
            
            # Draw settled ice with texture
            for v_i in (0, v_settled_height - 1, 1) then
                if 63 - v_current_height - v_i >= 0 then
                    plot(v_particle_x, 63 - v_current_height - v_i, v_ice_colors[v_color_index], v_ice_intensities[v_color_index])
                endif
            endfor v_i
            
            v_bottom_pile[v_particle_x] = v_bottom_pile[v_particle_x] + v_settled_height
            v_particle_y = 0
            
        elseif v_particle_y >= v_top_icicles[v_particle_x] then
            # Add to growing icicle
            v_top_icicles[v_particle_x] = v_top_icicles[v_particle_x] + 1
            
            # Draw growing icicle
            for v_i in (0, v_top_icicles[v_particle_x] - 1, 1) then
                plot(v_particle_x, v_i, cyan, 100)
            endfor v_i
            
            # Check if icicle should fall
            if v_top_icicles[v_particle_x] >= v_max_icicle_height then
                # Clear the top icicle pixels
                for v_i in (0, v_max_icicle_height - 1, 1) then
                    plot(v_particle_x, v_i, black, 100)
                endfor v_i
                
                v_is_icicle_falling = 1
                v_falling_icicle_x = v_particle_x
                v_particle_y = v_top_icicles[v_particle_x]
                v_velocity_y = 0
                v_top_icicles[v_particle_x] = 0
                show_sprite(falling_icicle, v_falling_icicle_x, 0)
                hide_sprite(ice_particle)
            else
                v_particle_y = 0
            endif
        endif
    endif

    if v_is_icicle_falling != 0 then
        # Update falling icicle physics
        v_velocity_y = (v_velocity_y + v_gravity * v_dt) * v_damping
        v_particle_y = v_particle_y + v_velocity_y
        
        # Move the falling icicle sprite
        move_sprite(falling_icicle, v_falling_icicle_x, v_particle_y - 6)
        
        # Check if icicle hits bottom
        if v_particle_y >= (63 - v_bottom_pile[v_falling_icicle_x]) then
            # Random height for shattered ice
            v_shatter_height = random(v_min_shatter_height, v_max_shatter_height, 0)
            v_color_index = random(0, 3, 0)
            v_current_height = v_bottom_pile[v_falling_icicle_x]
            
            # Draw centered column
            for v_i in (0, v_shatter_height - 1, 1) then
                if 63 - v_current_height - v_i >= 0 then
                    plot(v_falling_icicle_x, 63 - v_current_height - v_i, v_ice_colors[v_color_index], v_ice_intensities[v_color_index])
                endif
            endfor v_i
            
            # 50% chance for left shard with bounds check
            if random(1, 2, 0) == 1 and v_falling_icicle_x > 0 then
                v_left_height = random(1, 2, 0)
                v_left_base = v_bottom_pile[v_falling_icicle_x - 1]
                # Draw full column for left shard
                for v_i in (0, v_left_height - 1, 1) then
                    if 63 - v_left_base - v_i >= 0 then
                        plot(v_falling_icicle_x - 1, 63 - v_left_base - v_i, v_ice_colors[v_color_index], v_ice_intensities[v_color_index])
                    endif
                endfor v_i
                v_bottom_pile[v_falling_icicle_x - 1] = v_bottom_pile[v_falling_icicle_x - 1] + v_left_height
            endif
            
            # 50% chance for right shard with bounds check
            if random(1, 2, 0) == 1 and v_falling_icicle_x < 63 then
                v_right_height = random(1, 2, 0)
                v_right_base = v_bottom_pile[v_falling_icicle_x + 1]
                # Draw full column for right shard
                for v_i in (0, v_right_height - 1, 1) then
                    if 63 - v_right_base - v_i >= 0 then
                        plot(v_falling_icicle_x + 1, 63 - v_right_base - v_i, v_ice_colors[v_color_index], v_ice_intensities[v_color_index])
                    endif
                endfor v_i
                v_bottom_pile[v_falling_icicle_x + 1] = v_bottom_pile[v_falling_icicle_x + 1] + v_right_height
            endif
            
            # Update pile height for center column
            v_bottom_pile[v_falling_icicle_x] = v_bottom_pile[v_falling_icicle_x] + v_shatter_height
            
            v_is_icicle_falling = 0
            hide_sprite(falling_icicle)
            v_particle_y = 0
        endif
    endif
    
    #rest(v_move_delay)
endwhile