# Global configurations
v_intensity = 75            # Base color intensity
v_mouse_speed = 0.1        # Movement speed

v_move_cost = 1            # Life lost per normal move
v_backtrack_cost = 2       # Life lost when backtracking
v_backtrack_steps = 2      # Starting backtrack steps

# Create arrays for tracking
create_array(v_grid, 5000)      # 64x64 grid state (0=empty, 1=wall)
create_array(v_path_x, 5000)    # Store path for backtracking
create_array(v_path_y, 5000)    # Store path for backtracking
v_path_length = 0

def run_sequence {
    # Current movement direction (0=right, 1=down, 2=left, 3=up)
    v_direction = 0
    v_life_force = 1200    # Starting life

    # Initialize grid to empty
    for v_i in (0, 4095, 1) then
        v_grid[v_i] = 0
    endfor v_i

    # Set start and end points
    v_start_x = 2
    v_start_y = 2
    v_end_x = 61
    v_end_y = 61

    # Draw border and mark in grid
    for v_i in (0, 63, 1) then
        # Top and bottom borders
        v_grid[v_i] = 1
        v_grid[v_i + 63 * 64] = 1
        draw_line(v_i, 0, v_i, 0, white, 90)
        draw_line(v_i, 63, v_i, 63, white, 90)
        
        # Left and right borders
        v_grid[v_i * 64] = 1
        v_grid[63 + v_i * 64] = 1
        draw_line(0, v_i, 0, v_i, white, 90)
        draw_line(63, v_i, 63, v_i, white, 90)
    endfor v_i

    # Generate room obstacles
    for v_i in (0, 30, 1) then
        v_x = random(5, 55, 0)
        v_y = random(5, 55, 0)
        v_width = random(5, 10, 0)
        v_height = random(5, 10, 0)
        
        # Check if rectangle would block start or end using compound conditions
        v_overlap = 0
        if v_x <= v_start_x + 2 and v_x + v_width >= v_start_x - 2 and v_y <= v_start_y + 2 and v_y + v_height >= v_start_y - 2 then
            v_overlap = 1
        endif
        
        if v_x <= v_end_x + 2 and v_x + v_width >= v_end_x - 2 and v_y <= v_end_y + 2 and v_y + v_height >= v_end_y - 2 then
            v_overlap = 1
        endif
        
        # If no overlap, draw obstacle
        if v_overlap == 0 then
            draw_rectangle(v_x, v_y, v_width, v_height, white, 75, true)
            
            # Mark in grid
            v_ry = v_y
            while v_ry < v_y + v_height then     # Changed <= to <
                v_rx = v_x
                while v_rx < v_x + v_width then  # Changed <= to <
                    v_grid[v_rx + v_ry * 64] = 1
                    v_rx = v_rx + 1
                endwhile
                v_ry = v_ry + 1
            endwhile
        endif
    endfor v_i

    # Draw start and end points
    draw_circle(v_start_x, v_start_y, 1, yellow, 75, true)
    draw_circle(v_end_x, v_end_y, 1, green, 75, true)

    # Initialize mouse position
    v_current_x = v_start_x
    v_current_y = v_start_y
    v_found = 0

    # Store starting position in path
    v_path_x[0] = v_current_x
    v_path_y[0] = v_current_y
    v_path_length = 1

    # Main movement loop
    while v_life_force > 1 then
        # Try to move in current direction
        v_next_x = v_current_x
        v_next_y = v_current_y
        
        # Calculate next position based on direction
        if v_direction == 0 then
            v_next_x = v_current_x + 1
        endif
        if v_direction == 1 then
            v_next_y = v_current_y + 1
        endif
        if v_direction == 2 then
            v_next_x = v_current_x - 1
        endif
        if v_direction == 3 then
            v_next_y = v_current_y - 1
        endif
        
        # Check if move is valid using compound condition
        v_can_move = 0
        if v_next_x >= 0 and v_next_x < 64 and v_next_y >= 0 and v_next_y < 64 and v_grid[v_next_x + v_next_y * 64] != 1 then
            v_can_move = 1
        endif
        
        # If we can move, do it
        if v_can_move == 1 then
            # Draw path at current position
            draw_line(v_current_x, v_current_y, v_current_x, v_current_y, blue, 50)
            
            # Move to new position
            v_current_x = v_next_x
            v_current_y = v_next_y
            
            # Store in path
            v_path_x[v_path_length] = v_current_x
            v_path_y[v_path_length] = v_current_y
            v_path_length = v_path_length + 1
            
            # Show new position
            draw_line(v_current_x, v_current_y, v_current_x, v_current_y, cyan, 90)
            
            # Small life force cost for normal movement
            v_life_force = v_life_force - v_move_cost
            
            # Random direction change (10% chance)
            v_rand = random(1, 100, 0)
            if v_rand < 10 then
                v_direction = random(0, 3, 0)
            endif
            
            # Check if within 3x3 area of goal using compound condition
            if abs(v_current_x - v_end_x) < 3 and abs(v_current_y - v_end_y) < 3 then
                v_found = 1
                v_life_force = 0
            endif
            #rest(v_mouse_speed)
        else
            # Hit an obstacle - start backtracking
            
            # Show that we hit an obstacle
            draw_line(v_current_x, v_current_y, v_current_x, v_current_y, red, 100)
            rest(v_mouse_speed)
            
            # Back up a few steps
            v_backup_count = 0
            while v_backup_count < v_backtrack_steps then
                if v_path_length > 1 then
                    # Remove current position from path
                    v_path_length = v_path_length - 1
                    
                    # Move back to previous position
                    v_current_x = v_path_x[v_path_length - 1]
                    v_current_y = v_path_y[v_path_length - 1]
                    
                    # Show backtracking
                    draw_line(v_current_x, v_current_y, v_current_x, v_current_y, red, 100)
                    
                    rest(v_mouse_speed)
                endif
                
                # IMPORTANT: Increment the counter outside the if statement
                v_backup_count = v_backup_count + 1
                
            endwhile
            
            # Pick new direction (different from current)
            v_old_direction = v_direction
            v_direction = random(0, 3, 0)
            while v_direction == v_old_direction then
                v_direction = random(0, 3, 0)
            endwhile
        endif
        
    endwhile

    # Show final result
    if v_found == 1 then
        # Success - trace final path in green
        v_i = 0
        while v_i < v_path_length - 1 then
            draw_line(v_path_x[v_i], v_path_y[v_i], v_path_x[v_i], v_path_y[v_i], green, 30)
            rest(0.01)
            v_i = v_i + 1
            draw_line(v_path_x[v_i], v_path_y[v_i], v_path_x[v_i], v_path_y[v_i], green, 100)
        endwhile
    else
        # Death spiral
        v_radius = 1
        while v_radius < 32 then
            draw_circle(v_current_x, v_current_y, v_radius, red, 100, true, 2000)
            rest(0.05)
            v_radius = v_radius + 1
        endwhile
    endif
}

while true then
    call run_sequence
    rest(4)
    clear()
    sync_queue
endwhile