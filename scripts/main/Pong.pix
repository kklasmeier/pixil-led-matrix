# Pong Game AI Simulation
# Court size: 64x64 pixels

# Initialize game variables
v_paddle_height = 12
v_paddle_width = 2   # Now properly 2 pixels wide
v_ball_size = 2      # Now properly 2x2
v_center_x = 32
v_center_y = 32
v_left_score = 0
v_right_score = 0
v_center_line_segments = 8
v_game_frames = 2000  # Number of frames to run the game

# Define ball sprite (2x2)
define_sprite(ball, v_ball_size, v_ball_size)
    draw_rectangle(0, 0, 1, 1, white, 100, true)  # Full 2x2 square
endsprite

# Define left paddle sprite (2 pixels wide)
define_sprite(left_paddle, v_paddle_width, v_paddle_height)
    draw_rectangle(0, 0, 1, v_paddle_height-1, white, 100, true)  # Full 2px width
endsprite

# Define right paddle sprite (2 pixels wide)
define_sprite(right_paddle, v_paddle_width, v_paddle_height)
    draw_rectangle(0, 0, 1, v_paddle_height-1, white, 100, true)  # Full 2px width
endsprite

# Initialize paddle positions
v_left_paddle_x = 2
v_left_paddle_y = 26
v_right_paddle_x = 60
v_right_paddle_y = 26

# Speed factor
v_ball_speed = 2      # Ball moves 2x base speed
v_paddle_speed = 1.7  # How fast the paddles move

# Initialize ball movement (random direction)
v_ball_x = 32
v_ball_y = 32
v_ball_dx = random(-1, 1, 0)  # Random initial direction
if v_ball_dx == 0 then
    v_ball_dx = 1
endif
v_ball_dy = random(-1, 1, 0)
if v_ball_dy == 0 then
    v_ball_dy = 1
endif

# Random angle between -45 and 45 degrees for initial direction
v_angle = random(-45, 45, 0)
if v_angle == 0 then
    v_angle = 15  # Prevent straight line
endif

# Random left/right direction
v_direction = random(0, 1, 0)
if v_direction == 0 then
    v_direction = -1
endif

# Convert angle to dx/dy movement
v_ball_dx = v_direction  # Base direction (-1 or 1)
v_ball_dy = v_angle / 45  # Convert angle to dy ratio (-1 to 1)

# Draw initial court state
#clear()  # Initial clear only
# Draw center line (dashed)
v_segment_height = 64 / (v_center_line_segments * 2)
for v_i in (0, v_center_line_segments-1, 1)
    v_y_pos = v_i * v_segment_height * 2
    draw_rectangle(31, v_y_pos, 2, v_segment_height, white, 100, true)
endfor v_i

# Initial sprite placement
show_sprite(ball, v_ball_x, v_ball_y)
show_sprite(left_paddle, v_left_paddle_x, v_left_paddle_y)
show_sprite(right_paddle, v_right_paddle_x, v_right_paddle_y)

# Draw score (will be updated during gameplay)
def update_score {
    # Draw new score text
    clear_text(20, 3)  # Clear left score position
    draw_text(20, 3, int(v_left_score), piboto-regular, 9, white)
    clear_text(44, 3)  # Clear right score position
    draw_text(44, 3, int(v_right_score), piboto-regular, 9, white)
}

# Update paddle positions based on ball trajectory
def update_paddles {
    # Get paddle center points
    v_left_paddle_center = v_left_paddle_y + (v_paddle_height / 2)
    v_right_paddle_center = v_right_paddle_y + (v_paddle_height / 2)
    
    # Left paddle AI with compound conditions
    if v_ball_dx < 0 and v_ball_y > v_left_paddle_center + 2 then
        v_left_paddle_y = v_left_paddle_y + v_paddle_speed
        move_sprite(left_paddle, v_left_paddle_x, v_left_paddle_y)
    endif
    if v_ball_dx < 0 and v_ball_y < v_left_paddle_center - 2 then
        v_left_paddle_y = v_left_paddle_y - v_paddle_speed
        move_sprite(left_paddle, v_left_paddle_x, v_left_paddle_y)
    endif
    
    # Right paddle AI with compound conditions
    if v_ball_dx > 0 and v_ball_y > v_right_paddle_center + 2 then
        v_right_paddle_y = v_right_paddle_y + v_paddle_speed
        move_sprite(right_paddle, v_right_paddle_x, v_right_paddle_y)
    endif
    if v_ball_dx > 0 and v_ball_y < v_right_paddle_center - 2 then
        v_right_paddle_y = v_right_paddle_y - v_paddle_speed
        move_sprite(right_paddle, v_right_paddle_x, v_right_paddle_y)
    endif
    
    # Keep paddles within screen bounds
    if v_left_paddle_y < 0 then
        v_left_paddle_y = 0
        move_sprite(left_paddle, v_left_paddle_x, v_left_paddle_y)
    endif
    if v_left_paddle_y > 64 - v_paddle_height then
        v_left_paddle_y = 64 - v_paddle_height
        move_sprite(left_paddle, v_left_paddle_x, v_left_paddle_y)
    endif
    
    if v_right_paddle_y < 0 then
        v_right_paddle_y = 0
        move_sprite(right_paddle, v_right_paddle_x, v_right_paddle_y)
    endif
    if v_right_paddle_y > 64 - v_paddle_height then
        v_right_paddle_y = 64 - v_paddle_height
        move_sprite(right_paddle, v_right_paddle_x, v_right_paddle_y)
    endif
}

# Check for collisions
def check_collisions {
    # Ball hitting top or bottom
    if v_ball_y <= 0 then
        v_ball_dy = 1
    endif
    if v_ball_y >= 62 then
        v_ball_dy = -1
    endif
    
    # Ball hitting left paddle with compound condition
    if v_ball_x <= v_left_paddle_x + v_paddle_width and v_ball_y >= v_left_paddle_y and v_ball_y <= v_left_paddle_y + v_paddle_height then
        # Reverse x direction
        v_ball_dx = 1
        
        # Calculate where on the paddle we hit (0-1 range)
        v_hit_pos = (v_ball_y - v_left_paddle_y) / v_paddle_height
        
        # Adjust angle based on where ball hits paddle
        v_base_angle = (v_hit_pos - 0.5) * 2  # Convert to -1 to 1 range
        
        # Add some randomization to the return angle
        v_random_factor = random(-20, 20, 0) / 100  # +/- 0.2
        v_ball_dy = v_base_angle + v_random_factor
        
        # Ensure ball doesn't move too vertical
        if v_ball_dy > 0.8 then
            v_ball_dy = 0.8
        endif
        if v_ball_dy < -0.8 then
            v_ball_dy = -0.8
        endif
    endif
    
    # Ball hitting right paddle with compound condition
    if v_ball_x >= v_right_paddle_x - v_ball_size and v_ball_y >= v_right_paddle_y and v_ball_y <= v_right_paddle_y + v_paddle_height then
        # Reverse x direction
        v_ball_dx = -1
        
        # Calculate where on the paddle we hit (0-1 range)
        v_hit_pos = (v_ball_y - v_right_paddle_y) / v_paddle_height
        
        # Adjust angle based on where ball hits paddle
        v_base_angle = (v_hit_pos - 0.5) * 2  # Convert to -1 to 1 range
        
        # Add some randomization to the return angle
        v_random_factor = random(-20, 20, 0) / 100  # +/- 0.2
        v_ball_dy = v_base_angle + v_random_factor
        
        # Ensure ball doesn't move too vertical
        if v_ball_dy > 0.8 then
            v_ball_dy = 0.8
        endif
        if v_ball_dy < -0.8 then
            v_ball_dy = -0.8
        endif
    endif    
    
    # Ball scoring (passing paddles)
    if v_ball_x <= 0 then
        # Right scores
        v_right_score = v_right_score + 1
        v_ball_x = 32
        v_ball_y = 32
        
        # Random angle between -45 and 45 degrees
        v_angle = random(-45, 45, 0)
        if v_angle == 0 then
            v_angle = 15
        endif
        
        v_ball_dx = 1  # Serve towards right player
        v_ball_dy = v_angle / 45  # Convert to dy ratio
        
        call update_score
    endif
    
    if v_ball_x >= 63 then
        # Left scores
        v_left_score = v_left_score + 1
        v_ball_x = 32
        v_ball_y = 32
        
        # Random angle between -45 and 45 degrees
        v_angle = random(-45, 45, 0)
        if v_angle == 0 then
            v_angle = 15
        endif
        
        v_ball_dx = -1  # Serve towards left player
        v_ball_dy = v_angle / 45  # Convert to dy ratio
        
        call update_score
    endif
}

# Update ball position
def update_ball {
    # Multiply movement by speed factor
    v_ball_x = v_ball_x + (v_ball_dx * v_ball_speed)
    v_ball_y = v_ball_y + (v_ball_dy * v_ball_speed)
    move_sprite(ball, v_ball_x, v_ball_y)
}

call update_score

# Set initial state for continuous play
v_running = 1

# Main game loop - runs indefinitely
while v_running == 1 then
    # Update AI paddles
    call update_paddles
    
    # Update ball position
    call update_ball
    
    # Check for collisions
    call check_collisions
    
    rest(0.02)  # Control game speed
endwhile

# Clean up sprites at end of game
hide_sprite(ball)
hide_sprite(left_paddle)
hide_sprite(right_paddle)
rest(5)