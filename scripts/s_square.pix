# Enhanced Pattern Animation
# Dynamic pattern generator with random colors and varying speeds

# Constants and initial values
v_led_rest = 3000
v_base_speed = 0.003
v_min_spacing = 3
v_max_spacing = 6

# Available colors array
create_array(v_colors, 8, string)
v_colors[0] = "red"
v_colors[1] = "blue"
v_colors[2] = "green"
v_colors[3] = "purple"
v_colors[4] = "cyan"
v_colors[5] = "yellow"
v_colors[6] = "white"
v_colors[7] = "orange"

# Function to get random color
def get_random_color {
    v_color_index = random(0, 7, 0)
    v_intensity = random(50, 99, 0)
    v_selected_color = v_colors[v_color_index]
}

# Function to update pattern parameters
def update_parameters {
    # Randomize spacing between dots
    v_spacing = random(v_min_spacing, v_max_spacing, 0)
    v_spacing2 = random(v_min_spacing, v_max_spacing, 0)
    
    # Update offsets
    v_offsetx1 = random(1, 5, 0)
    v_offsety1 = random(1, 5, 0)
    
    # Randomize animation speed
    v_speed = v_base_speed * random(5, 15, 0) / 10
    
    # Randomize rest duration
    v_rest = random(100, 400, 0)
}

def square_top_left_right {
    call get_random_color
    v_color1 = v_selected_color
    call get_random_color
    v_color2 = v_selected_color
    call get_random_color
    v_color3 = v_selected_color
    
    v_ploty2 = v_ploty + v_spacing
    v_ploty3 = v_ploty2 + v_spacing2
    
    for v_plot in (1, 52, 1) then
        v_plotx = v_plot + v_offsetx1
        v_plotx2 = v_plotx + v_spacing
        v_plotx3 = v_plotx2 + v_spacing2
        
        plot(v_plotx, v_ploty, {v_color1}:{v_intensity}, v_rest)
        plot(v_plotx2, v_ploty2, {v_color2}:{v_intensity}, v_rest)
        plot(v_plotx3, v_ploty3, {v_color3}:{v_intensity}, v_rest)
        rest(v_speed)
    endfor v_plot
}

def square_right_up_down {
    call get_random_color
    v_color1 = v_selected_color
    call get_random_color
    v_color2 = v_selected_color
    call get_random_color
    v_color3 = v_selected_color
    
    for v_plot in (1, 52, 1) then
        v_ploty = v_plot + v_offsety1
        v_ploty2 = v_ploty + v_spacing
        v_ploty3 = v_ploty2 + v_spacing2
        
        plot(v_plotx, v_ploty, {v_color1}:{v_intensity}, v_rest)
        plot(v_plotx2, v_ploty2, {v_color2}:{v_intensity}, v_rest)
        plot(v_plotx3, v_ploty3, {v_color3}:{v_intensity}, v_rest)
        rest(v_speed)
    endfor v_plot
}

def square_top_right_left {
    call get_random_color
    v_color1 = v_selected_color
    call get_random_color
    v_color2 = v_selected_color
    call get_random_color
    v_color3 = v_selected_color
    
    for v_plot in (52, 1, -1) then
        v_plotx = v_plot + v_offsetx1
        v_plotx2 = v_plotx + v_spacing
        v_plotx3 = v_plotx2 + v_spacing2
        
        plot(v_plotx, v_ploty, {v_color1}:{v_intensity}, v_rest)
        plot(v_plotx2, v_ploty2, {v_color2}:{v_intensity}, v_rest)
        plot(v_plotx3, v_ploty3, {v_color3}:{v_intensity}, v_rest)
        rest(v_speed)
    endfor v_plot
}

def square_top_down_up {
    call get_random_color
    v_color1 = v_selected_color
    call get_random_color
    v_color2 = v_selected_color
    call get_random_color
    v_color3 = v_selected_color
    
    for v_plot in (52, 1, -1) then
        v_ploty = v_plot + v_offsety1
        v_ploty2 = v_ploty + v_spacing
        v_ploty3 = v_ploty2 + v_spacing2
        
        plot(v_plotx, v_ploty, {v_color1}:{v_intensity}, v_rest)
        plot(v_plotx2, v_ploty2, {v_color2}:{v_intensity}, v_rest)
        plot(v_plotx3, v_ploty3, {v_color3}:{v_intensity}, v_rest)
        rest(v_speed)
    endfor v_plot
}

# Add some variation patterns
def diagonal_pattern {
    call get_random_color
    v_color1 = v_selected_color
    call get_random_color
    v_color2 = v_selected_color
    call get_random_color
    v_color3 = v_selected_color
    
    for v_plot in (1, 52, 1) then
        v_plotx = v_plot + v_offsetx1
        v_ploty = v_plot + v_offsety1
        
        plot(v_plotx, v_ploty, {v_color1}:{v_intensity}, v_rest)
        plot(v_plotx + v_spacing, v_ploty + v_spacing, {v_color2}:{v_intensity}, v_rest)
        plot(v_plotx + v_spacing2, v_ploty + v_spacing2, {v_color3}:{v_intensity}, v_rest)
        rest(v_speed)
    endfor v_plot
}

def spiral_pattern {
    call get_random_color
    v_color1 = v_selected_color
    call get_random_color
    v_color2 = v_selected_color
    call get_random_color
    v_color3 = v_selected_color
    
    v_angle = 0
    v_radius = 1
    
    while v_angle < 720 then
        v_x = 32 + cos(v_angle) * v_radius
        v_y = 32 + sin(v_angle) * v_radius
        
        plot(v_x, v_y, {v_color1}:{v_intensity}, v_rest)
        plot(v_x + v_spacing, v_y + v_spacing, {v_color2}:{v_intensity}, v_rest)
        plot(v_x + v_spacing2, v_y + v_spacing2, {v_color3}:{v_intensity}, v_rest)
        
        v_angle = v_angle + 10
        v_radius = v_radius + 0.2
        rest(v_speed)
    endwhile
}

# Initialize starting values
v_plotx = v_offsetx1
v_ploty = v_offsety1

# Main animation loop - runs forever
while true then
    # Update parameters for this iteration
    call update_parameters
    
    # Choose random pattern sequence
    v_pattern = random(1, 3, 0)
    
    if v_pattern == 1 then
        # Original square pattern
        call square_top_left_right
        call square_right_up_down
        call square_top_right_left
        call square_top_down_up
    endif
    
    if v_pattern == 2 then
        # Diagonal pattern
        call diagonal_pattern
    endif
    
    if v_pattern == 3 then
        # Spiral pattern
        call spiral_pattern
    endif
    
    rest(0.5)
endwhile