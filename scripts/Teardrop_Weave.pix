# Traveling Dots Pattern with Burnout Variations
# 8 dots moving in a clockwise pattern around the display
# Pre-calculated path stored in arrays
# Different burnout modes cycle randomly

# Initialize variables
throttle(0)
v_cycle = 0            # Current cycle counter
v_path_length = 126    # Full path length (63 steps forward + 63 steps back)
v_delay = 0.00         # Delay between frames (can be set to 0 for maximum speed)
v_stagger = 8          # Steps between dot starts
v_complete_cycle = v_path_length * 4  # 4 complete iterations = 1 cycle
v_burnout_mode = 0     # Current burnout mode (0=standard, 1=short, 2=long)
v_mode_counter = 0     # Counter for current mode duration
v_color = 0
v_color_mode = 0

# Create arrays for dot coordinates (x and y for each dot)
create_array(v_dot1_x, 126)
create_array(v_dot1_y, 126)
create_array(v_dot2_x, 126)
create_array(v_dot2_y, 126)
create_array(v_dot3_x, 126)
create_array(v_dot3_y, 126)
create_array(v_dot4_x, 126)
create_array(v_dot4_y, 126)
create_array(v_dot5_x, 126)
create_array(v_dot5_y, 126)
create_array(v_dot6_x, 126)
create_array(v_dot6_y, 126)
create_array(v_dot7_x, 126)
create_array(v_dot7_y, 126)
create_array(v_dot8_x, 126)
create_array(v_dot8_y, 126)

# Define dot colors
v_color1 = "red"
v_color2 = "orange"
v_color3 = "yellow"
v_color4 = "green"
v_color5 = "cyan"
v_color6 = "blue"
v_color7 = "purple"
v_color8 = "magenta"

# Define dot start and end points (clockwise around matrix)
# Dot 1: Top center to bottom center
v_dot1_start_x = 32
v_dot1_start_y = 0
v_dot1_end_x = 32
v_dot1_end_y = 63

# Dot 2: Top-right quadrant to bottom-left quadrant
v_dot2_start_x = 48
v_dot2_start_y = 0
v_dot2_end_x = 16
v_dot2_end_y = 63

# Dot 3: Top-right corner to bottom-left corner
v_dot3_start_x = 63
v_dot3_start_y = 0
v_dot3_end_x = 0
v_dot3_end_y = 63

# Dot 4: Right-top quadrant to left-bottom quadrant
v_dot4_start_x = 63
v_dot4_start_y = 16
v_dot4_end_x = 0
v_dot4_end_y = 48

# Dot 5: Right-center to left-center
v_dot5_start_x = 63
v_dot5_start_y = 32
v_dot5_end_x = 0
v_dot5_end_y = 32

# Dot 6: Right-bottom quadrant to left-top quadrant
v_dot6_start_x = 63
v_dot6_start_y = 48
v_dot6_end_x = 0
v_dot6_end_y = 16

# Dot 7: Bottom-right corner to top-left corner
v_dot7_start_x = 63
v_dot7_start_y = 63
v_dot7_end_x = 0
v_dot7_end_y = 0

# Dot 8: Bottom-right quadrant to top-left quadrant
v_dot8_start_x = 48
v_dot8_start_y = 63
v_dot8_end_x = 16
v_dot8_end_y = 0

# Precalculate all path positions for each dot
# First half: start to end (0-63)
for v_step in (0, 63, 1)
    v_progress = v_step / 63
    
    # Dot 1 path
    v_dot1_x[v_step] = v_dot1_start_x + (v_dot1_end_x - v_dot1_start_x) * v_progress
    v_dot1_y[v_step] = v_dot1_start_y + (v_dot1_end_y - v_dot1_start_y) * v_progress
    
    # Dot 2 path
    v_dot2_x[v_step] = v_dot2_start_x + (v_dot2_end_x - v_dot2_start_x) * v_progress
    v_dot2_y[v_step] = v_dot2_start_y + (v_dot2_end_y - v_dot2_start_y) * v_progress
    
    # Dot 3 path
    v_dot3_x[v_step] = v_dot3_start_x + (v_dot3_end_x - v_dot3_start_x) * v_progress
    v_dot3_y[v_step] = v_dot3_start_y + (v_dot3_end_y - v_dot3_start_y) * v_progress
    
    # Dot 4 path
    v_dot4_x[v_step] = v_dot4_start_x + (v_dot4_end_x - v_dot4_start_x) * v_progress
    v_dot4_y[v_step] = v_dot4_start_y + (v_dot4_end_y - v_dot4_start_y) * v_progress
    
    # Dot 5 path
    v_dot5_x[v_step] = v_dot5_start_x + (v_dot5_end_x - v_dot5_start_x) * v_progress
    v_dot5_y[v_step] = v_dot5_start_y + (v_dot5_end_y - v_dot5_start_y) * v_progress
    
    # Dot 6 path
    v_dot6_x[v_step] = v_dot6_start_x + (v_dot6_end_x - v_dot6_start_x) * v_progress
    v_dot6_y[v_step] = v_dot6_start_y + (v_dot6_end_y - v_dot6_start_y) * v_progress
    
    # Dot 7 path
    v_dot7_x[v_step] = v_dot7_start_x + (v_dot7_end_x - v_dot7_start_x) * v_progress
    v_dot7_y[v_step] = v_dot7_start_y + (v_dot7_end_y - v_dot7_start_y) * v_progress
    
    # Dot 8 path
    v_dot8_x[v_step] = v_dot8_start_x + (v_dot8_end_x - v_dot8_start_x) * v_progress
    v_dot8_y[v_step] = v_dot8_start_y + (v_dot8_end_y - v_dot8_start_y) * v_progress
endfor v_step

# Second half: end to start (64-125)
for v_step in (0, 61, 1)
    v_idx = v_step + 64
    v_src = 63 - v_step
    
    # Dot 1 path return
    v_dot1_x[v_idx] = v_dot1_x[v_src]
    v_dot1_y[v_idx] = v_dot1_y[v_src]
    
    # Dot 2 path return
    v_dot2_x[v_idx] = v_dot2_x[v_src]
    v_dot2_y[v_idx] = v_dot2_y[v_src]
    
    # Dot 3 path return
    v_dot3_x[v_idx] = v_dot3_x[v_src]
    v_dot3_y[v_idx] = v_dot3_y[v_src]
    
    # Dot 4 path return
    v_dot4_x[v_idx] = v_dot4_x[v_src]
    v_dot4_y[v_idx] = v_dot4_y[v_src]
    
    # Dot 5 path return
    v_dot5_x[v_idx] = v_dot5_x[v_src]
    v_dot5_y[v_idx] = v_dot5_y[v_src]
    
    # Dot 6 path return
    v_dot6_x[v_idx] = v_dot6_x[v_src]
    v_dot6_y[v_idx] = v_dot6_y[v_src]
    
    # Dot 7 path return
    v_dot7_x[v_idx] = v_dot7_x[v_src]
    v_dot7_y[v_idx] = v_dot7_y[v_src]
    
    # Dot 8 path return
    v_dot8_x[v_idx] = v_dot8_x[v_src]
    v_dot8_y[v_idx] = v_dot8_y[v_src]
endfor v_step

# Burnout durations
v_short_burnout = 150
v_long_burnout = 700

# Main animation loop - runs until canceled
while 1 == 1 then
    # Check if it's time to change the burnout mode
    if v_mode_counter >= v_complete_cycle then
        # Generate a random number between 1 and 100
        v_rand = random(1, 100, 0)
        
        # Select burnout mode based on probability
        if v_rand <= 40 then
            v_burnout_mode = 0  # Standard mode (40% chance)
        elseif v_rand <= 70 then
            v_burnout_mode = 1  # Short burnout (30% chance)
        else
            v_burnout_mode = 2  # Long burnout (30% chance)
        endif
        
        # Select burnout mode based on probability
        if v_rand <= 30 then
            v_color_mode = 0  # Standard mode (30% chance)
        elseif v_rand <= 60 then
            v_color_mode = 1  # Single Color (30% chance)
            v_color_increment = 0
            v_color = v_rand
            print
        else # Shifting Color (30% chance)
            v_color_mode = 2
            v_color_increment = 1
        endif

        # Reset mode counter
        v_mode_counter = 0
        
        # print(f"Switching modes: v_rand = {v_rand}, v_burnout_mode = {v_burnout_mode}, v_color_mode = {v_color_mode}, v_color_increment = {v_color_increment}")

        # Print debug message about mode change
        if v_burnout_mode == 1 then
            if v_prev_burnout_mode == 0 or v_prev_burnout_mode == 2 then
                clear()
            endif
        else
            if v_prev_burnout_mode <= 1 then
                clear()
            endif
        endif
    endif

    v_prev_burnout_mode = v_burnout_mode

    v_color = v_color + v_color_increment
    if v_color == 100 then
        v_color = 1
    endif

    # Calculate positions for each dot with staggered offsets
    v_pos1 = v_cycle % v_path_length
    v_pos2 = (v_cycle + v_stagger) % v_path_length
    v_pos3 = (v_cycle + v_stagger * 2) % v_path_length
    v_pos4 = (v_cycle + v_stagger * 3) % v_path_length
    v_pos5 = (v_cycle + v_stagger * 4) % v_path_length
    v_pos6 = (v_cycle + v_stagger * 5) % v_path_length
    v_pos7 = (v_cycle + v_stagger * 6) % v_path_length
    v_pos8 = (v_cycle + v_stagger * 7) % v_path_length
    
    # Plot all dots at their current positions with appropriate burnout
    if v_burnout_mode == 0 and v_color_mode == 0 then
        # Standard mode - no burnout, clear screen each frame
        begin_frame
        plot(v_dot1_x[v_pos1], v_dot1_y[v_pos1], v_color1, 100)
        plot(v_dot2_x[v_pos2], v_dot2_y[v_pos2], v_color2, 100)
        plot(v_dot3_x[v_pos3], v_dot3_y[v_pos3], v_color3, 100)
        plot(v_dot4_x[v_pos4], v_dot4_y[v_pos4], v_color4, 100)
        plot(v_dot5_x[v_pos5], v_dot5_y[v_pos5], v_color5, 100)
        plot(v_dot6_x[v_pos6], v_dot6_y[v_pos6], v_color6, 100)
        plot(v_dot7_x[v_pos7], v_dot7_y[v_pos7], v_color7, 100)
        plot(v_dot8_x[v_pos8], v_dot8_y[v_pos8], v_color8, 100)
    elseif v_burnout_mode == 1 and v_color_mode == 0 then
        # Short burnout mode
        # Burnout mode - preserve existing content
        begin_frame(true)
        plot(v_dot1_x[v_pos1], v_dot1_y[v_pos1], v_color1, 100, v_short_burnout)
        plot(v_dot2_x[v_pos2], v_dot2_y[v_pos2], v_color2, 100, v_short_burnout)
        plot(v_dot3_x[v_pos3], v_dot3_y[v_pos3], v_color3, 100, v_short_burnout)
        plot(v_dot4_x[v_pos4], v_dot4_y[v_pos4], v_color4, 100, v_short_burnout)
        plot(v_dot5_x[v_pos5], v_dot5_y[v_pos5], v_color5, 100, v_short_burnout)
        plot(v_dot6_x[v_pos6], v_dot6_y[v_pos6], v_color6, 100, v_short_burnout)
        plot(v_dot7_x[v_pos7], v_dot7_y[v_pos7], v_color7, 100, v_short_burnout)
        plot(v_dot8_x[v_pos8], v_dot8_y[v_pos8], v_color8, 100, v_short_burnout)
    elseif v_burnout_mode == 2 and v_color_mode == 0 then
        # Long burnout mode
        # Burnout mode - preserve existing content
        begin_frame(true)
        plot(v_dot1_x[v_pos1], v_dot1_y[v_pos1], v_color1, 100, v_long_burnout)
        plot(v_dot2_x[v_pos2], v_dot2_y[v_pos2], v_color2, 100, v_long_burnout)
        plot(v_dot3_x[v_pos3], v_dot3_y[v_pos3], v_color3, 100, v_long_burnout)
        plot(v_dot4_x[v_pos4], v_dot4_y[v_pos4], v_color4, 100, v_long_burnout)
        plot(v_dot5_x[v_pos5], v_dot5_y[v_pos5], v_color5, 100, v_long_burnout)
        plot(v_dot6_x[v_pos6], v_dot6_y[v_pos6], v_color6, 100, v_long_burnout)
        plot(v_dot7_x[v_pos7], v_dot7_y[v_pos7], v_color7, 100, v_long_burnout)
        plot(v_dot8_x[v_pos8], v_dot8_y[v_pos8], v_color8, 100, v_long_burnout)
    elseif v_burnout_mode == 0 and v_color_mode > 0 then
        # Standard mode - no burnout, clear screen each frame
        begin_frame
        plot(v_dot1_x[v_pos1], v_dot1_y[v_pos1], v_color, 100)
        plot(v_dot2_x[v_pos2], v_dot2_y[v_pos2], v_color, 100)
        plot(v_dot3_x[v_pos3], v_dot3_y[v_pos3], v_color, 100)
        plot(v_dot4_x[v_pos4], v_dot4_y[v_pos4], v_color, 100)
        plot(v_dot5_x[v_pos5], v_dot5_y[v_pos5], v_color, 100)
        plot(v_dot6_x[v_pos6], v_dot6_y[v_pos6], v_color, 100)
        plot(v_dot7_x[v_pos7], v_dot7_y[v_pos7], v_color, 100)
        plot(v_dot8_x[v_pos8], v_dot8_y[v_pos8], v_color, 100)
    elseif v_burnout_mode == 1 and v_color_mode > 0 then
        # Short burnout mode
        # Burnout mode - preserve existing content
        begin_frame(true)
        plot(v_dot1_x[v_pos1], v_dot1_y[v_pos1], v_color, 100, v_short_burnout)
        plot(v_dot2_x[v_pos2], v_dot2_y[v_pos2], v_color, 100, v_short_burnout)
        plot(v_dot3_x[v_pos3], v_dot3_y[v_pos3], v_color, 100, v_short_burnout)
        plot(v_dot4_x[v_pos4], v_dot4_y[v_pos4], v_color, 100, v_short_burnout)
        plot(v_dot5_x[v_pos5], v_dot5_y[v_pos5], v_color, 100, v_short_burnout)
        plot(v_dot6_x[v_pos6], v_dot6_y[v_pos6], v_color, 100, v_short_burnout)
        plot(v_dot7_x[v_pos7], v_dot7_y[v_pos7], v_color, 100, v_short_burnout)
        plot(v_dot8_x[v_pos8], v_dot8_y[v_pos8], v_color, 100, v_short_burnout)
    elseif v_burnout_mode == 2 and v_color_mode > 0 then
        # Long burnout mode
        # Burnout mode - preserve existing content
        begin_frame(true)
        plot(v_dot1_x[v_pos1], v_dot1_y[v_pos1], v_color, 100, v_long_burnout)
        plot(v_dot2_x[v_pos2], v_dot2_y[v_pos2], v_color, 100, v_long_burnout)
        plot(v_dot3_x[v_pos3], v_dot3_y[v_pos3], v_color, 100, v_long_burnout)
        plot(v_dot4_x[v_pos4], v_dot4_y[v_pos4], v_color, 100, v_long_burnout)
        plot(v_dot5_x[v_pos5], v_dot5_y[v_pos5], v_color, 100, v_long_burnout)
        plot(v_dot6_x[v_pos6], v_dot6_y[v_pos6], v_color, 100, v_long_burnout)
        plot(v_dot7_x[v_pos7], v_dot7_y[v_pos7], v_color, 100, v_long_burnout)
        plot(v_dot8_x[v_pos8], v_dot8_y[v_pos8], v_color, 100, v_long_burnout)
    else
        print("Error, no conditions met")
    endif
    
    # Display frame
    end_frame
    
    # Increment counters
    v_cycle = v_cycle + 1
    v_mode_counter = v_mode_counter + 1
    
    # Add a small delay
    rest(v_delay)
endwhile