# RGB Color Cube - Optimized 3D visualization with depth effects
# Fixed version to avoid index out of range errors

# Define variables for cube properties
v_center_x = 32
v_center_y = 32
v_size = 20
v_rotation_x = 0
v_rotation_y = 0
v_rotation_z = 0
v_rotation_speed_x = 0.03
v_rotation_speed_y = 0.04
v_rotation_speed_z = 0.02

rest(15)

# Set aggressive throttle to improve performance
throttle(0.05)

# Define arrays for cube vertices (8 corners)
create_array(v_vertices_x, 8)
create_array(v_vertices_y, 8)
create_array(v_vertices_z, 8)

# Define arrays for projected 2D coordinates and depth
create_array(v_projected_x, 8)
create_array(v_projected_y, 8)
create_array(v_depth, 8)

# Define arrays for vertex colors
create_array(v_colors, 8, string)

# Define cube vertices in 3D space
# Format: (x, y, z) where each component is either -1 or 1
v_vertices_x[0] = -1
v_vertices_y[0] = -1
v_vertices_z[0] = -1
v_colors[0] = "gray"    # Black (as gray)

v_vertices_x[1] = 1
v_vertices_y[1] = -1
v_vertices_z[1] = -1
v_colors[1] = "red"     # Red

v_vertices_x[2] = -1
v_vertices_y[2] = 1
v_vertices_z[2] = -1
v_colors[2] = "green"   # Green

v_vertices_x[3] = 1
v_vertices_y[3] = 1
v_vertices_z[3] = -1
v_colors[3] = "yellow"  # Yellow

v_vertices_x[4] = -1
v_vertices_y[4] = -1
v_vertices_z[4] = 1
v_colors[4] = "blue"    # Blue

v_vertices_x[5] = 1
v_vertices_y[5] = -1
v_vertices_z[5] = 1
v_colors[5] = "magenta" # Magenta

v_vertices_x[6] = -1
v_vertices_y[6] = 1
v_vertices_z[6] = 1
v_colors[6] = "cyan"    # Cyan

v_vertices_x[7] = 1
v_vertices_y[7] = 1
v_vertices_z[7] = 1
v_colors[7] = "white"   # White

# Define edges of the cube (12 edges connecting 8 vertices)
create_array(v_edge_start, 12)
create_array(v_edge_end, 12)
create_array(v_edge_colors, 12, string)

# Bottom face edges
v_edge_start[0] = 0
v_edge_end[0] = 1
v_edge_colors[0] = "red"

v_edge_start[1] = 1
v_edge_end[1] = 3
v_edge_colors[1] = "yellow"

v_edge_start[2] = 3
v_edge_end[2] = 2
v_edge_colors[2] = "green"

v_edge_start[3] = 2
v_edge_end[3] = 0
v_edge_colors[3] = "gray"

# Top face edges
v_edge_start[4] = 4
v_edge_end[4] = 5
v_edge_colors[4] = "magenta"

v_edge_start[5] = 5
v_edge_end[5] = 7
v_edge_colors[5] = "white"

v_edge_start[6] = 7
v_edge_end[6] = 6
v_edge_colors[6] = "cyan"

v_edge_start[7] = 6
v_edge_end[7] = 4
v_edge_colors[7] = "blue"

# Connecting edges
v_edge_start[8] = 0
v_edge_end[8] = 4
v_edge_colors[8] = "blue"

v_edge_start[9] = 1
v_edge_end[9] = 5
v_edge_colors[9] = "magenta"

v_edge_start[10] = 2
v_edge_end[10] = 6
v_edge_colors[10] = "cyan"

v_edge_start[11] = 3
v_edge_end[11] = 7
v_edge_colors[11] = "white"

# Create background dots grid (we'll use exactly 16 dots for performance)
v_dot_size = 16  # Fixed size to avoid index errors
create_array(v_dot_x, v_dot_size)
create_array(v_dot_y, v_dot_size)
create_array(v_dot_color, v_dot_size, string)

# Pre-fill dot arrays - we'll use exactly 16 dots (4x4 grid)
v_dot_x[0] = 0
v_dot_y[0] = 0
v_dot_color[0] = "red"

v_dot_x[1] = 0
v_dot_y[1] = 21
v_dot_color[1] = "magenta"

v_dot_x[2] = 0
v_dot_y[2] = 42
v_dot_color[2] = "magenta"

v_dot_x[3] = 0
v_dot_y[3] = 63
v_dot_color[3] = "magenta"

v_dot_x[4] = 21
v_dot_y[4] = 0
v_dot_color[4] = "red"

v_dot_x[5] = 21
v_dot_y[5] = 21
v_dot_color[5] = "red"

v_dot_x[6] = 21
v_dot_y[6] = 42
v_dot_color[6] = "magenta"

v_dot_x[7] = 21
v_dot_y[7] = 63
v_dot_color[7] = "magenta"

v_dot_x[8] = 42
v_dot_y[8] = 0
v_dot_color[8] = "green"

v_dot_x[9] = 42
v_dot_y[9] = 21
v_dot_color[9] = "green"

v_dot_x[10] = 42
v_dot_y[10] = 42
v_dot_color[10] = "yellow"

v_dot_x[11] = 42
v_dot_y[11] = 63
v_dot_color[11] = "yellow"

v_dot_x[12] = 63
v_dot_y[12] = 0
v_dot_color[12] = "green"

v_dot_x[13] = 63
v_dot_y[13] = 21
v_dot_color[13] = "green"

v_dot_x[14] = 63
v_dot_y[14] = 42
v_dot_color[14] = "yellow"

v_dot_x[15] = 63
v_dot_y[15] = 63
v_dot_color[15] = "yellow"

# Main animation loop
while 1 == 1 then
    # Clear previous frame
    begin_frame
    
    # Update rotation angles
    v_rotation_x = v_rotation_x + v_rotation_speed_x
    v_rotation_y = v_rotation_y + v_rotation_speed_y
    v_rotation_z = v_rotation_z + v_rotation_speed_z
    
    # Precompute trigonometric values
    v_cos_x = cos(v_rotation_x)
    v_sin_x = sin(v_rotation_x)
    v_cos_y = cos(v_rotation_y)
    v_sin_y = sin(v_rotation_y)
    v_cos_z = cos(v_rotation_z)
    v_sin_z = sin(v_rotation_z)
    
    # Draw background dots (pre-calculated)
    v_i = 0
    while v_i < v_dot_size then
        plot(v_dot_x[v_i], v_dot_y[v_i], v_dot_color[v_i], 30)
        v_i = v_i + 1
    endwhile
    
    # Project 3D points to 2D for all vertices
    v_i = 0
    while v_i < 8 then
        # Get 3D coordinates
        v_x = v_vertices_x[v_i]
        v_y = v_vertices_y[v_i]
        v_z = v_vertices_z[v_i]
        
        # X-axis rotation
        v_y2 = v_y * v_cos_x - v_z * v_sin_x
        v_z2 = v_y * v_sin_x + v_z * v_cos_x
        
        # Y-axis rotation
        v_x2 = v_x * v_cos_y + v_z2 * v_sin_y
        v_z3 = -v_x * v_sin_y + v_z2 * v_cos_y
        
        # Z-axis rotation
        v_x3 = v_x2 * v_cos_z - v_y2 * v_sin_z
        v_y3 = v_x2 * v_sin_z + v_y2 * v_cos_z
        
        # Perspective projection
        v_scale = 1.5 / (4 + v_z3)
        v_projected_x[v_i] = v_x3 * v_scale * v_size + v_center_x
        v_projected_y[v_i] = v_y3 * v_scale * v_size + v_center_y
        
        # Store normalized depth for intensity
        v_depth[v_i] = (v_z3 + 1) / 2
        
        v_i = v_i + 1
    endwhile
    
    # Draw back edges first (depth < 0.5)
    v_i = 0
    while v_i < 12 then
        v_start = v_edge_start[v_i]
        v_end = v_edge_end[v_i]
        
        # Calculate average depth
        v_edge_depth = (v_depth[v_start] + v_depth[v_end]) / 2
        
        # Draw only back edges (depth < 0.5)
        if v_edge_depth < 0.5 then
            # Map depth to intensity (0.0 = back/dim, 0.5 = middle)
            v_intensity = 40 + v_edge_depth * 60
            
            # Draw the edge with depth-based intensity
            draw_line(v_projected_x[v_start], v_projected_y[v_start], v_projected_x[v_end], v_projected_y[v_end], v_edge_colors[v_i], v_intensity)
        endif
        
        v_i = v_i + 1
    endwhile
    
    # Draw back vertices (depth < 0.5)
    v_i = 0
    while v_i < 8 then
        if v_depth[v_i] < 0.5 then
            # Map depth to intensity (0.0 = back/dim, 0.5 = middle)
            v_intensity = 40 + v_depth[v_i] * 60
            
            # Draw vertex with depth-based intensity
            draw_circle(v_projected_x[v_i], v_projected_y[v_i], 2, v_colors[v_i], v_intensity, true)
        endif
        
        v_i = v_i + 1
    endwhile
    
    # Draw front edges (depth >= 0.5)
    v_i = 0
    while v_i < 12 then
        v_start = v_edge_start[v_i]
        v_end = v_edge_end[v_i]
        
        # Calculate average depth
        v_edge_depth = (v_depth[v_start] + v_depth[v_end]) / 2
        
        # Draw only front edges (depth >= 0.5)
        if v_edge_depth >= 0.5 then
            # Map depth to intensity (0.5 = middle, 1.0 = front/bright)
            v_intensity = 40 + v_edge_depth * 60
            if v_intensity > 100 then
                v_intensity = 100
            endif
            
            # Draw the edge with depth-based intensity
            draw_line(v_projected_x[v_start], v_projected_y[v_start], v_projected_x[v_end], v_projected_y[v_end], v_edge_colors[v_i], v_intensity)
        endif
        
        v_i = v_i + 1
    endwhile
    
    # Draw front vertices (depth >= 0.5)
    v_i = 0
    while v_i < 8 then
        if v_depth[v_i] >= 0.5 then
            # Map depth to intensity (0.5 = middle, 1.0 = front/bright)
            v_intensity = 40 + v_depth[v_i] * 60
            if v_intensity > 100 then
                v_intensity = 100
            endif
            
            # Draw vertex with depth-based intensity
            draw_circle(v_projected_x[v_i], v_projected_y[v_i], 2, v_colors[v_i], v_intensity, true)
        endif
        
        v_i = v_i + 1
    endwhile
    
    # Display frame
    end_frame
endwhile