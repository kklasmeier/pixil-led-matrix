# Random Moving 3D Cube with Rotation
# Initialize variables for cube position and movement
v_centerx = 32
v_centery = 32
v_size = 10
v_depth = 200

# Create arrays for storing transformed points
create_array(v_screenx, 8)
create_array(v_screeny, 8)
create_array(v_x, 8)
create_array(v_y, 8)
create_array(v_z, 8)
create_array(v_rotx, 8)
create_array(v_roty, 8)
create_array(v_rotz, 8)

# Position in 3D space (starting point)
v_posx = 0
v_posy = 0
v_posz = 100

# Movement speeds
v_speedx = 2
v_speedy = 1.5
v_speedz = 1

# Rotation speed control - adjust this to change overall rotation speed
# Try these values:
#   Very Slow: 0.2
#   Slow: 0.5
#   Medium: 1.0
#   Fast: 2.0
v_speedctrl = 0.2

# Rotation angles and speeds (in radians)
v_anglex = 0
v_angley = 0
v_anglez = 0
v_rotspeedx = 0.00001 * v_speedctrl
v_rotspeedy = 0.000015 * v_speedctrl
v_rotspeedz = 0.000008 * v_speedctrl

# Maximum rotation speeds
v_maxrotspeed = 0.1

# Animation control
v_resttime = 0.02  # Rest time between frames

# Movement bounds
v_boundx = 30
v_boundy = 30
v_boundz = 50

# Initialize cube vertices - Front face
v_x[0] = -1
v_y[0] = -1
v_z[0] = -1
v_x[1] = 1
v_y[1] = -1
v_z[1] = -1
v_x[2] = 1
v_y[2] = 1
v_z[2] = -1
v_x[3] = -1
v_y[3] = 1
v_z[3] = -1

# Initialize cube vertices - Back face
v_x[4] = -1
v_y[4] = -1
v_z[4] = 1
v_x[5] = 1
v_y[5] = -1
v_z[5] = 1
v_x[6] = 1
v_y[6] = 1
v_z[6] = 1
v_x[7] = -1
v_y[7] = 1
v_z[7] = 1

# Main animation loop
while true then
    # Update position
    v_posx = v_posx + v_speedx
    v_posy = v_posy + v_speedy
    v_posz = v_posz + v_speedz
    
    # Update rotation angles
    v_anglex = v_anglex + v_rotspeedx
    v_angley = v_angley + v_rotspeedy
    v_anglez = v_anglez + v_rotspeedz
    
    # Position bounds checking
    if v_posx > v_boundx then
        v_speedx = -2
    endif
    if v_posx + v_boundx < 0 then
        v_speedx = 2
    endif
    
    if v_posy > v_boundy then
        v_speedy = -1.5
    endif
    if v_posy + v_boundy < 0 then
        v_speedy = 1.5
    endif
    
    if v_posz > 150 then
        v_speedz = -1
    endif
    if v_posz < 50 then
        v_speedz = 1
    endif
    
    # Randomly change rotation speeds occasionally
    v_random = random(0, 100, 0)
    if v_random < 1 then
        v_rotspeedx = random(-2, 2, 3) / 100000 * v_speedctrl
        # Limit maximum speed
        if v_rotspeedx > v_maxrotspeed then
            v_rotspeedx = v_maxrotspeed
        endif
        if v_rotspeedx < -v_maxrotspeed then
            v_rotspeedx = -v_maxrotspeed
        endif
    endif
    if v_random > 98 then
        v_rotspeedy = random(-2, 2, 3) / 100000 * v_speedctrl
        # Limit maximum speed
        if v_rotspeedy > v_maxrotspeed then
            v_rotspeedy = v_maxrotspeed
        endif
        if v_rotspeedy < -v_maxrotspeed then
            v_rotspeedy = -v_maxrotspeed
        endif
    endif
    if v_random > 48 then
        if v_random < 52 then
            v_rotspeedz = random(-2, 2, 3) / 100000 * v_speedctrl
            # Limit maximum speed
            if v_rotspeedz > v_maxrotspeed then
                v_rotspeedz = v_maxrotspeed
            endif
            if v_rotspeedz < -v_maxrotspeed then
                v_rotspeedz = -v_maxrotspeed
            endif
        endif
    endif
    
    # Check and limit current speeds
    if v_rotspeedx > v_maxrotspeed then
        v_rotspeedx = v_maxrotspeed
    endif
    if v_rotspeedx < -v_maxrotspeed then
        v_rotspeedx = -v_maxrotspeed
    endif
    if v_rotspeedy > v_maxrotspeed then
        v_rotspeedy = v_maxrotspeed
    endif
    if v_rotspeedy < -v_maxrotspeed then
        v_rotspeedy = -v_maxrotspeed
    endif
    if v_rotspeedz > v_maxrotspeed then
        v_rotspeedz = v_maxrotspeed
    endif
    if v_rotspeedz < -v_maxrotspeed then
        v_rotspeedz = -v_maxrotspeed
    endif
    
    begin_frame
    clear()
    
    # Transform and project all points
    for v_i in (0, 7, 1) then
        # Start with original point
        v_px = v_x[v_i]
        v_py = v_y[v_i]
        v_pz = v_z[v_i]
        
        # Rotate around X axis
        v_tempy = v_py
        v_tempz = v_pz
        v_py = v_tempy * cos(v_anglex) - v_tempz * sin(v_anglex)
        v_pz = v_tempy * sin(v_anglex) + v_tempz * cos(v_anglex)
        
        # Rotate around Y axis
        v_tempx = v_px
        v_tempz = v_pz
        v_px = v_tempx * cos(v_angley) + v_tempz * sin(v_angley)
        v_pz = -v_tempx * sin(v_angley) + v_tempz * cos(v_angley)
        
        # Rotate around Z axis
        v_tempx = v_px
        v_tempy = v_py
        v_px = v_tempx * cos(v_anglez) - v_tempy * sin(v_anglez)
        v_py = v_tempx * sin(v_anglez) + v_tempy * cos(v_anglez)
        
        # Scale and translate
        v_px = v_px * v_size + v_posx
        v_py = v_py * v_size + v_posy
        v_pz = v_pz * v_size + v_posz
        
        # Perspective projection
        v_scale = v_depth / (v_depth + v_pz)
        v_screenx[v_i] = v_px * v_scale + v_centerx
        v_screeny[v_i] = v_py * v_scale + v_centery
    endfor v_i
    
    # Draw front face
    draw_line(v_screenx[0], v_screeny[0], v_screenx[1], v_screeny[1], blue, 100)
    draw_line(v_screenx[1], v_screeny[1], v_screenx[2], v_screeny[2], blue, 100)
    draw_line(v_screenx[2], v_screeny[2], v_screenx[3], v_screeny[3], blue, 100)
    draw_line(v_screenx[3], v_screeny[3], v_screenx[0], v_screeny[0], blue, 100)
    
    # Draw back face
    draw_line(v_screenx[4], v_screeny[4], v_screenx[5], v_screeny[5], cyan, 100)
    draw_line(v_screenx[5], v_screeny[5], v_screenx[6], v_screeny[6], cyan, 100)
    draw_line(v_screenx[6], v_screeny[6], v_screenx[7], v_screeny[7], cyan, 100)
    draw_line(v_screenx[7], v_screeny[7], v_screenx[4], v_screeny[4], cyan, 100)
    
    # Draw connecting edges
    draw_line(v_screenx[0], v_screeny[0], v_screenx[4], v_screeny[4], light_blue, 100)
    draw_line(v_screenx[1], v_screeny[1], v_screenx[5], v_screeny[5], light_blue, 100)
    draw_line(v_screenx[2], v_screeny[2], v_screenx[6], v_screeny[6], light_blue, 100)
    draw_line(v_screenx[3], v_screeny[3], v_screenx[7], v_screeny[7], light_blue, 100)
    
    end_frame
    rest(v_resttime)
endwhile