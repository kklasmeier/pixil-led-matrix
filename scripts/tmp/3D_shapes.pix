# 3D Shape Animation with Multiple Shapes
# Global animation controls
v_speedctrl = 20
v_maxrotspeed = 0.1
v_resttime = 0.02
v_shapetime = 20
v_pausetime = 2
v_timeout = 10000

# Rotation variables
v_anglex = 0
v_angley = 0
v_anglez = 0
v_rotspeedx = 0.00001 * v_speedctrl
v_rotspeedy = 0.000015 * v_speedctrl
v_rotspeedz = 0.000008 * v_speedctrl

# Position and movement
v_centerx = 32
v_centery = 32
v_size = 10
v_depth = 200
v_posx = 0
v_posy = 0
v_posz = 100
v_speedx = 2
v_speedy = 1.5
v_speedz = 1
v_boundx = 40  # Increased from 30
v_boundy = 40  # Increased from 30
v_boundz = 50

# Arrays for vertex storage and calculations
create_array(v_screenx, 8)
create_array(v_screeny, 8)
create_array(v_x, 8)
create_array(v_y, 8)
create_array(v_z, 8)

# Display boundaries
v_displaywidth = 64
v_displayheight = 64
v_displaymargin = 1  # Small margin to ensure visibility

# Initialize tetrahedron vertices
def init_tetrahedron {
    # Reset vertices count
    v_vertcount = 4
    v_edgecount = 6

    # Base triangle
    v_x[0] = 1
    v_y[0] = 0
    v_z[0] = -0.5774
    
    v_x[1] = -0.5
    v_y[1] = 0.866
    v_z[1] = -0.5774
    
    v_x[2] = -0.5
    v_y[2] = -0.866
    v_z[2] = -0.5774
    
    # Top point
    v_x[3] = 0
    v_y[3] = 0
    v_z[3] = 1.7321
}

# Initialize octahedron vertices
def init_octahedron {
    # Reset vertices count
    v_vertcount = 6
    v_edgecount = 12
    
    # Top point
    v_x[0] = 0
    v_y[0] = 0
    v_z[0] = 1.5
    
    # Middle square
    v_x[1] = 1
    v_y[1] = 0
    v_z[1] = 0
    
    v_x[2] = 0
    v_y[2] = 1
    v_z[2] = 0
    
    v_x[3] = -1
    v_y[3] = 0
    v_z[3] = 0
    
    v_x[4] = 0
    v_y[4] = -1
    v_z[4] = 0
    
    # Bottom point
    v_x[5] = 0
    v_y[5] = 0
    v_z[5] = -1.5
}

# Initialize pyramid vertices
def init_pyramid {
    # Reset vertices count
    v_vertcount = 5
    v_edgecount = 8
    
    # Square base
    v_x[0] = -1
    v_y[0] = -1
    v_z[0] = -1
    
    v_x[1] = 1
    v_y[1] = -1
    v_z[1] = -1
    
    v_x[2] = 1
    v_y[2] = 1
    v_z[2] = -1
    
    v_x[3] = -1
    v_y[3] = 1
    v_z[3] = -1
    
    # Top point
    v_x[4] = 0
    v_y[4] = 0
    v_z[4] = 1.5
}

# Draw tetrahedron edges
def draw_tetrahedron {
    # Base triangle
    draw_line(v_screenx[0], v_screeny[0], v_screenx[1], v_screeny[1], magenta)
    draw_line(v_screenx[1], v_screeny[1], v_screenx[2], v_screeny[2], magenta)
    draw_line(v_screenx[2], v_screeny[2], v_screenx[0], v_screeny[0], magenta)
    
    # Edges to top point
    draw_line(v_screenx[0], v_screeny[0], v_screenx[3], v_screeny[3], purple)
    draw_line(v_screenx[1], v_screeny[1], v_screenx[3], v_screeny[3], purple)
    draw_line(v_screenx[2], v_screeny[2], v_screenx[3], v_screeny[3], purple)
}

# Draw octahedron edges
def draw_octahedron {
    # Edges from top point to middle square
    draw_line(v_screenx[0], v_screeny[0], v_screenx[1], v_screeny[1], cyan)
    draw_line(v_screenx[0], v_screeny[0], v_screenx[2], v_screeny[2], cyan)
    draw_line(v_screenx[0], v_screeny[0], v_screenx[3], v_screeny[3], cyan)
    draw_line(v_screenx[0], v_screeny[0], v_screenx[4], v_screeny[4], cyan)
    
    # Middle square
    draw_line(v_screenx[1], v_screeny[1], v_screenx[2], v_screeny[2], blue)
    draw_line(v_screenx[2], v_screeny[2], v_screenx[3], v_screeny[3], blue)
    draw_line(v_screenx[3], v_screeny[3], v_screenx[4], v_screeny[4], blue)
    draw_line(v_screenx[4], v_screeny[4], v_screenx[1], v_screeny[1], blue)
    
    # Edges from bottom point to middle square
    draw_line(v_screenx[5], v_screeny[5], v_screenx[1], v_screeny[1], light_blue)
    draw_line(v_screenx[5], v_screeny[5], v_screenx[2], v_screeny[2], light_blue)
    draw_line(v_screenx[5], v_screeny[5], v_screenx[3], v_screeny[3], light_blue)
    draw_line(v_screenx[5], v_screeny[5], v_screenx[4], v_screeny[4], light_blue)
}

# Draw pyramid edges
def draw_pyramid {
    # Base square
    draw_line(v_screenx[0], v_screeny[0], v_screenx[1], v_screeny[1], green)
    draw_line(v_screenx[1], v_screeny[1], v_screenx[2], v_screeny[2], green)
    draw_line(v_screenx[2], v_screeny[2], v_screenx[3], v_screeny[3], green)
    draw_line(v_screenx[3], v_screeny[3], v_screenx[0], v_screeny[0], green)
    
    # Edges to top point
    draw_line(v_screenx[0], v_screeny[0], v_screenx[4], v_screeny[4], lime)
    draw_line(v_screenx[1], v_screeny[1], v_screenx[4], v_screeny[4], lime)
    draw_line(v_screenx[2], v_screeny[2], v_screenx[4], v_screeny[4], lime)
    draw_line(v_screenx[3], v_screeny[3], v_screenx[4], v_screeny[4], lime)
}

# Animation sequence for any shape
def animate_shape {
    # Reset rotation angles
    v_anglex = 0
    v_angley = 0
    v_anglez = 0
    
    # Reset position
    v_posx = 0
    v_posy = 0
    v_posz = 100
    
    # Reset speeds
    v_rotspeedx = 0.00001 * v_speedctrl
    v_rotspeedy = 0.000015 * v_speedctrl
    v_rotspeedz = 0.000008 * v_speedctrl
    
    # Animation loop
    v_starttime = 0
    while v_starttime < v_shapetime then
        v_starttime = v_starttime + v_resttime
        
        # Update position
        v_posx = v_posx + v_speedx
        v_posy = v_posy + v_speedy
        v_posz = v_posz + v_speedz
        
        # Update rotation angles
        v_anglex = v_anglex + v_rotspeedx
        v_angley = v_angley + v_rotspeedy
        v_anglez = v_anglez + v_rotspeedz
        
        # Calculate effective size in each direction (reduced influence)
        v_effectivex = (v_maxbound[0] - v_minbound[0]) / 3  # Reduced from 2 to 3
        v_effectivey = (v_maxbound[1] - v_minbound[1]) / 3
        v_effectivez = (v_maxbound[2] - v_minbound[2]) / 3
        
        # Position bounds checking with dynamic boundaries
        if v_posx > v_boundx - v_effectivex then
            v_speedx = -2.5  # Slightly increased bounce speed
        endif
        if v_posx < -v_boundx + v_effectivex then
            v_speedx = 2.5
        endif
        
        if v_posy > v_boundy - v_effectivey then
            v_speedy = -2  # Slightly increased bounce speed
        endif
        if v_posy < -v_boundy + v_effectivey then
            v_speedy = 2
        endif
        
        if v_posz > 150 - v_effectivez then
            v_speedz = -1.5  # Slightly increased bounce speed
        endif
        if v_posz < 50 + v_effectivez then
            v_speedz = 1.5
        endif
        
        # Randomly change rotation speeds occasionally
        v_random = random(0, 100, 0)
        if v_random < 1 then
            v_rotspeedx = random(-2, 2, 3) / 100000 * v_speedctrl
        endif
        if v_random > 98 then
            v_rotspeedy = random(-2, 2, 3) / 100000 * v_speedctrl
        endif
        if v_random > 48 then
            if v_random < 52 then
                v_rotspeedz = random(-2, 2, 3) / 100000 * v_speedctrl
            endif
        endif
        
        # Limit rotation speeds
        if v_rotspeedx > v_maxrotspeed then
            v_rotspeedx = v_maxrotspeed
        endif
        if v_rotspeedx < -v_maxrotspeed then
            v_rotspeedx = -v_maxrotspeed
        endif
        if v_rotspeedy > v_maxrotspeed then
            v_rotspeedy = v_maxrotspeed
        endif
        if v_rotspeedy < -v_maxrotspeed then
            v_rotspeedy = -v_maxrotspeed
        endif
        if v_rotspeedz > v_maxrotspeed then
            v_rotspeedz = v_maxrotspeed
        endif
        if v_rotspeedz < -v_maxrotspeed then
            v_rotspeedz = -v_maxrotspeed
        endif
        
        begin_frame
        clear()
        
        # Transform and project all points
        # Initialize min/max screen coordinates
        v_minscreenx = v_displaywidth
        v_maxscreenx = 0
        v_minscreeny = v_displayheight
        v_maxscreeny = 0
        
        for v_i in (0, v_vertcount - 1, 1) then
            # Start with original point
            v_px = v_x[v_i]
            v_py = v_y[v_i]
            v_pz = v_z[v_i]
            
            # Rotate around X axis
            v_tempy = v_py
            v_tempz = v_pz
            v_py = v_tempy * cos(v_anglex) - v_tempz * sin(v_anglex)
            v_pz = v_tempy * sin(v_anglex) + v_tempz * cos(v_anglex)
            
            # Rotate around Y axis
            v_tempx = v_px
            v_tempz = v_pz
            v_px = v_tempx * cos(v_angley) + v_tempz * sin(v_angley)
            v_pz = -v_tempx * sin(v_angley) + v_tempz * cos(v_angley)
            
            # Rotate around Z axis
            v_tempx = v_px
            v_tempy = v_py
            v_px = v_tempx * cos(v_anglez) - v_tempy * sin(v_anglez)
            v_py = v_tempx * sin(v_anglez) + v_tempy * cos(v_anglez)
            
            # Scale and translate
            v_px = v_px * v_size + v_posx
            v_py = v_py * v_size + v_posy
            v_pz = v_pz * v_size + v_posz
            
            # Perspective projection
            v_scale = v_depth / (v_depth + v_pz)
            v_screenx[v_i] = v_px * v_scale + v_centerx
            v_screeny[v_i] = v_py * v_scale + v_centery
            
            # Track min/max screen coordinates
            if v_screenx[v_i] < v_minscreenx then
                v_minscreenx = v_screenx[v_i]
            endif
            if v_screenx[v_i] > v_maxscreenx then
                v_maxscreenx = v_screenx[v_i]
            endif
            if v_screeny[v_i] < v_minscreeny then
                v_minscreeny = v_screeny[v_i]
            endif
            if v_screeny[v_i] > v_maxscreeny then
                v_maxscreeny = v_screeny[v_i]
            endif
        endfor v_i
        
        # Check for screen boundary collisions using actual shape extents
        if v_maxscreenx > v_displaywidth - v_displaymargin then
            v_speedx = -2.5
            if v_rotspeedz > 0 then
                v_rotspeedz = -v_rotspeedz
            endif
        endif
        if v_minscreenx < v_displaymargin then
            v_speedx = 2.5
            if v_rotspeedz < 0 then
                v_rotspeedz = -v_rotspeedz
            endif
        endif
        
        if v_maxscreeny > v_displayheight - v_displaymargin then
            v_speedy = -2
            if v_rotspeedx > 0 then
                v_rotspeedx = -v_rotspeedx
            endif
        endif
        if v_minscreeny < v_displaymargin then
            v_speedy = 2
            if v_rotspeedx < 0 then
                v_rotspeedx = -v_rotspeedx
            endif
        endif
        
        # Z-axis boundary check (keeps shape visible)
        if v_posz > 150 then
            v_speedz = -1.5
            if v_rotspeedy > 0 then
                v_rotspeedy = -v_rotspeedy
            endif
        endif
        if v_posz < 50 then
            v_speedz = 1.5
            if v_rotspeedy < 0 then
                v_rotspeedy = -v_rotspeedy
            endif
        endif
        
        # Draw current shape
        if v_vertcount == 4 then
            call draw_tetrahedron
        endif
        if v_vertcount == 6 then
            call draw_octahedron
        endif
        if v_vertcount == 5 then
            call draw_pyramid
        endif
        
        end_frame
        rest(v_resttime)
    endwhile
}

# Main animation loop
while true then
    # Tetrahedron sequence
    call init_tetrahedron
    call animate_shape
    clear()
    rest(v_pausetime)
    
    # Octahedron sequence
    call init_octahedron
    call animate_shape
    clear()
    rest(v_pausetime)
    
    # Pyramid sequence
    call init_pyramid
    call animate_shape
    clear()
    rest(v_pausetime)
endwhile