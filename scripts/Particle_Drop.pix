# Particle Fall Effect with Bottom Piling
# Particles gather at top, fall with physics, and pile up

# === SETTINGS ===
v_num_particles = 100           # Total number of particles
v_gravity = 0.2                # Gravity effect
v_initial_gather_time = 100    # How long to gather at top
v_drift_range = 0.2           # Max horizontal drift

# === PARTICLE ARRAYS ===
create_array(v_x, v_num_particles)      # X positions
create_array(v_y, v_num_particles)      # Y positions
create_array(v_dx, v_num_particles)     # X velocity
create_array(v_dy, v_num_particles)     # Y velocity
create_array(v_state, v_num_particles)  # State: 0=gathering, 1=falling, 2=settled
create_array(v_settled_y, 64)           # Track settled height at each x position

# Initialize particles at random x positions near top
v_i = 0
while v_i < v_num_particles then
    v_x[v_i] = random(0, 63, 0)        # Random x across screen
    v_y[v_i] = random(-20, 0, 0)       # Start above screen
    v_dx[v_i] = 0
    v_dy[v_i] = 0
    v_state[v_i] = 0                   # Start in gathering state
    v_i = v_i + 1
endwhile

# Initialize settled heights to bottom
v_i = 0
while v_i < 64 then
    v_settled_y[v_i] = 63              # Bottom of screen
    v_i = v_i + 1
endwhile

# Animation variables
v_time = 0                             # Track time for stages
v_mass_drop = 0                        # Mass drop trigger

# Main animation loop
while true then
    begin_frame
    
    v_time = v_time + 1
    
    # Update particles
    v_i = 0
    while v_i < v_num_particles then
        if v_state[v_i] == 0 then
            # Gathering at top - slight jitter
            if v_y[v_i] < 5 then
                v_y[v_i] = v_y[v_i] + 0.2
            endif
            v_x[v_i] = v_x[v_i] + random(-0.2, 0.2, 1)
            
            # Plot gathering particle (stays lit)
            plot(v_x[v_i], v_y[v_i], white:70)
            
            # Start dropping randomly or if mass drop triggered
            if v_time > v_initial_gather_time then
                if random(0, 100, 0) < 5 or v_mass_drop == 1 then
                    v_state[v_i] = 1              # Change to falling state
                    v_dx[v_i] = random(-v_drift_range, v_drift_range, 2)
                    v_dy[v_i] = 0
                    # Move particle off screen to start fall
                    v_y[v_i] = -2                 # Start just above screen
                endif
            endif
            
        elseif v_state[v_i] == 1 then
            # Falling
            v_dy[v_i] = v_dy[v_i] + v_gravity
            v_x[v_i] = v_x[v_i] + v_dx[v_i]
            v_y[v_i] = v_y[v_i] + v_dy[v_i]
            
            # Bounce off walls
            if v_x[v_i] < 0 then
                v_x[v_i] = 0
                v_dx[v_i] = -v_dx[v_i] * 0.5
            endif
            if v_x[v_i] > 63 then
                v_x[v_i] = 63
                v_dx[v_i] = -v_dx[v_i] * 0.5
            endif
            
            # Check for settling
            v_settled_level = v_settled_y[round(v_x[v_i])]
            if v_y[v_i] >= v_settled_level - 1 then
                v_y[v_i] = v_settled_level - 1
                v_state[v_i] = 2
                # Update settled height at this x position
                v_settled_y[round(v_x[v_i])] = v_settled_level - 1
            endif
        endif
        
        # Draw particle with intensity based on velocity
        if v_state[v_i] == 1 then
            # Falling particles - create trail effect
            v_intensity = 50 + abs(v_dy[v_i]) * 10
            if v_intensity > 99 then
                v_intensity = 99
            endif
            # Duration around 100-300ms for falling particles
            v_duration = 100 + abs(v_dy[v_i]) * 50
            plot(v_x[v_i], v_y[v_i], white:{v_intensity}, v_duration)
        else
            # Gathering at top or settled at bottom - stay lit (duration = 0)
            plot(v_x[v_i], v_y[v_i], white:70)  # No duration = stays lit
        endif
        
        v_i = v_i + 1
    endwhile
    
    # Trigger mass drop after gather time
    if v_time == v_initial_gather_time then
        v_mass_drop = 1
    endif
    
    end_frame
    rest(0.02)
endwhile