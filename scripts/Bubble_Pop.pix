# Enhanced Bubble Popper
clear()

# Define small simple bubble sprite
define_sprite(small_bubble, 5, 5)
    draw_circle(2, 2, 2, cyan, 80, false)
    draw_circle(1, 1, 1, white, 50, false)
endsprite

# Define medium standard bubble sprite
define_sprite(bubble, 9, 9)
    draw_circle(4, 4, 4, cyan, 80, false)
    draw_circle(4, 4, 3, azure, 60, false)
    draw_circle(3, 3, 1, white, 90, false)
endsprite

# Define large fancy bubble sprite
define_sprite(large_bubble, 13, 13)
    draw_circle(6, 6, 6, azure, 70, false)
    draw_circle(6, 6, 5, sky_blue, 60, false)
    draw_circle(6, 6, 4, cyan, 50, false)
    draw_circle(4, 4, 2, white, 80, false)
endsprite

# Define bubble trail
define_sprite(trail, 5, 5)
    draw_circle(2, 2, 2, azure, 30, false)
endsprite

# Define different pop sprites for different bubble sizes
define_sprite(small_pop, 7, 7)
    draw_line(1, 1, 5, 5, yellow, 100)
    draw_line(5, 1, 1, 5, yellow, 100)
    draw_line(0, 3, 6, 3, yellow, 100)
    draw_line(3, 0, 3, 6, yellow, 100)
endsprite

define_sprite(pop, 11, 11)
    # Create a more elaborate explosion
    draw_line(1, 1, 9, 9, yellow, 100)
    draw_line(9, 1, 1, 9, yellow, 100)
    draw_line(0, 5, 10, 5, yellow, 100)
    draw_line(5, 0, 5, 10, yellow, 100)
    draw_circle(5, 5, 3, orange, 80, false)
endsprite

define_sprite(large_pop, 15, 15)
    # Create a more elaborate explosion for large bubbles
    draw_line(1, 1, 13, 13, yellow, 100)
    draw_line(13, 1, 1, 13, yellow, 100)
    draw_line(0, 7, 14, 7, yellow, 100)
    draw_line(7, 0, 7, 14, yellow, 100)
    draw_circle(7, 7, 5, orange, 80, false)
    draw_circle(7, 7, 3, yellow, 90, false)
endsprite

# Define ripple effect
define_sprite(ripple, 15, 15)
    draw_circle(7, 7, 7, cyan, 30, false)
    draw_circle(7, 7, 6, azure, 20, false)
    draw_circle(7, 7, 5, sky_blue, 10, false)
endsprite

# Define a cleanup procedure
def cleanup_sprites {
    # Hide all pop sprites (all sizes)
    for v_c in (50, 65, 1) then
        hide_sprite(small_pop, v_c)
        hide_sprite(pop, v_c)
        hide_sprite(large_pop, v_c)
    endfor v_c
    
    # Hide all ripple sprites
    for v_c in (200, 250, 1) then
        hide_sprite(ripple, v_c)
    endfor v_c
    
    # Hide all trail sprites
    for v_c in (100, 150, 1) then
        hide_sprite(trail, v_c)
    endfor v_c
}

# Create bubble positions and states
v_num_bubbles = 6
create_array(v_bubble_x, v_num_bubbles)
create_array(v_bubble_y, v_num_bubbles)
create_array(v_bubble_speed, v_num_bubbles)
create_array(v_bubble_active, v_num_bubbles)
create_array(v_bubble_size, v_num_bubbles)
create_array(v_bubble_color, v_num_bubbles)
create_array(v_bubble_wobble, v_num_bubbles)
create_array(v_bubble_wobble_dir, v_num_bubbles)
create_array(v_trail_timer, v_num_bubbles)
create_array(v_bubble_type, v_num_bubbles)

# Create colors for bubbles
create_array(v_colors, 5, string)
v_colors[0] = "cyan"
v_colors[1] = "azure"
v_colors[2] = "sky_blue"
v_colors[3] = "turquoise"
v_colors[4] = "teal"

# Initialize bubbles with more guaranteed variety
v_small_count = 0
v_medium_count = 0
v_large_count = 0

for v_i in (0, v_num_bubbles - 1, 1) then
    v_bubble_x[v_i] = random(5, 58, 0)
    v_bubble_y[v_i] = random(60, 120, 0)
    
    # Ensure we have a mix of all three types
    if v_i < 5 then
        v_bubble_type[v_i] = 0  # Small
        v_small_count = v_small_count + 1
    elseif v_i < 10 then
        v_bubble_type[v_i] = 1  # Medium
        v_medium_count = v_medium_count + 1
    else
        v_bubble_type[v_i] = 2  # Large
        v_large_count = v_large_count + 1
    endif
    
    # Adjust speed based on size for realistic physics
    if v_bubble_type[v_i] == 0 then
        # Small bubbles move faster
        v_bubble_speed[v_i] = random(2.2, 2.8, 1)
    elseif v_bubble_type[v_i] == 1 then
        # Medium bubbles medium speed
        v_bubble_speed[v_i] = random(2.2, 2.8, 1)
    else
        # Large bubbles move slower but not too slow
        v_bubble_speed[v_i] = random(2.2, 2.8, 1))
    endif
    
    v_bubble_active[v_i] = 1
    v_bubble_size[v_i] = random(0.7, 1.6, 1)
    v_bubble_color[v_i] = floor(random(0, 4, 0))
    v_bubble_wobble[v_i] = 0
    v_bubble_wobble_dir[v_i] = 1
    v_trail_timer[v_i] = 0
    
    # Show appropriate bubble sprite based on type
    if v_bubble_type[v_i] == 0 then
        show_sprite(small_bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
    elseif v_bubble_type[v_i] == 1 then
        show_sprite(bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
    else
        show_sprite(large_bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
    endif
endfor v_i

# Debug print
print(f"Initial distribution: Small={v_small_count}, Medium={v_medium_count}, Large={v_large_count}")

# Draw background water effect
begin_frame
    for v_y in (0, 63, 8) then
        draw_line(0, v_y, 63, v_y, blue, 10)
    endfor v_y
end_frame

# Main animation loop
v_time = 0
v_trail_id = 100
v_ripple_id = 200
create_array(v_pop_timer, v_num_bubbles)
create_array(v_ripple_timer, v_num_bubbles)

# Initialize timers
for v_i in (0, v_num_bubbles - 1, 1) then
    v_pop_timer[v_i] = 0
    v_ripple_timer[v_i] = 0
endfor v_i

# Run cleanup once at start to ensure no leftover sprites
call cleanup_sprites

while true then
    v_time = v_time + 1
    
    # Move bubbles upward with wobble effect
    begin_frame(true)
    for v_i in (0, v_num_bubbles - 1, 1) then
        if v_bubble_active[v_i] == 1 then
            # Create wobble motion
            v_bubble_wobble[v_i] = v_bubble_wobble[v_i] + (v_bubble_wobble_dir[v_i] * 0.2)
            
            # Change wobble direction randomly
            if random(0, 100, 0) < 5 then
                v_bubble_wobble_dir[v_i] = v_bubble_wobble_dir[v_i] * -1
            endif
            
            # Limit wobble amount
            if v_bubble_wobble[v_i] > 2 then
                v_bubble_wobble_dir[v_i] = -1
            elseif v_bubble_wobble[v_i] < -2 then
                v_bubble_wobble_dir[v_i] = 1
            endif
            
            # Calculate new position with wobble
            v_bubble_y[v_i] = v_bubble_y[v_i] - v_bubble_speed[v_i]
            v_new_x = v_bubble_x[v_i] + v_bubble_wobble[v_i]
            
            # Move the appropriate bubble sprite
            if v_bubble_type[v_i] == 0 then
                move_sprite(small_bubble, v_new_x, v_bubble_y[v_i], v_i)
            elseif v_bubble_type[v_i] == 1 then
                move_sprite(bubble, v_new_x, v_bubble_y[v_i], v_i)
            else
                move_sprite(large_bubble, v_new_x, v_bubble_y[v_i], v_i)
            endif
            
            # Add bubble trail occasionally (not for every bubble)
            if v_i % 3 == 0 and v_bubble_type[v_i] > 0 then
                v_trail_timer[v_i] = v_trail_timer[v_i] + 1
                if v_trail_timer[v_i] >= 12 then
                    show_sprite(trail, v_new_x + 2, v_bubble_y[v_i] + 5, v_trail_id)
                    v_trail_id = v_trail_id + 1
                    if v_trail_id > 150 then
                        v_trail_id = 100
                    endif
                    v_trail_timer[v_i] = 0
                endif
            endif
            
            # If bubble reaches top, reset position
            if v_bubble_y[v_i] < -10 then
                v_bubble_y[v_i] = random(60, 120, 0)
                v_bubble_x[v_i] = random(5, 58, 0)
                
                # Move the appropriate bubble sprite
                if v_bubble_type[v_i] == 0 then
                    move_sprite(small_bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
                elseif v_bubble_type[v_i] == 1 then
                    move_sprite(bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
                else
                    move_sprite(large_bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
                endif
                
                # Occasionally change bubble type when reappearing
                if random(0, 100, 0) < 30 then
                    # Hide current sprite type
                    if v_bubble_type[v_i] == 0 then
                        hide_sprite(small_bubble, v_i)
                    elseif v_bubble_type[v_i] == 1 then
                        hide_sprite(bubble, v_i)
                    else
                        hide_sprite(large_bubble, v_i)
                    endif
                    
                    # Set new bubble type
                    v_bubble_type[v_i] = floor(random(0, 3, 0))
                    
                    # Adjust speed based on new size
                    if v_bubble_type[v_i] == 0 then
                        v_bubble_speed[v_i] = random(2.0, 2.8, 1)
                    elseif v_bubble_type[v_i] == 1 then
                        v_bubble_speed[v_i] = random(2.0, 2.8, 1)
                    else
                        v_bubble_speed[v_i] = random(2.0, 2.8, 1)
                    endif
                    
                    # Show new sprite type
                    if v_bubble_type[v_i] == 0 then
                        show_sprite(small_bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
                    elseif v_bubble_type[v_i] == 1 then
                        show_sprite(bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
                    else
                        show_sprite(large_bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
                    endif
                endif
            endif
            
            # Randomly pop bubbles
            if random(0, 100, 0) < 2 then
                # Hide the appropriate bubble sprite based on type
                if v_bubble_type[v_i] == 0 then
                    hide_sprite(small_bubble, v_i)
                    show_sprite(small_pop, v_new_x - 1, v_bubble_y[v_i] - 1, v_i + 50)
                elseif v_bubble_type[v_i] == 1 then
                    hide_sprite(bubble, v_i)
                    show_sprite(pop, v_new_x - 1, v_bubble_y[v_i] - 1, v_i + 50)
                else
                    hide_sprite(large_bubble, v_i)
                    show_sprite(large_pop, v_new_x - 2, v_bubble_y[v_i] - 2, v_i + 50)
                endif
                
                # Show ripple effect sized appropriately
                if v_bubble_type[v_i] > 0 then
                    show_sprite(ripple, v_new_x - 3, v_bubble_y[v_i] - 3, v_ripple_id)
                    v_ripple_id = v_ripple_id + 1
                    if v_ripple_id > 250 then
                        v_ripple_id = 200
                    endif
                endif
                
                v_bubble_active[v_i] = 0
                v_pop_timer[v_i] = 0
                v_ripple_timer[v_i] = 0
                
                # Schedule bubble reappearance
                v_bubble_y[v_i] = random(60, 120, 0)
                v_bubble_x[v_i] = random(5, 58, 0)
                
                # Occasionally change bubble type when reappearing
                if random(0, 100, 0) < 30 then
                    v_bubble_type[v_i] = floor(random(0, 3, 0))
                    
                    # Adjust speed based on new size
                    if v_bubble_type[v_i] == 0 then
                        v_bubble_speed[v_i] = random(2.0, 2.8, 1)
                    elseif v_bubble_type[v_i] == 1 then
                        v_bubble_speed[v_i] = random(2.0, 2.8, 1)
                    else
                        v_bubble_speed[v_i] = random(2.0, 2.8, 1)
                    endif
                endif
            endif
        else
            # Track display time for pop and ripple effects
            v_pop_timer[v_i] = v_pop_timer[v_i] + 1
            v_ripple_timer[v_i] = v_ripple_timer[v_i] + 1
            
            # Hide pop effect after 5 frames
            if v_pop_timer[v_i] >= 5 then
                if v_bubble_type[v_i] == 0 then
                    hide_sprite(small_pop, v_i + 50)
                elseif v_bubble_type[v_i] == 1 then
                    hide_sprite(pop, v_i + 50)
                else
                    hide_sprite(large_pop, v_i + 50)
                endif
            endif
            
            # Hide ripple effect after 10 frames
            if v_ripple_timer[v_i] >= 10 then
                hide_sprite(ripple, v_ripple_id - 1)
            endif
            
            # Reactivate bubble after effects are done
            if v_pop_timer[v_i] >= 15 then
                # Show appropriate bubble sprite based on type
                if v_bubble_type[v_i] == 0 then
                    show_sprite(small_bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
                elseif v_bubble_type[v_i] == 1 then
                    show_sprite(bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
                else
                    show_sprite(large_bubble, v_bubble_x[v_i], v_bubble_y[v_i], v_i)
                endif
                v_bubble_active[v_i] = 1
            endif
        endif
    endfor v_i
    
    # Clean up all sprites more aggressively to prevent buildup
    if v_time % 25 == 0 then
        call cleanup_sprites
    endif
    
    # Clean up trails more frequently
    if v_time % 15 == 0 then
        for v_t in (100, 150, 1) then
            hide_sprite(trail, v_t)
        endfor v_t
    endif
    
    end_frame
    rest(0.03)
endwhile