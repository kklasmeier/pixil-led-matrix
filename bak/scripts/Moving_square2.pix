# Define a test sprite
define_sprite(test_sprite, 13, 13)
    draw_circle(6, 6, 6, red, true)      # Red filled circle
    draw_circle(6, 6, 4, yellow, true)   # Inner yellow circle
endsprite

# Show sprite at starting position
show_sprite(test_sprite, 0, 0)

# Movement speed
v_speed = 0.01

# Define corner positions
v_top_left_x = 0
v_top_left_y = 0
v_top_right_x = 63
v_top_right_y = 0
v_bottom_left_x = 0
v_bottom_left_y = 63
v_bottom_right_x = 63
v_bottom_right_y = 63

# Initialize current position (starting point: top-left corner)
v_current_x = v_top_left_x
v_current_y = v_top_left_y

# Main loop
for v_loop in (1, 10, 1)
    # Randomly choose the direction to travel: 1 = top-right, 2 = bottom-left, 3 = bottom-right
    v_direction = random(1, 3, 0)

    # Set target corner based on direction
    if v_direction == 1 then
        v_target_x = v_top_right_x
        v_target_y = v_top_right_y
        v_dx = 1  # Moving right
        v_dy = 0  # No vertical change
    elseif v_direction == 2 then
        v_target_x = v_bottom_left_x
        v_target_y = v_bottom_left_y
        v_dx = 0  # No horizontal change
        v_dy = 1  # Moving down
    else
        v_target_x = v_bottom_right_x
        v_target_y = v_bottom_right_y
        v_dx = 1  # Moving diagonally right
        v_dy = 1  # Moving diagonally down
    endif

    # Movement loop: use v_i to move step by step
    for v_i in (1, 16, 1)  # 16 steps for consistency
        v_x1 = v_current_x + (v_dx * v_i * 4)
        v_y1 = v_current_y + (v_dy * v_i * 4)

        # Clamp to ensure it doesn't exceed target
        if v_x1 > v_target_x then
            v_x1 = v_target_x
        endif
        if v_y1 > v_target_y then
            v_y1 = v_target_y
        endif

        move_sprite(test_sprite, v_x1, v_y1)
        rest(v_speed)
    endfor v_i

    # Update the current position to the target
    v_current_x = v_target_x
    v_current_y = v_target_y
endloop v_loop
