
throttle(0)

# Initialize both points at different locations
v_x1 = 10
v_y1 = 30
v_x2 = 40
v_y2 = 20

# Independent movement vectors for both points with different speeds
v_dx1 = 2.5
v_dy1 = 1.8
v_dx2 = -1.9
v_dy2 = 2.2

# Color cycling variables
v_color_index = 0
v_trail_duration = 600
v_color = "red"  # Initialize color variable outside procedure

# Animation control
v_running = true

# Update colors based on index
def update_color {
    if v_color_index == 0 then
        v_color = "red"
    endif
    if v_color_index == 1 then
        v_color = "blue"
    endif
    if v_color_index == 2 then
        v_color = "green"
    endif
    if v_color_index == 3 then
        v_color = "purple"
    endif
    if v_color_index == 4 then
        v_color = "cyan"
    endif
}

# Main animation loop
while v_running then
    
    # Update positions with different velocities
    v_x1 = v_x1 + v_dx1
    v_y1 = v_y1 + v_dy1
    v_x2 = v_x2 + v_dx2
    v_y2 = v_y2 + v_dy2
    
    # Bounce point 1 off edges with different angles
    if v_x1 <= 0 then
        v_x1 = 0
        v_dx1 = 2.5  # Different speed after bounce
    endif
    if v_x1 >= 63 then
        v_x1 = 63
        v_dx1 = -2.5
    endif
    if v_y1 <= 0 then
        v_y1 = 0
        v_dy1 = 1.8
    endif
    if v_y1 >= 63 then
        v_y1 = 63
        v_dy1 = -1.8
    endif
    
    # Bounce point 2 off edges with different angles
    if v_x2 <= 0 then
        v_x2 = 0
        v_dx2 = 1.9
    endif
    if v_x2 >= 63 then
        v_x2 = 63
        v_dx2 = -1.9
    endif
    if v_y2 <= 0 then
        v_y2 = 0
        v_dy2 = 2.2
    endif
    if v_y2 >= 63 then
        v_y2 = 63
        v_dy2 = -2.2
    endif
    
    # Update color
    call update_color
    v_color_index = v_color_index + 1
    if v_color_index > 99 then
        v_color_index = 0
    endif
    
    # Draw the line with current color and trail effect
    draw_line(v_x1, v_y1, v_x2, v_y2, {v_color_index}:75, v_trail_duration)
    
    rest(0.05)  # Control animation speed
endwhile