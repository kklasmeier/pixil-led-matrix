# Starburst Pattern Lightshow
# Initialize base parameters
v_centerX = 32
v_centerY = 32
v_radius = 25
v_angle = 0
v_color_base = 45
v_fade_start = 99

# Animation control variables
v_frame_mode = 1
v_speed = 5
v_rest_time = 0.05
v_effect_duration = 0
v_effect_max_time = 2   # Change effect every 3 iterations
v_burnout_enabled = 0
v_burnout_min = 100
v_burnout_max = 500

# Starburst specific variables
v_wave_amp = 10        # Wave amplitude for ray length variation
v_wave_freq = 4        # Frequency of wave pattern in rays
v_ray_spacing = 5      # Angle between rays (smaller = more rays)
v_ray_step = 2         # Step size along rays (smaller = denser)
throttle(.3)
while 1 then
    # Change effects periodically
    if v_effect_duration > v_effect_max_time then
        v_effect_duration = 0
        
        # Random frame mode
        if random(0, 100, 0) > 80 then
            v_frame_mode = 1
        else
            v_frame_mode = 0
        endif
        
        # Random variations
        v_speed = random(2, 8, 0)
        v_wave_amp = random(5, 15, 0)
        v_wave_freq = random(2, 6, 0)
        v_ray_spacing = random(3, 8, 0)  # Vary density of rays
        
        # Random burnout
        if random(0, 100, 0) > 70 then
            v_burnout_enabled = 1
            v_rest_time = 0.01
        else
            v_burnout_enabled = 0
            v_rest_time = 0.05
        endif
    endif

    clear




    # Starburst Pattern
    for v_a in (0, 360, v_ray_spacing) then
        # Calculate dynamic ray length with wave pattern
        v_r = v_radius + v_wave_amp * sin(v_a * v_wave_freq + v_angle)

        if v_frame_mode == 1 then
            begin_frame(True)
        endif
    

        # Draw points along each ray
        for v_d in (0, v_r, v_ray_step) then
            v_x = v_centerX + v_d * cos(v_a)
            v_y = v_centerY + v_d * sin(v_a)
            
            # Intensity fades along ray length
            v_intensity = v_fade_start * (1 - v_d / v_r)
            
            if v_burnout_enabled == 1 then
                plot(v_x, v_y, {v_color_base}:{v_intensity}, random(v_burnout_min, v_burnout_max, 0))
            else
                plot(v_x, v_y, {v_color_base}:{v_intensity})
            endif
        endfor v_d

        if v_frame_mode == 1 then
            end_frame
        endif

    endfor v_a


    # Update animation
    v_angle = v_angle + v_speed
    v_color_base = v_color_base + 1
    if v_color_base > 99 then
        v_color_base = 1
    endif

    v_effect_duration = v_effect_duration + 1
    # rest(v_rest_time)
    #rest(random(v_rest_time, v_rest_time + .75, 2))
endwhile