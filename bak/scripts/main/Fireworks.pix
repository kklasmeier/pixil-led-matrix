# Fireworks Display
# Launches rockets that explode into particle effects

throttle(.9)

# === DISPLAY SETTINGS ===
v_screen_width = 64      # Display width
v_screen_height = 64     # Display height

# === PARTICLE SETTINGS ===
v_num_particles = random(15, 40, 0)  # Number of particles per firework
v_gravity = 0.2                      # Gravity effect (higher = faster fall)
v_fade_rate = random(3, 6, 1)        # Fade speed (higher = shorter duration)
v_initial_brightness = 99            # Starting brightness (1-99)

# === EXPLOSION SETTINGS ===
v_min_speed = 0.5                    # Minimum particle speed
v_max_speed = random(1, 6, 1)        # Maximum particle speed (higher = bigger explosion)

# === ROCKET SETTINGS ===
v_launch_speed_min = 2               # Minimum launch speed
v_launch_speed_max = 4               # Maximum launch speed
v_rocket_trail_duration = 1000       # How long rocket trail stays visible

# Create arrays for particle management
create_array(v_x, v_num_particles)        # X positions
create_array(v_y, v_num_particles)        # Y positions
create_array(v_dx, v_num_particles)       # X velocity
create_array(v_dy, v_num_particles)       # Y velocity
create_array(v_brightness, v_num_particles) # Particle brightness

# Create arrays for colors
create_array(v_red, v_num_particles)
create_array(v_green, v_num_particles)
create_array(v_blue, v_num_particles)

# Initialize particles to inactive
v_i = 0
while v_i < v_num_particles then
    v_brightness[v_i] = 0
    v_i = v_i + 1
endwhile

# Launch state variables
v_rocket_x = 0          # Rocket X position
v_rocket_y = 64         # Rocket Y position (starts at bottom)
v_rocket_active = 0     # Is rocket launching? (0=no, 1=yes)
v_rocket_dy = 0         # Rocket velocity

# Main animation loop
while true then
    
    # Launch new rocket if none active
    if v_rocket_active == 0 then
        # Random launch position
        v_rocket_x = random(10, v_screen_width - 10, 0)
        v_rocket_y = v_screen_height
        # Random upward velocity
        v_rocket_dy = -random(v_launch_speed_min, v_launch_speed_max, 1)
        v_rocket_active = 1
        
        # Random colors for this firework
        v_fw_red = random(50, 99, 0)
        v_fw_green = random(50, 99, 0)
        v_fw_blue = random(50, 99, 0)
        
        # Random explosion size for this firework
        v_max_speed = random(3, 6, 1)
        # Random fade rate for this firework
        v_fade_rate = random(3, 6, 1)
    endif
    
    # Update rocket
    if v_rocket_active == 1 then
        # Draw rocket trail
        plot(v_rocket_x, v_rocket_y, white:90, v_rocket_trail_duration)
        
        # Update position
        v_rocket_y = v_rocket_y + v_rocket_dy
        v_rocket_dy = v_rocket_dy + 0.1    # Slow down as it rises
        
        # Check if rocket should explode
        if v_rocket_dy > -0.5 then
            v_rocket_active = 0
            
            # Initialize particles
            v_i = 0
            while v_i < v_num_particles then
                v_x[v_i] = v_rocket_x
                v_y[v_i] = v_rocket_y
                
                # Random velocity in circle
                v_angle = random(0, 360, 0)
                v_speed = random(v_min_speed, v_max_speed, 1)
                v_dx[v_i] = cos(v_angle) * v_speed
                v_dy[v_i] = sin(v_angle) * v_speed
                
                # Set particle colors
                v_red[v_i] = v_fw_red
                v_green[v_i] = v_fw_green
                v_blue[v_i] = v_fw_blue
                
                v_brightness[v_i] = v_initial_brightness
                v_i = v_i + 1
            endwhile
        endif
    endif
    
    # Update particles
    v_i = 0
    while v_i < v_num_particles then
        if v_brightness[v_i] > 0 then
            # Update position
            v_x[v_i] = v_x[v_i] + v_dx[v_i]
            v_y[v_i] = v_y[v_i] + v_dy[v_i]
            v_dy[v_i] = v_dy[v_i] + v_gravity
            
            # Fade brightness
            v_brightness[v_i] = v_brightness[v_i] - v_fade_rate
            
            # Draw particle if still visible
            if v_brightness[v_i] > 0 then
                # Calculate color intensity based on brightness
                v_r = v_red[v_i] * v_brightness[v_i] / 99
                v_g = v_green[v_i] * v_brightness[v_i] / 99
                v_b = v_blue[v_i] * v_brightness[v_i] / 99
                
                # Draw different colored sparks with random duration
                if v_i % 3 == 0 then
                    plot(v_x[v_i], v_y[v_i], red:{v_r}, random(300, 1300, 0))
                elseif v_i % 3 == 1 then
                    plot(v_x[v_i], v_y[v_i], violet:{v_g}, random(300, 1300, 0))
                else
                    plot(v_x[v_i], v_y[v_i], blue:{v_b}, random(300, 1300, 0))
                endif
            endif
        endif
        v_i = v_i + 1
    endwhile
  
    rest(0.02)
endwhile