# Cosmic Nebula Simulation - Optimized version
# Single dust cloud with enhanced star field

# Configuration
v_matrix_size = 64
v_num_stars = 40
v_num_dust = 1  # Reduced to single dust cloud
v_rotation_speed = 0.1

# Arrays for stars
create_array(v_star_x, v_num_stars)
create_array(v_star_y, v_num_stars)
create_array(v_star_brightness, v_num_stars)
create_array(v_star_twinkle_phase, v_num_stars)
create_array(v_star_twinkle_speed, v_num_stars)  # Added varying twinkle speeds

# Arrays for dust cloud
create_array(v_dust_x, v_num_dust)
create_array(v_dust_y, v_num_dust)
create_array(v_dust_size, v_num_dust)
create_array(v_dust_phase, v_num_dust)

# Choose color scheme
v_scheme = random(1, 5, 0)
if v_scheme == 1 then
    v_dust_color1 = "magenta"
    v_dust_color2 = "purple"
    print("Color scheme: Purple Nebula")
elseif v_scheme == 2 then
    v_dust_color1 = "azure"
    v_dust_color2 = "blue"
    print("Color scheme: Blue Galaxy")
elseif v_scheme == 3 then
    v_dust_color1 = "coral"
    v_dust_color2 = "crimson"
    print("Color scheme: Red Giant")
elseif v_scheme == 4 then
    v_dust_color1 = "cyan"
    v_dust_color2 = "indigo"
    print("Color scheme: Ice Nebula")
else
    v_dust_color1 = "gold"
    v_dust_color2 = "orange"
    print("Color scheme: Solar Nursery")
endif

# Initialize stars with varying properties
for v_i in (0, v_num_stars - 1, 1) then
    v_star_x[v_i] = random(0, 63, 0)
    v_star_y[v_i] = random(0, 63, 0)
    v_star_brightness[v_i] = random(40, 99, 0)
    v_star_twinkle_phase[v_i] = random(0, 628, 0)
    v_star_twinkle_speed[v_i] = random(5, 15, 0) / 100  # Different speeds for each star
endfor v_i

# Initialize single dust cloud in center region
v_dust_x[0] = random(32-8, 32+8, 0)
v_dust_y[0] = random(32-8, 32+8, 0)
v_dust_size[0] = 20
v_dust_phase[0] = 0

# Set performance
throttle(0.3)

# Main animation loop
v_time = 0
v_angle = 0

while 1 == 1 then
    
    # Draw background stars
    for v_i in (0, v_num_stars - 1, 1) then
        # Update twinkle with individual speeds
        v_star_twinkle_phase[v_i] = v_star_twinkle_phase[v_i] + v_star_twinkle_speed[v_i]
        v_twinkle = sin(v_star_twinkle_phase[v_i] / 100) * 20 + 80
        
        # Calculate final brightness
        v_intensity = v_star_brightness[v_i] * v_twinkle / 100
        v_capped_intensity = min(v_intensity, 99)
        plot(v_star_x[v_i], v_star_y[v_i], white:v_capped_intensity)
    endfor v_i
    
    # Draw central dust cloud
    v_dust_phase[0] = v_dust_phase[0] + v_rotation_speed
    
    # Draw swirling dust
    for v_r in (0, v_dust_size[0], 1) then
        begin_frame(true)
        for v_t in (0, 360, 6) then
            # Calculate spiral position
            v_rad = radians(v_t + v_dust_phase[0])
            v_spiral = v_r + sin(v_rad * 3) * 2
            v_x = v_dust_x[0] + cos(v_rad) * v_spiral
            v_y = v_dust_y[0] + sin(v_rad) * v_spiral
            
            # Only draw if within bounds
            if v_x >= 0 then
                if v_x < 64 then
                    if v_y >= 0 then
                        if v_y < 64 then
                            # Calculate dust intensity
                            v_dist = sqrt(pow(v_x - v_dust_x[0], 2) + pow(v_y - v_dust_y[0], 2))
                            v_wave = sin(v_dist / 4 - v_dust_phase[0])
                            v_intensity = (cos(v_dist / v_dust_size[0] * pi) + 1) * 50
                            v_capped_intensity = min(v_intensity, 99)
                            
                            if v_wave > 0 then
                                plot(v_x, v_y, v_dust_color1:v_capped_intensity)
                            else
                                plot(v_x, v_y, v_dust_color2:v_capped_intensity)
                            endif
                        endif
                    endif
                endif
            endif
        endfor v_t
        end_frame
    endfor v_r
      
    # Star brightness changes - now affects a cluster
    v_random = random(0, 100, 0)
    if v_random < 2 then  # 2% chance each frame
        # Pick a random star as center of cluster
        v_center_star = random(0, v_num_stars - 1, 0)
        v_center_x = v_star_x[v_center_star]
        v_center_y = v_star_y[v_center_star]
        
        # Update nearby stars
        for v_i in (0, v_num_stars - 1, 1) then
            v_dx = v_star_x[v_i] - v_center_x
            v_dy = v_star_y[v_i] - v_center_y
            v_dist = sqrt(v_dx * v_dx + v_dy * v_dy)
            
            # If star is within 10 pixels of center star
            if v_dist < 10 then
                v_star_brightness[v_i] = random(40, 99, 0)
            endif
        endfor v_i
    endif
    
    v_time = v_time + 0.03
    v_angle = v_angle + v_rotation_speed
    
endwhile