# Bouncing Pixels Animation with Energy Boosts
# Creates multiple pixels that bounce around with physics

# Number of pixels
v_num_pixels = 4

# Create arrays for pixel properties
create_array(v_x, v_num_pixels)      # X position
create_array(v_y, v_num_pixels)      # Y position
create_array(v_vx, v_num_pixels)     # X velocity
create_array(v_vy, v_num_pixels)     # Y velocity
create_array(v_color, v_num_pixels)  # Color index
create_array(v_trail, v_num_pixels)  # Trail length

# Initialize variables
v_i = 0
v_bright = 0
v_bounce = 0.95   # Higher bounce coefficient to maintain energy
v_gravity = 0.1   # Reduced gravity for slower energy loss
v_trail_x = 0
v_trail_y = 0
v_trail_bright = 0
v_t = 0           # Trail counter
v_boost_threshold = 1.0  # Velocity threshold for boost

# Initialize pixels
v_i = 0
while v_i < v_num_pixels then
    # Random starting position
    v_x[v_i] = random(10, 53, 0)
    v_y[v_i] = random(10, 53, 0)
    
    # Random initial velocity
    v_vx[v_i] = random(-3, 3, 1)
    v_vy[v_i] = random(-4, -2, 1)
    
    # Random color (0-5)
    v_color[v_i] = random(0, 5, 0)
    
    # Shorter trails to reduce flicker
    v_trail[v_i] = random(2, 4, 0)
    
    v_i = v_i + 1
endwhile

# Main animation loop
while true then
    begin_frame
    
    v_i = 0
    while v_i < v_num_pixels then
        # Update velocity with gravity
        v_vy[v_i] = v_vy[v_i] + v_gravity
        
        # Check for energy boost when velocity is low and near bottom
        if v_y[v_i] > 50 then
            if abs(v_vy[v_i]) < v_boost_threshold then
                # Give a random upward boost
                v_vy[v_i] = random(-4, -2, 1)
                v_vx[v_i] = random(-3, 3, 1)
            endif
        endif
        
        # Update position
        v_x[v_i] = v_x[v_i] + v_vx[v_i]
        v_y[v_i] = v_y[v_i] + v_vy[v_i]
        
        # Bounce off walls with slight inward push
        if v_x[v_i] < 0 then
            v_x[v_i] = 0
            v_vx[v_i] = -v_vx[v_i] * v_bounce + 0.1
        endif
        
        if v_x[v_i] > 63 then
            v_x[v_i] = 63
            v_vx[v_i] = -v_vx[v_i] * v_bounce - 0.1
        endif
        
        # Bounce off floor and ceiling
        if v_y[v_i] < 0 then
            v_y[v_i] = 0
            v_vy[v_i] = -v_vy[v_i] * v_bounce
        endif
        
        if v_y[v_i] > 63 then
            v_y[v_i] = 63
            v_vy[v_i] = -v_vy[v_i] * v_bounce
        endif
        
        # Draw the main pixel first (brighter than trail)
        if v_color[v_i] == 0 then
            plot(v_x[v_i], v_y[v_i], cyan:99, 100)
        elseif v_color[v_i] == 1 then
            plot(v_x[v_i], v_y[v_i], magenta:99, 100)
        elseif v_color[v_i] == 2 then
            plot(v_x[v_i], v_y[v_i], yellow:99, 100)
        elseif v_color[v_i] == 3 then
            plot(v_x[v_i], v_y[v_i], blue:99, 100)
        elseif v_color[v_i] == 4 then
            plot(v_x[v_i], v_y[v_i], green:99, 100)
        else
            plot(v_x[v_i], v_y[v_i], red:99, 100)
        endif
        
        # Draw shorter trail
        v_t = 1  # Start at 1 to skip current position
        while v_t < v_trail[v_i] then
            v_trail_x = v_x[v_i] - (v_vx[v_i] * v_t)
            v_trail_y = v_y[v_i] - (v_vy[v_i] * v_t)
            
            # Only draw trail points that are on screen
            if v_trail_x >= 0 then
                if v_trail_x < 64 then
                    if v_trail_y >= 0 then
                        if v_trail_y < 64 then
                            # Higher minimum brightness for trail
                            v_trail_bright = 80 - (v_t * 20)
                            if v_trail_bright < 20 then
                                v_trail_bright = 20
                            endif
                            
                            if v_color[v_i] == 0 then
                                plot(v_trail_x, v_trail_y, cyan:{v_trail_bright}, 100)
                            elseif v_color[v_i] == 1 then
                                plot(v_trail_x, v_trail_y, magenta:{v_trail_bright}, 100)
                            elseif v_color[v_i] == 2 then
                                plot(v_trail_x, v_trail_y, yellow:{v_trail_bright}, 100)
                            elseif v_color[v_i] == 3 then
                                plot(v_trail_x, v_trail_y, blue:{v_trail_bright}, 100)
                            elseif v_color[v_i] == 4 then
                                plot(v_trail_x, v_trail_y, green:{v_trail_bright}, 100)
                            else
                                plot(v_trail_x, v_trail_y, red:{v_trail_bright}, 100)
                            endif
                        endif
                    endif
                endif
            endif
            
            v_t = v_t + 1
        endwhile
        
        v_i = v_i + 1
    endwhile
    
    end_frame
endwhile