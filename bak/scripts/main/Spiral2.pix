# Base spiral parameters
v_centerX = 32
v_centerY = 32
v_radius = 25
v_angle = 0
v_points = 250
v_rotations = 3
v_color_base = 45
v_fade_start = 99

# Animation control variables
v_frame_mode = 1        # Track frame buffering state (1=on, 0=off)
v_speed = 5             # Base rotation speed
v_rest_time = 0.05      # Base rest time
v_burnout_enabled = 0   # Burnout effect (1=on, 0=off)
v_burnout_min = 100     # Minimum burnout time (ms)
v_burnout_max = 500     # Maximum burnout time (ms)
v_effect_duration = 0    # Track effect duration
v_effect_max_time = 2  # Maximum time for each effect variation

# Calculate initial angle increment
v_angle_inc = 360 * v_rotations / v_points

# Main animation loop
while 1 then
    # Randomly change effect parameters
    if v_effect_duration > v_effect_max_time then
        # Reset duration counter
        v_effect_duration = 0
        
        # Random frame mode (1 or 0)
        if random(0, 100, 0) > 87 then
            v_frame_mode = 1
        else
            v_frame_mode = 0
        endif
        
        # Random speed changes
        v_speed = random(2, 10, 0)
        
        # Random rotation changes
        v_rotations = random(2, 5, 0)
        v_angle_inc = 360 * v_rotations / v_points
        
        # Random burnout effect
        if random(0, 100, 0) > 49 then
            v_burnout_enabled = 1
            v_rest_time = 0.01
        else
            v_burnout_enabled = 0
            v_rest_time = 0.05
        endif
    endif
    
    # Start frame if frame mode enabled
    if v_frame_mode == 1 then
        begin_frame(true)
    endif
    
    clear
    
    # Draw spiral points
    for v_i in (0, v_points, 1) then
        # Calculate decreasing radius
        v_r = v_radius * (1 - v_i / v_points)
        
        # Calculate spiral point positions using current angle
        v_x = v_centerX + v_r * cos(v_angle + v_i * v_angle_inc)
        v_y = v_centerY + v_r * sin(v_angle + v_i * v_angle_inc)
        
        # Calculate fading intensity
        v_intensity = v_fade_start * (1 - v_i / v_points)
        
        # Draw point with or without burnout
        if v_burnout_enabled == 1 then
            v_burnout = random(v_burnout_min, v_burnout_max, 0)
            plot(v_x, v_y, {v_color_base}:{v_intensity}, v_burnout)
        else
            plot(v_x, v_y, {v_color_base}:{v_intensity})
        endif
    endfor v_i
    
    # End frame if frame mode enabled
    if v_frame_mode == 1 then
        end_frame
    endif
    
    # Update animation angle and color
    v_angle = v_angle + v_speed
    v_color_base = v_color_base + 1
    if v_color_base > 99 then
        v_color_base = 1
    endif
    
    v_effect_duration = v_effect_duration + 1
    
    rest(random(v_rest_time, v_rest_time + .5, 2))
endwhile