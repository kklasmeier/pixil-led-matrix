# Create ball sprites
def create_ball_sprites()
    define_sprite(ball0, 6, 6)  # 12 o'clock
        draw_circle(3, 3, 2, cyan, false)
        draw_circle(3, 3, 1, blue, true)
        draw_line(3, 1, 3, 2, white)
    endsprite

    define_sprite(ball1, 6, 6)  # 3 o'clock
        draw_circle(3, 3, 2, cyan, false)
        draw_circle(3, 3, 1, blue, true)
        draw_line(4, 3, 5, 3, white)
    endsprite

    define_sprite(ball2, 6, 6)  # 6 o'clock
        draw_circle(3, 3, 2, cyan, false)
        draw_circle(3, 3, 1, blue, true)
        draw_line(3, 4, 3, 5, white)
    endsprite

    define_sprite(ball3, 6, 6)  # 9 o'clock
        draw_circle(3, 3, 2, cyan, false)
        draw_circle(3, 3, 1, blue, true)
        draw_line(1, 3, 2, 3, white)
    endsprite

# Initialize display
def init_display()
    clear()
    draw_line(0, 60, 63, 60, white)   # Floor

# Main program
create_ball_sprites()
init_display()

# Physics constants
v_gravity = 0.2            # Gravity
v_bounce = 0.85           # Energy loss on bounce
v_friction = 0.995        # Air friction
v_rolling_friction = 0.98  # Ground friction
v_dt = 0.1                # Time step
v_floor_threshold = 57     # Y position where we consider ball "on floor"
v_spin_friction = 0.98     # Spin slowdown
v_spin_transfer = 0.3      # How much horizontal motion converts to spin

# Run 10 sequences
for v_sequence in (1, 10, 1)
    # Initialize ball position for each sequence
    v_x = random(3, 60, 0)   # Random x position between 3 and 60
    v_y = 5.0                # Start near top of matrix
    
    # New random velocities for this sequence
    v_dx = random(-4, 4, 2)    # Random horizontal velocity
    v_dy = random(1, 3, 2)     # Random downward velocity (positive)
    v_spin = v_dx * 0.3        # Initial spin based on horizontal velocity
    
    print(f"Sequence {v_sequence} - Position: ({v_x}, {v_y}) Velocities: dx={v_dx}, dy={v_dy}")
     
    # Animation loop for this sequence
    for v_t in (0, 30, v_dt)
        # Update physics
        v_dy = v_dy + v_gravity
        v_dx = v_dx * v_friction
        v_spin = v_spin * v_spin_friction
        
        if v_y >= v_floor_threshold then
            v_dx = v_dx * v_rolling_friction
        endif
        
        v_x = v_x + v_dx
        v_y = v_y + v_dy
        
        # Handle collisions
        if v_y > v_floor_threshold then
            v_y = v_floor_threshold
            v_dy = -v_dy * v_bounce
            v_spin = v_spin + (v_dx * v_spin_transfer)
        endif
        
        if v_x < -3 then
            v_x = -3
            v_dx = -v_dx * v_bounce
            v_spin = -v_spin * v_bounce
        endif
        
        if v_x > 63 then
            v_x = 63
            v_dx = -v_dx * v_bounce
            v_spin = -v_spin * v_bounce
        endif
        
        # Update sprite display
        hide_sprite(ball0)
        hide_sprite(ball1)
        hide_sprite(ball2)
        hide_sprite(ball3)
        
        v_frame = abs(round(v_spin)) % 4
        if v_frame == 0 then
            show_sprite(ball0, v_x, v_y)
        endif
        if v_frame == 1 then
            show_sprite(ball1, v_x, v_y)
        endif
        if v_frame == 2 then
            show_sprite(ball2, v_x, v_y)
        endif
        if v_frame == 3 then
            show_sprite(ball3, v_x, v_y)
        endif
        
        rest(0.01)
    endfor v_t
    
    # Pause between sequences
    rest(0.5)
endfor v_sequence

# Clean up
hide_sprite(ball0)
hide_sprite(ball1)
hide_sprite(ball2)
hide_sprite(ball3)
clear()
