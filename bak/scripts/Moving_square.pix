# Create a round test sprite
define_sprite(test_sprite, 13, 13)
    draw_circle(6, 6, 6, red, true)      # Red filled circle
    draw_circle(6, 6, 4, yellow, true)   # Inner yellow circle
endsprite

# Show sprite at starting position
show_sprite(test_sprite, 0, 0)

v_speed = 0.03

# Define current position (start at top-left)
v_curr_x = 0
v_curr_y = 0

# Start in upper left corner (corner 1)
v_corner = 1

# Main animation loop
for v_loop in (1, 10, 1)
    # Draw background lines
    for v_y in (0, 63, 4)
        draw_line(0, v_y, 63, v_y, blue, 9650)
   
        v_next_corner = random(1, 4, 0)
        if v_next_corner == v_corner then
            v_next_corner = v_next_corner + 1
            if v_next_corner > 4 then
                v_next_corner = 1
            endif
        endif
        v_corner = v_next_corner
        
        # Set target corner coordinates
        if v_corner == 1 then
            v_target_x = 0
            v_target_y = 0
        endif
        if v_corner == 2 then
            v_target_x = 50  # Adjusted from 63 to account for sprite size
            v_target_y = 0
        endif
        if v_corner == 3 then
            v_target_x = 0
            v_target_y = 50  # Adjusted from 63 to account for sprite size
        endif
        if v_corner == 4 then
            v_target_x = 50  # Adjusted from 63 to account for sprite size
            v_target_y = 50  # Adjusted from 63 to account for sprite size
        endif
        
        # Move to target in steps
        v_steps = 25
        for v_i in (1, v_steps, 1)
            # Calculate next position
            v_x1 = v_curr_x + ((v_target_x - v_curr_x) * v_i / v_steps)
            v_y1 = v_curr_y + ((v_target_y - v_curr_y) * v_i / v_steps)
            
            # Move sprite
            move_sprite(test_sprite, v_x1, v_y1)
            rest(v_speed)
        endfor v_i
    
        # Update current position
        v_curr_x = v_target_x
        v_curr_y = v_target_y
        
    endfor v_y   
endfor v_loop