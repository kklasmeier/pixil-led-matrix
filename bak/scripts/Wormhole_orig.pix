throttle(.8)
# Initialize variables
v_center_x = 31  # Center of display
v_center_y = 31
v_running = 1
v_num_particles = 40
v_max_radius = 35  # Maximum radius of the wormhole

# Create arrays for particles
create_array(v_particle_x, v_num_particles)  # Current x position
create_array(v_particle_y, v_num_particles)  # Current y position
create_array(v_particle_angle, v_num_particles)  # Angle around center
create_array(v_particle_radius, v_num_particles)  # Distance from center
create_array(v_particle_speed, v_num_particles)  # Rotation speed
create_array(v_particle_intensity, v_num_particles)  # Brightness
create_array(v_inward_speed, v_num_particles)  # Speed moving toward center

# Time variables for effects
v_time = 0
v_pulse_time = 0

def initialize_particle {
    # Random angle around the circle
    v_particle_angle[v_i] = random(0, 360, 0)
    
    # Start at outer edge
    v_particle_radius[v_i] = v_max_radius
    
    # Random rotation speed
    v_particle_speed[v_i] = random(2, 5, 1)
    
    # Full brightness to start
    v_particle_intensity[v_i] = 90
    
    # Initial inward speed
    v_inward_speed[v_i] = random(0.1, 0.3, 2)
}

# Initialize all particles
for v_i in (0, v_num_particles - 1, 1) then
    call initialize_particle
endfor v_i

# Main animation loop
while v_running == 1 then
    begin_frame
    
    # Clear with very dim background for slight trail effect
    draw_rectangle(0, 0, 64, 64, {43}:5, true)
    
    # Update time variables
    v_time = v_time + 1
    v_pulse_time = v_pulse_time + 0.1
    
    # Draw outer ring that pulses
    v_ring_intensity = 50 + sin(v_pulse_time) * 30
    draw_circle(v_center_x, v_center_y, v_max_radius, {45}:{v_ring_intensity}, false)
    
    # Update and draw particles
    for v_i in (0, v_num_particles - 1, 1) then
        # Update particle angle
        v_particle_angle[v_i] = v_particle_angle[v_i] + v_particle_speed[v_i]
        if v_particle_angle[v_i] > 360 then
            v_particle_angle[v_i] = v_particle_angle[v_i] - 360
        endif
        
        # Move particle inward
        v_particle_radius[v_i] = v_particle_radius[v_i] - v_inward_speed[v_i]
        
        # Adjust particle speed as it gets closer to center
        v_radius_factor = v_particle_radius[v_i] / v_max_radius
        v_particle_speed[v_i] = 2 + (1 - v_radius_factor) * 8
        
        # Calculate position
        v_angle_rad = v_particle_angle[v_i] * pi / 180
        v_particle_x[v_i] = v_center_x + cos(v_angle_rad) * v_particle_radius[v_i]
        v_particle_y[v_i] = v_center_y + sin(v_angle_rad) * v_particle_radius[v_i]
        
        # Draw particle with trail
        v_tail_len = v_particle_speed[v_i] / 2
        v_tail_x = v_particle_x[v_i] - cos(v_angle_rad) * v_tail_len
        v_tail_y = v_particle_y[v_i] - sin(v_angle_rad) * v_tail_len
        
        # Color shifts from blue to white as particles approach center
        v_color = 45
        if v_radius_factor < 0.3 then
            v_color = 15  # White
        endif
        
        # Draw particle trail
        draw_line(v_particle_x[v_i], v_particle_y[v_i], v_tail_x, v_tail_y, {v_color}:{v_particle_intensity[v_i]})
        
        # Reset particle if it reaches center
        if v_particle_radius[v_i] < 2 then
            call initialize_particle
        endif
    endfor v_i
    
    # Draw central glow
    v_center_pulse = (sin(v_pulse_time) + 1) * 20 + 40
    draw_circle(v_center_x, v_center_y, 3, white:{v_center_pulse}, true)
    draw_circle(v_center_x, v_center_y, 2, white:90, true)
    
    end_frame
endwhile